month = as.numeric(format(date, '%m')),
year = as.factor(format(date, '%Y')),
doy = as.numeric(format(date, '%j')),
LSmission = case_when(grepl('LT04', `system:index`) ~ 'LS 4',
grepl('LT05', `system:index`) ~ 'LS 5',
grepl('LE07', `system:index`) ~ 'LS 7',
grepl('LC08', `system:index`) ~ 'LS 8')) %>%
rowid_to_column()
C2_lst_all %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
#repace with real file later
C2_lst_paired <- read_csv(paste0(datadir, 'colab-output/C2/temporary_sunapee_paired_C2.csv'),
col_types = c('')) %>%
mutate(date =as.Date(substrRight(`system:index`, 8), '%Y%m%d')) %>%
filter(as.numeric(format(date, '%m')) < 11 & as.numeric(format(date, '%m')) >5)
# REPLACE WITH REAL FILE LATER
C2_lst_paired <- read_csv(paste0(datadir, 'temporary_sunapee_stats_paired_C2.csv'),
col_types = c(''))
# REPLACE WITH REAL FILE LATER
C2_lst_paired <- read_csv(paste0(datadir, 'colab-output/C2/temporary_sunapee_stats_paired_C2.csv'),
col_types = c(''))
View(C2_lst_paired)
#number of observations for total DB
insitu %>%
summarize(nobs = length(datetime),
ndays = length(unique(format(datetime, '%Y-%m-%d'))),
year_start = min(as.numeric(format(datetime, '%Y'))),
year_end = max(as.numeric(format(datetime, '%Y'))),
min_month = min(as.numeric(format(datetime, '%m'))),
max_month = max(as.numeric(format(datetime, '%m'))),
nsites = length(unique(location)))
#number of observations between time of 9 and 11
insitu %>%
mutate(hour = as.numeric(format(datetime, '%H'))) %>%
filter(hour >= 9 & hour < 11) %>%
summarize(nobs = length(datetime),
ndays = length(unique(format(datetime, '%Y-%m-%d'))),
year_start = min(as.numeric(format(datetime, '%Y'))),
year_end = max(as.numeric(format(datetime, '%Y'))),
min_month = min(as.numeric(format(datetime, '%m'))),
max_month = max(as.numeric(format(datetime, '%m'))),
nsites = length(unique(location)))
#document max spread and IQR for LST filtering
range_per_date <- insitu %>%
mutate(hour = as.numeric(format(datetime, '%H')),
date = as.Date(datetime)) %>%
filter(hour >= 9 & hour < 11) %>%
group_by(date) %>%
summarize(temp_range = max(temp_degC) - min(temp_degC),
IQR = IQR(temp_degC, na.rm = T),
n_locs = length(unique(location)))
max_spread <- max(range_per_date$temp_range, na.rm = T)
max_IQR <- max(range_per_date$IQR, na.rm = T)
range_summary <- range_per_date %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
filter(n_locs >3) %>%
summarise(min_range = min(temp_range, na.rm = T),
max_range = max(temp_range, na.rm = T))
View(range_summary)
range_summary <- range_per_date %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
filter(n_locs >3) %>%
summarise(min_range = min(temp_range, na.rm = T),
max_range = max(temp_range, na.rm = T),
min_IQR = min(IQR, na.rm = T),
max_IQR = max(IQR, na.rm = T))
View(range_summary)
range_summary <- range_per_date %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
summarise(min_range = min(temp_range, na.rm = T),
max_range = max(temp_range, na.rm = T),
min_IQR = min(IQR, na.rm = T),
max_IQR = max(IQR, na.rm = T))
lst_all_val <- lst_all %>%
mutate(freeze_QAQC = case_when(surface_temp_min < 0 ~ 'F', #pass/fail for freezing temps
TRUE ~ 'P')) %>%
# left_join(., modal_analysis) %>% #join with modal analysis
# mutate(unimodal_QAQC = case_when(unimodal == 'unimodal' ~ 'P',
#                                  TRUE ~ 'F')) %>%  # pass/fail for unimodality
mutate(temp_spread = round(surface_temp_max, digits = 1) - round(surface_temp_min, digits = 1)) %>% #calc temp spread; pass/fail for temp spread
mutate(spread_QAQC = case_when(temp_spread < max_spread*1.1 ~ 'P',
TRUE ~ 'F')) %>%
mutate(IQR = round(surface_temp_p75, digits = 1) - round(surface_temp_p25, digits = 1))  %>%  #calc IQR; pass/fail for temp IQR
mutate(IQR_QAQC = case_when(IQR < max_IQR*1.1 ~ 'P',
TRUE ~ 'F'))
C2_lst_all_val <- C2_lst_all %>%
mutate(freeze_QAQC = case_when(surface_temp_min < 0 ~ 'F', #pass/fail for freezing temps
TRUE ~ 'P')) %>%
# left_join(., modal_analysis) %>% #join with modal analysis
# mutate(unimodal_QAQC = case_when(unimodal == 'unimodal' ~ 'P',
#                                  TRUE ~ 'F')) %>%  # pass/fail for unimodality
mutate(temp_spread = round(surface_temp_max, digits = 1) - round(surface_temp_min, digits = 1)) %>% #calc temp spread; pass/fail for temp spread
mutate(spread_QAQC = case_when(temp_spread < max_spread*1.1 ~ 'P',
TRUE ~ 'F')) %>%
mutate(IQR = round(surface_temp_p75, digits = 1) - round(surface_temp_p25, digits = 1))  %>%  #calc IQR; pass/fail for temp IQR
mutate(IQR_QAQC = case_when(IQR < max_IQR*1.1 ~ 'P',
TRUE ~ 'F'))
View(C2_lst_all)
C2_lst_all_val <- C2_lst_all %>%
mutate(freeze_QAQC = case_when(temp_min < 0 ~ 'F', #pass/fail for freezing temps
TRUE ~ 'P')) %>%
# left_join(., modal_analysis) %>% #join with modal analysis
# mutate(unimodal_QAQC = case_when(unimodal == 'unimodal' ~ 'P',
#                                  TRUE ~ 'F')) %>%  # pass/fail for unimodality
mutate(temp_spread = round(temp_max, digits = 1) - round(temp_min, digits = 1)) %>% #calc temp spread; pass/fail for temp spread
mutate(spread_QAQC = case_when(temp_spread < max_spread*1.1 ~ 'P',
TRUE ~ 'F')) %>%
mutate(IQR = round(temp_p75, digits = 1) - round(temp_p25, digits = 1))  %>%  #calc IQR; pass/fail for temp IQR
mutate(IQR_QAQC = case_when(IQR < max_IQR*1.1 ~ 'P',
TRUE ~ 'F'))
lst_filt_maxrange <- lst_all_val %>%
filter(freeze_QAQC == 'P' &
# unimodal_QAQC == 'P' &
spread_QAQC == 'P')
C2_lst_filt_maxrange <- C2_lst_all_val %>%
filter(freeze_QAQC == 'P' &
# unimodal_QAQC == 'P' &
spread_QAQC == 'P')
C2_lst_filt_maxrange %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
C2_lst_filt_maxIQR <- C2_lst_all_val %>%
filter(freeze_QAQC == 'P' &
# unimodal_QAQC == 'P' &
IQR_QAQC == 'P')
C2_lst_filt_maxIQR %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
C2_lst_all_val <- C2_lst_all %>%
mutate(freeze_QAQC = case_when(temp_min < 0 ~ 'F', #pass/fail for freezing temps
TRUE ~ 'P')) %>%
# left_join(., modal_analysis) %>% #join with modal analysis
# mutate(unimodal_QAQC = case_when(unimodal == 'unimodal' ~ 'P',
#                                  TRUE ~ 'F')) %>%  # pass/fail for unimodality
mutate(temp_spread = round(temp_max, digits = 1) - round(temp_min, digits = 1)) %>% #calc temp spread; pass/fail for temp spread
mutate(spread_QAQC = case_when(temp_spread < max_spread*1.1 ~ 'P',
TRUE ~ 'F')) %>%
mutate(IQR = round(temp_p75, digits = 1) - round(temp_p25, digits = 1))  %>%  #calc IQR; pass/fail for temp IQR
mutate(IQR_QAQC = case_when(IQR < max_IQR*1.1 ~ 'P',
TRUE ~ 'F'))
C2_lst_filt_maxrange <- C2_lst_all_val %>%
filter(freeze_QAQC == 'P' &
# unimodal_QAQC == 'P' &
spread_QAQC == 'P')
C2_lst_filt_maxrange %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
C2_lst_filt_maxIQR <- C2_lst_all_val %>%
filter(freeze_QAQC == 'P' &
# unimodal_QAQC == 'P' &
IQR_QAQC == 'P')
C2_lst_filt_maxIQR %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
ggplot(lst_all_val, aes(x = pct_lake, y = (surface_temp_max-surface_temp_min))) +
geom_point(aes(color = month)) +
labs(y = 'temp_spread')+
geom_abline(intercept = 1.1 * max_spread, slope = 0, lty = 2) +
final_theme
C2_lst_all_val <- C2_lst_all %>%
mutate(freeze_QAQC = case_when(temp_min < 0 ~ 'F', #pass/fail for freezing temps
TRUE ~ 'P')) %>%
# left_join(., modal_analysis) %>% #join with modal analysis
# mutate(unimodal_QAQC = case_when(unimodal == 'unimodal' ~ 'P',
#                                  TRUE ~ 'F')) %>%  # pass/fail for unimodality
mutate(temp_spread = round(temp_max, digits = 1) - round(temp_min, digits = 1)) %>% #calc temp spread; pass/fail for temp spread
mutate(spread_QAQC = case_when(temp_spread < max_spread*1.1 ~ 'P',
TRUE ~ 'F')) %>%
mutate(IQR = round(temp_p75, digits = 1) - round(temp_p25, digits = 1))  %>%  #calc IQR; pass/fail for temp IQR
mutate(IQR_QAQC = case_when(IQR < max_IQR*1.1 ~ 'P',
TRUE ~ 'F'))
C2_lst_filt_maxrange <- C2_lst_all_val %>%
filter(freeze_QAQC == 'P' &
# unimodal_QAQC == 'P' &
spread_QAQC == 'P')
C2_lst_filt_maxrange %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
C2_lst_filt_maxIQR <- C2_lst_all_val %>%
filter(freeze_QAQC == 'P' &
# unimodal_QAQC == 'P' &
IQR_QAQC == 'P')
C2_lst_filt_maxIQR %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
ggplot(lst_all_val, aes(x = pct_lake, y = (temp_max-temp_min))) +
geom_point(aes(color = month)) +
labs(y = 'temp_spread')+
geom_abline(intercept = 1.1 * max_spread, slope = 0, lty = 2) +
final_theme
C2_lst_all_val <- C2_lst_all %>%
mutate(freeze_QAQC = case_when(temp_min < 0 ~ 'F', #pass/fail for freezing temps
TRUE ~ 'P')) %>%
# left_join(., modal_analysis) %>% #join with modal analysis
# mutate(unimodal_QAQC = case_when(unimodal == 'unimodal' ~ 'P',
#                                  TRUE ~ 'F')) %>%  # pass/fail for unimodality
mutate(temp_spread = round(temp_max, digits = 1) - round(temp_min, digits = 1)) %>% #calc temp spread; pass/fail for temp spread
mutate(spread_QAQC = case_when(temp_spread < max_spread*1.1 ~ 'P',
TRUE ~ 'F')) %>%
mutate(IQR = round(temp_p75, digits = 1) - round(temp_p25, digits = 1))  %>%  #calc IQR; pass/fail for temp IQR
mutate(IQR_QAQC = case_when(IQR < max_IQR*1.1 ~ 'P',
TRUE ~ 'F'))
C2_lst_filt_maxrange <- C2_lst_all_val %>%
filter(freeze_QAQC == 'P' &
# unimodal_QAQC == 'P' &
spread_QAQC == 'P')
C2_lst_filt_maxrange %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
C2_lst_filt_maxIQR <- C2_lst_all_val %>%
filter(freeze_QAQC == 'P' &
# unimodal_QAQC == 'P' &
IQR_QAQC == 'P')
C2_lst_filt_maxIQR %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
ggplot(C2_lst_all_val, aes(x = pct_lake, y = (temp_max-temp_min))) +
geom_point(aes(color = month)) +
labs(y = 'temp_spread')+
geom_abline(intercept = 1.1 * max_spread, slope = 0, lty = 2) +
final_theme
View(C2_lst_all_val)
View(C2_lst_filt_maxrange)
C2_lst_filt_mod_select_range <- C2_lst_filt_maxrange
C2_lst_filt_mod_select_IQR <- C2_lst_filt_maxIQR
validation_range <- C2_lst_paired %>%
mutate(date = as.Date(substrRight(scene, 8), '%Y%m%d')) %>%
inner_join(., C2_lst_filt_mod_select_range)
validation_range <- C2_lst_paired %>%
inner_join(., C2_lst_filt_mod_select_range)
val_med_ls <- lm(C2_lst_filt_maxrange$temp_median ~ C2_lst_filt_maxrange$temp_med)
View(C2_lst_paired)
C2_lst_filt_mod_select_range <- C2_lst_filt_maxrange %>%
select(date, LSmission) %>%
left_join(., C2_lst_paired)
C2_lst_filt_mod_select_IQR <- C2_lst_filt_maxIQR%>%
select(date, LSmission) %>%
left_join(., C2_lst_paired)
View(C2_lst_filt_mod_select_IQR)
C2_lst_filt_mod_select_range <- C2_lst_filt_maxrange %>%
select(date, LSmission) %>%
right_join(., C2_lst_paired)
C2_lst_filt_mod_select_IQR <- C2_lst_filt_maxIQR%>%
select(date, LSmission) %>%
right_join(., C2_lst_paired)
C2_lst_filt_mod_select_range <- C2_lst_filt_maxrange %>%
select(date, LSmission) %>%
inner_join(., C2_lst_paired)
C2_lst_filt_mod_select_IQR <- C2_lst_filt_maxIQR%>%
select(date, LSmission) %>%
inner_join(., C2_lst_paired)
date
C2_validation_range <- C2_lst_filt_maxrange %>%
select(date, LSmission) %>%
inner_join(., C2_lst_paired)
C2_validation_IQR <- C2_lst_filt_maxIQR%>%
select(date, LSmission) %>%
inner_join(., C2_lst_paired)
val_med_ls <- lm(C2_validation_range$temp_median ~ C2_validation_range$temp_med)
View(C2_validation_range)
val_med_ls <- lm(C2_validation_range$surface_temp_median ~ C2_validation_range$temp_med)
summary(val_med_ls)
val_med_ls <-deming::deming(C2_validation_range$surface_temp_median ~ C2_validation_range$temp_med)
val_med_ls
cor(C2_validation_range$surface_temp_median, C2_validation_range$temp_med)
ggplot(C2_validation_range, aes(x = temp_med, y = surface_temp_median)) +
geom_point() +
geom_abline(intercept = val_med_ls$coefficients[1], slope = val_med_ls$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_ls$ci[1,1], slope = val_med_ls$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_ls$ci[1,2], slope = val_med_ls$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
coord_cartesian(xlim = c(7,27),
ylim = c(7,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
ggplot(C2_validation_range, aes(x = temp_med, y = surface_temp_median)) +
geom_point() +
geom_abline(intercept = val_med_ls$coefficients[1], slope = val_med_ls$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_ls$ci[1,1], slope = val_med_ls$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_ls$ci[1,2], slope = val_med_ls$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
# coord_cartesian(xlim = c(7,27),
#                 ylim = c(7,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
ggplot(C2_validation_range, aes(x = temp_med, y = surface_temp_median)) +
geom_point() +
geom_abline(intercept = val_med_ls$coefficients[1], slope = val_med_ls$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_ls$ci[1,1], slope = val_med_ls$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_ls$ci[1,2], slope = val_med_ls$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
coord_cartesian(xlim = c(5,27),
ylim = c(5,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
ggsave(paste0(figdir, 'C2_deming_range_v07Oct2021.jpg'), height = 5, width = 5, units = 'in')
C2_validation_range$pred_range = val_med_ls$coefficients[1] + val_med_ls$coefficients[2]*C2_validation_range$temp_med
C2_lst_insitu_dem_forresid = mcreg(x = C2_validation_range$temp_med, y = C2_validation_range$surface_temp_median, method.reg = 'Deming')
C2_validation_range$opt_resid_range = MCResult.getResiduals(C2_lst_insitu_dem_forresid)$optimized
#plot to make sure prediction is correct
ggplot(C2_validation_range, aes(x = temp_med, y = pred_range))+
geom_point(color = 'blue') +
geom_point(aes(x = temp_med, y = surface_temp_median))
ggplot(C2_validation_range, aes(x = temp_med, y = surface_temp_median)) +
geom_point() +
geom_abline(intercept = val_med_ls$coefficients[1], slope = val_med_ls$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_ls$ci[1,1], slope = val_med_ls$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_ls$ci[1,2], slope = val_med_ls$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
coord_cartesian(xlim = c(5,27),
ylim = c(5,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
View(C2_validation_range)
C2_C2_validation_range <- C2_lst_filt_maxrange %>%
select(date, LSmission) %>%
inner_join(., C2_lst_paired)
C2_C2_validation_IQR <- C2_lst_filt_maxIQR%>%
select(date, LSmission) %>%
inner_join(., C2_lst_paired)
val_med_ls <-deming::deming(C2_validation_range$surface_temp_median ~ C2_validation_range$temp_med)
val_med_ls
cor(C2_validation_range$surface_temp_median, C2_validation_range$temp_med)
ggplot(C2_validation_range, aes(x = temp_med, y = surface_temp_median)) +
geom_point() +
geom_abline(intercept = val_med_ls$coefficients[1], slope = val_med_ls$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_ls$ci[1,1], slope = val_med_ls$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_ls$ci[1,2], slope = val_med_ls$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
coord_cartesian(xlim = c(5,27),
ylim = c(5,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
ggsave(paste0(figdir, 'C2_deming_range_v07Oct2021.jpg'), height = 5, width = 5, units = 'in')
C2_validation_range$pred_temp_range = val_med_ls$coefficients[1] + val_med_ls$coefficients[2]*C2_validation_range$temp_med
C2_lst_insitu_dem_forresid = mcreg(x = C2_validation_range$temp_med, y = C2_validation_range$surface_temp_median, method.reg = 'Deming')
C2_validation_range$opt_resid_range = MCResult.getResiduals(C2_lst_insitu_dem_forresid)$optimized
#plot to make sure prediction is correct
ggplot(C2_validation_range, aes(x = temp_med, y = pred_range))+
geom_point(color = 'blue') +
geom_point(aes(x = temp_med, y = surface_temp_median))
C2_validation_range <- C2_validation_range %>%
mutate(calib_range = (surface_temp_median-val_med_ls$coefficients[1])/val_med_ls$coefficients[2]) %>%
select(rowid, temp_med, pred_range, opt_resid_range, calib_range)
C2_validation_range <- C2_validation_range %>%
mutate(calib_range = (surface_temp_median-val_med_ls$coefficients[1])/val_med_ls$coefficients[2]) %>%
select(date, LSmission, temp_med, pred_temp_range, opt_resid_range, calib_range)
C2_lst_all_val <- C2_lst_all_val %>%
full_join(., C2_validation_range)
ggplot(C2_lst_all_val, aes(x = temp_med, y = surface_temp_median)) +
geom_point() +
geom_point(aes(x = temp_med, y = calib_range), color = 'red')+
geom_abline(intercept = val_med_ls$coefficients[1], slope = val_med_ls$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_ls$ci[1,1], slope = val_med_ls$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_ls$ci[1,2], slope = val_med_ls$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
coord_cartesian(xlim = c(7,27),
ylim = c(7,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
ggplot(C2_lst_all_val, aes(x = temp_med, y = temp_median)) +
geom_point() +
geom_point(aes(x = temp_med, y = calib_range), color = 'red')+
geom_abline(intercept = val_med_ls$coefficients[1], slope = val_med_ls$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_ls$ci[1,1], slope = val_med_ls$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_ls$ci[1,2], slope = val_med_ls$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
coord_cartesian(xlim = c(7,27),
ylim = c(7,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
val_med_IQR <- lm(C2_validation_IQR$surface_temp_median ~ C2_validation_IQR$temp_med)
summary(val_med_IQR)
val_med_IQR_dem <-deming::deming(C2_validation_IQR$surface_temp_median ~ C2_validation_IQR$temp_med)
val_med_IQR_dem
cor(C2_validation_IQR$surface_temp_median, C2_validation_IQR$temp_med)
ggplot(C2_validation_IQR, aes(x = temp_med, y = surface_temp_median)) +
geom_point() +
geom_abline(intercept = val_med_IQR_dem$coefficients[1], slope = val_med_IQR_dem$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_IQR_dem$ci[1,1], slope = val_med_IQR_dem$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_IQR_dem$ci[1,2], slope = val_med_IQR_dem$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
coord_cartesian(xlim = c(7,27),
ylim = c(7,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
ggsave(paste0(figdir, 'C2_deming_reg_median_IQR_v07Oct2021.jpg'), height = 5, width = 5, units = 'in')
C2_validation_IQR$pred_IQR = val_med_IQR_dem$coefficients[1] + val_med_IQR_dem$coefficients[2]*C2_validation_IQR$temp_med
C2_validation_IQR$pred_temp_IQR = val_med_IQR_dem$coefficients[1] + val_med_IQR_dem$coefficients[2]*C2_validation_IQR$temp_med
knitr::opts_chunk$set(echo = TRUE)
source('R_library.R')
dir = '~/GitHub/ids-ne-lakes/'
datadir = '~/GitHub/ids-ne-lakes/data/'
figdir = '~/GitHub/ids-ne-lakes/figures/'
#load in all high-frequency insitu data for historical data analysis
insitu <- read.csv(paste0(datadir, 'insitu_temp_data_v2021-05-17.csv')) %>%
filter(!is.na(lat_dd)) %>%
mutate(datetime = as.POSIXct(datetime, tz='Etc/GMT+5'))
#read in all skin temp data for whole lake
C2_lst_all <- read_csv(paste0(datadir, 'colab-output/C2/sunapee_1980_2020_C2_stats.csv'),
col_types = c('')) %>%
mutate(date =as.Date(substrRight(`system:index`, 8), '%Y%m%d'),
month = as.numeric(format(date, '%m')),
year = as.factor(format(date, '%Y')),
doy = as.numeric(format(date, '%j')),
LSmission = case_when(grepl('LT04', `system:index`) ~ 'LS 4',
grepl('LT05', `system:index`) ~ 'LS 5',
grepl('LE07', `system:index`) ~ 'LS 7',
grepl('LC08', `system:index`) ~ 'LS 8')) %>%
rowid_to_column()
C2_lst_all %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
# REPLACE WITH REAL FILE LATER
C2_lst_paired <- read_csv(paste0(datadir, 'colab-output/C2/temporary_sunapee_stats_paired_C2.csv'),
col_types = c(''))
#number of observations for total DB
insitu %>%
summarize(nobs = length(datetime),
ndays = length(unique(format(datetime, '%Y-%m-%d'))),
year_start = min(as.numeric(format(datetime, '%Y'))),
year_end = max(as.numeric(format(datetime, '%Y'))),
min_month = min(as.numeric(format(datetime, '%m'))),
max_month = max(as.numeric(format(datetime, '%m'))),
nsites = length(unique(location)))
#number of observations between time of 9 and 11
insitu %>%
mutate(hour = as.numeric(format(datetime, '%H'))) %>%
filter(hour >= 9 & hour < 11) %>%
summarize(nobs = length(datetime),
ndays = length(unique(format(datetime, '%Y-%m-%d'))),
year_start = min(as.numeric(format(datetime, '%Y'))),
year_end = max(as.numeric(format(datetime, '%Y'))),
min_month = min(as.numeric(format(datetime, '%m'))),
max_month = max(as.numeric(format(datetime, '%m'))),
nsites = length(unique(location)))
#number of sites
length(unique(insitu$location))
unique(insitu$location)
#document max spread and IQR for C2_lst filtering
range_per_date <- insitu %>%
mutate(hour = as.numeric(format(datetime, '%H')),
date = as.Date(datetime)) %>%
filter(hour >= 9 & hour < 11) %>%
group_by(date) %>%
summarize(temp_range = max(temp_degC) - min(temp_degC),
IQR = IQR(temp_degC, na.rm = T),
n_locs = length(unique(location)))
max_spread <- max(range_per_date$temp_range, na.rm = T)
max_IQR <- max(range_per_date$IQR, na.rm = T)
range_summary <- range_per_date %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
summarise(min_range = min(temp_range, na.rm = T),
max_range = max(temp_range, na.rm = T),
min_IQR = min(IQR, na.rm = T),
max_IQR = max(IQR, na.rm = T))
insitu %>%
mutate(year = format(datetime, '%Y'),
month = as.numeric(format(datetime, '%m'))) %>%
group_by(year, location) %>%
summarise(min_depth_m = min(depth_m),
max_depth_m = max(depth_m),
min_month = min(month),
max_month = max(month)) %>%
pivot_longer(!c(year, location), names_to = 'variable', values_to = 'value') %>%
pivot_wider(id_cols = c(year, variable, value),
names_from = c(location, variable)) %>%
write.csv(., file.path(datadir, 'insitu_data_extent_summary.csv'), row.names = F)
C2_lst_all_val <- C2_lst_all %>%
mutate(freeze_QAQC = case_when(temp_min < 0 ~ 'F', #pass/fail for freezing temps
TRUE ~ 'P')) %>%
# left_join(., modal_analysis) %>% #join with modal analysis
# mutate(unimodal_QAQC = case_when(unimodal == 'unimodal' ~ 'P',
#                                  TRUE ~ 'F')) %>%  # pass/fail for unimodality
mutate(temp_spread = round(temp_max, digits = 1) - round(temp_min, digits = 1)) %>% #calc temp spread; pass/fail for temp spread
mutate(spread_QAQC = case_when(temp_spread < max_spread*1.1 ~ 'P',
TRUE ~ 'F')) %>%
mutate(IQR = round(temp_p75, digits = 1) - round(temp_p25, digits = 1))  %>%  #calc IQR; pass/fail for temp IQR
mutate(IQR_QAQC = case_when(IQR < max_IQR*1.1 ~ 'P',
TRUE ~ 'F'))
C2_lst_filt_maxrange <- C2_lst_all_val %>%
filter(freeze_QAQC == 'P' &
# unimodal_QAQC == 'P' &
spread_QAQC == 'P')
C2_lst_filt_maxrange %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
C2_lst_filt_maxIQR <- C2_lst_all_val %>%
filter(freeze_QAQC == 'P' &
# unimodal_QAQC == 'P' &
IQR_QAQC == 'P')
C2_lst_filt_maxIQR %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
ggplot(C2_lst_all_val, aes(x = pct_lake, y = (temp_max-temp_min))) +
geom_point(aes(color = month)) +
labs(y = 'temp_spread')+
geom_abline(intercept = 1.1 * max_spread, slope = 0, lty = 2) +
final_theme
