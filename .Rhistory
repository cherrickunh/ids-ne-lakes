#transform and rename
temp_histo <- temp_histo %>%
pivot_longer(names_to = 'landsat_index',
values_to = 'count') %>%
mutate(date = substr(landsat_index, 2, 9),
date = as.Date(date, format = '%Y%m%d'),
bin = as.numeric(bin),
count = as.numeric(count)) %>%
rename(temp_degC = bin)
#transform and rename
temp_histo <- temp_histo %>%
pivot_longer(names_to = 'landsat_index',
values_to = 'count',
cols = c(LT05_L1TP_013030_19840610_20200918_02_T1:LE07_L1TP_013030_20201011_20201107_02_T1)) %>%
mutate(date = substr(landsat_index, 2, 9),
date = as.Date(date, format = '%Y%m%d'),
bin = as.numeric(bin),
count = as.numeric(count)) %>%
rename(temp_degC = bin)
View(temp_histo)
source('scripts/R_library.R')
#point to data directory
datadir = 'data/colab-output/C2/'
#transform and rename
temp_histo <- temp_histo %>%
pivot_longer(names_to = 'landsat_index',
values_to = 'count',
cols = c(LT05_L1TP_013030_19840610_20200918_02_T1:LE07_L1TP_013030_20201011_20201107_02_T1)) %>%
mutate(date = substrRight(landsat_index, 14, 8),
date = as.Date(date, format = '%Y%m%d'),
bin = as.numeric(bin),
count = as.numeric(count)) %>%
rename(temp_degC = bin)
#load file
temp_histo <- read.csv(file.path(datadir, 'sunapee_histograms.csv'))
#transform and rename
temp_histo_vert <- temp_histo %>%
pivot_longer(names_to = 'landsat_index',
values_to = 'count',
cols = c(LT05_L1TP_013030_19840610_20200918_02_T1:LE07_L1TP_013030_20201011_20201107_02_T1)) %>%
mutate(date = substrRight(landsat_index, 14, 8),
date = as.Date(date, format = '%Y%m%d'),
bin = as.numeric(bin),
count = as.numeric(count)) %>%
rename(temp_degC = bin)
#transform and rename
temp_histo_vert <- temp_histo %>%
pivot_longer(names_to = 'landsat_index',
values_to = 'count',
cols = c(LT05_L1TP_013030_19840610_20200918_02_T1:LE07_L1TP_013030_20201011_20201107_02_T1)) %>%
mutate(date = substrRight(landsat_index, 14),
date = as.Date(date, format = '%Y%m%d'),
bin = as.numeric(bin),
count = as.numeric(count)) %>%
rename(temp_degC = bin)
#transform and rename
temp_histo_vert <- temp_histo %>%
pivot_longer(names_to = 'landsat_index',
values_to = 'count',
cols = c(LT05_L1TP_013030_19840610_20200918_02_T1:LE07_L1TP_013030_20201011_20201107_02_T1)) %>%
mutate(date = substrRight(landsat_index, 14),
date = as.Date(date, format = '%Y%m%d'),
# bin = as.numeric(bin),
count = as.numeric(count)) %>%
rename(temp_degC = bin)
View(temp_histo_vert)
#transform and rename
temp_histo_vert <- temp_histo %>%
pivot_longer(names_to = 'landsat_index',
values_to = 'count',
cols = c(LT05_L1TP_013030_19840610_20200918_02_T1:LE07_L1TP_013030_20201011_20201107_02_T1)) %>%
mutate(date = substrRight(landsat_index, 14),
date = as.Date(date, format = '%Y%m%d'),
bin = as.numeric(bin),
count = as.numeric(count)) %>%
rename(temp_degC = bin)
View(temp_histo_vert)
#total number of pixels in lake sunapee
sun_n_pixels <- 17165
image_pixels <- temp_histo %>%
group_by(date) %>%
summarise(tot_pix = sum(count)) %>%
mutate(perc_lake = round((tot_pix/sun_n_pixels)*100, digits = 2))
#transform and rename
temp_histo_vert <- temp_histo %>%
pivot_longer(names_to = 'landsat_index',
values_to = 'count',
cols = c(LT05_L1TP_013030_19840610_20200918_02_T1:LE07_L1TP_013030_20201011_20201107_02_T1)) %>%
mutate(date = substrRight(landsat_index, 14),
date = as.Date(date, format = '%Y%m%d'),
bin = as.numeric(bin),
count = as.numeric(count)) %>%
rename(temp_degC = bin)
#total number of pixels in lake sunapee
sun_n_pixels <- 17165
image_pixels <- temp_histo %>%
group_by(date) %>%
summarise(tot_pix = sum(count)) %>%
mutate(perc_lake = round((tot_pix/sun_n_pixels)*100, digits = 2))
image_pixels <- temp_histo_vert %>%
group_by(date) %>%
summarise(tot_pix = sum(count)) %>%
mutate(perc_lake = round((tot_pix/sun_n_pixels)*100, digits = 2))
View(temp_histo_vert)
View(image_pixels)
#transform and rename
temp_histo_vert <- temp_histo %>%
pivot_longer(names_to = 'landsat_index',
values_to = 'count',
cols = c(LT05_L1TP_013030_19840610_20200918_02_T1:LE07_L1TP_013030_20201011_20201107_02_T1)) %>%
mutate(date = substrRight(landsat_index, 23),
date = substr(date, 1, 8),
date = as.Date(date, format = '%Y%m%d'),
bin = as.numeric(bin),
count = as.numeric(count)) %>%
rename(temp_degC = bin)
#total number of pixels in lake sunapee
sun_n_pixels <- 17165
image_pixels <- temp_histo_vert %>%
group_by(date) %>%
summarise(tot_pix = sum(count)) %>%
mutate(perc_lake = round((tot_pix/sun_n_pixels)*100, digits = 2))
View(image_pixels)
write.csv(temp_histo_all, file.path(datadir, 'sunapee_histograms_0p1bin_reformatted.csv'))
write.csv(temp_histo_vert, file.path(datadir, 'sunapee_histograms_0p1bin_reformatted.csv'))
#make a list of all dates
datelist <- unique(temp_histo_vert$date)
date_modal <- as.data.frame(datelist) %>%
rename(date = datelist) %>%
mutate(unimodal = '')
#determine unimodality from density plot, if one derivative change, unimodal if more it's not.
for(j in 1:length(datelist)) {
temp_histo_date <- temp_histo_all %>%
filter(date == datelist[j])
temp_histo_date$diff <- NA_real_
temp_histo_date$simple_change <- ''
for(i in 2:nrow(temp_histo_date)){
temp_histo_date$diff[i] = temp_histo_date$count[i] - temp_histo_date$count[i-1]
}
if (nrow(temp_histo_date)>2) {
for(k in 2:nrow(temp_histo_date)){
temp_histo_date$simple_change[k] = case_when(temp_histo_date$diff[k] >0 & temp_histo_date$diff[k-1]< 0 ~ 'y',
temp_histo_date$diff[k] <0 & temp_histo_date$diff[k-1]> 0 ~ 'y',
TRUE~ NA_character_)
}
temp_histo_date <- temp_histo_date %>%
filter(abs(diff) > 0.01*sun_n_pixels) #difference has to be more than 1% of pixels for a meaningful multimodality
n_change <- nrow(temp_histo_date %>%
filter(simple_change == 'y'))
date_modal$unimodal[j] = case_when(n_change > 1 ~ 'not unimodal',
TRUE ~ 'unimodal')
} else{ # if there is no obvious maximum, then insert 'unk'
date_modal$unimodal[j] = 'unk'
}
}
#determine unimodality from density plot, if one derivative change, unimodal if more it's not.
for(j in 1:length(datelist)) {
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j])
temp_histo_date$diff <- NA_real_
temp_histo_date$simple_change <- ''
for(i in 2:nrow(temp_histo_date)){
temp_histo_date$diff[i] = temp_histo_date$count[i] - temp_histo_date$count[i-1]
}
if (nrow(temp_histo_date)>2) {
for(k in 2:nrow(temp_histo_date)){
temp_histo_date$simple_change[k] = case_when(temp_histo_date$diff[k] >0 & temp_histo_date$diff[k-1]< 0 ~ 'y',
temp_histo_date$diff[k] <0 & temp_histo_date$diff[k-1]> 0 ~ 'y',
TRUE~ NA_character_)
}
temp_histo_date <- temp_histo_date %>%
filter(abs(diff) > 0.01*sun_n_pixels) #difference has to be more than 1% of pixels for a meaningful multimodality
n_change <- nrow(temp_histo_date %>%
filter(simple_change == 'y'))
date_modal$unimodal[j] = case_when(n_change > 1 ~ 'not unimodal',
TRUE ~ 'unimodal')
} else{ # if there is no obvious maximum, then insert 'unk'
date_modal$unimodal[j] = 'unk'
}
}
View(date_modal)
#remove 0 count of histograms for for-loop to work
temp_histo_vert <- temp_histo_vert %>%
filter(count > 0)
#determine unimodality from density plot, if one derivative change, unimodal if more it's not.
for(j in 1:length(datelist)) {
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j])
temp_histo_date$diff <- NA_real_
temp_histo_date$simple_change <- ''
for(i in 2:nrow(temp_histo_date)){
temp_histo_date$diff[i] = temp_histo_date$count[i] - temp_histo_date$count[i-1]
}
if (nrow(temp_histo_date)>2) {
for(k in 2:nrow(temp_histo_date)){
temp_histo_date$simple_change[k] = case_when(temp_histo_date$diff[k] >0 & temp_histo_date$diff[k-1]< 0 ~ 'y',
temp_histo_date$diff[k] <0 & temp_histo_date$diff[k-1]> 0 ~ 'y',
TRUE~ NA_character_)
}
temp_histo_date <- temp_histo_date %>%
filter(abs(diff) > 0.01*sun_n_pixels) #difference has to be more than 1% of pixels for a meaningful multimodality
n_change <- nrow(temp_histo_date %>%
filter(simple_change == 'y'))
date_modal$unimodal[j] = case_when(n_change > 1 ~ 'not unimodal',
TRUE ~ 'unimodal')
} else{ # if there is no obvious maximum, then insert 'unk'
date_modal$unimodal[j] = 'unk'
}
}
#make a list of all dates
datelist <- unique(temp_histo_vert$date)
date_modal <- as.data.frame(datelist) %>%
rename(date = datelist) %>%
mutate(unimodal = '')
#remove 0 count of histograms for for-loop to work
temp_histo_vert <- temp_histo_vert %>%
filter(count > 0)
#determine unimodality from density plot, if one derivative change, unimodal if more it's not.
for(j in 1:length(datelist)) {
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j])
temp_histo_date$diff <- NA_real_
temp_histo_date$simple_change <- ''
for(i in 2:nrow(temp_histo_date)){
temp_histo_date$diff[i] = temp_histo_date$count[i] - temp_histo_date$count[i-1]
}
if (nrow(temp_histo_date)>2) {
for(k in 2:nrow(temp_histo_date)){
temp_histo_date$simple_change[k] = case_when(temp_histo_date$diff[k] >0 & temp_histo_date$diff[k-1]< 0 ~ 'y',
temp_histo_date$diff[k] <0 & temp_histo_date$diff[k-1]> 0 ~ 'y',
TRUE~ NA_character_)
}
temp_histo_date <- temp_histo_date %>%
filter(abs(diff) > 0.01*sun_n_pixels) #difference has to be more than 1% of pixels for a meaningful multimodality
n_change <- nrow(temp_histo_date %>%
filter(simple_change == 'y'))
date_modal$unimodal[j] = case_when(n_change > 1 ~ 'not unimodal',
TRUE ~ 'unimodal')
} else{ # if there is no obvious maximum, then insert 'unk'
date_modal$unimodal[j] = 'unk'
}
}
View(date_modal)
date_modal <- as.data.frame(datelist) %>%
rename(date = datelist) %>%
mutate(unimodal = '')
#determine unimodality from density plot, if one derivative change, unimodal if more it's not.
for(j in 1:length(datelist)) {
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j])
temp_histo_date$diff <- NA_real_
temp_histo_date$simple_change <- ''
for(i in 2:nrow(temp_histo_date)){
temp_histo_date$diff[i] = temp_histo_date$count[i] - temp_histo_date$count[i-1]
}
if (nrow(temp_histo_date)>2) {
for(k in 2:nrow(temp_histo_date)){
temp_histo_date$simple_change[k] = case_when(temp_histo_date$diff[k] >0 & temp_histo_date$diff[k-1]< 0 ~ 'y',
temp_histo_date$diff[k] <0 & temp_histo_date$diff[k-1]> 0 ~ 'y',
TRUE~ NA_character_)
}
temp_histo_date <- temp_histo_date %>%
filter(abs(diff) > 0.05*sun_n_pixels) #difference has to be more than 5% of pixels for a meaningful multimodality
n_change <- nrow(temp_histo_date %>%
filter(simple_change == 'y'))
date_modal$unimodal[j] = case_when(n_change > 1 ~ 'not unimodal',
TRUE ~ 'unimodal')
} else{ # if there is no obvious maximum, then insert 'unk'
date_modal$unimodal[j] = 'unk'
}
}
unimodal <- date_modal %>%
filter(unimodal == 'unimodal')
date_modal <- as.data.frame(datelist) %>%
rename(date = datelist) %>%
mutate(unimodal = '')
#determine unimodality from density plot, if one derivative change, unimodal if more it's not.
for(j in 1:length(datelist)) {
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j])
temp_histo_date$diff <- NA_real_
temp_histo_date$simple_change <- ''
for(i in 2:nrow(temp_histo_date)){
temp_histo_date$diff[i] = temp_histo_date$count[i] - temp_histo_date$count[i-1]
}
if (nrow(temp_histo_date)>2) {
for(k in 2:nrow(temp_histo_date)){
temp_histo_date$simple_change[k] = case_when(temp_histo_date$diff[k] >0 & temp_histo_date$diff[k-1]< 0 ~ 'y',
temp_histo_date$diff[k] <0 & temp_histo_date$diff[k-1]> 0 ~ 'y',
TRUE~ NA_character_)
}
temp_histo_date <- temp_histo_date %>%
filter(abs(diff) > 0.10*sun_n_pixels) #difference has to be more than 5% of pixels for a meaningful multimodality
n_change <- nrow(temp_histo_date %>%
filter(simple_change == 'y'))
date_modal$unimodal[j] = case_when(n_change > 1 ~ 'not unimodal',
TRUE ~ 'unimodal')
} else{ # if there is no obvious maximum, then insert 'unk'
date_modal$unimodal[j] = 'unk'
}
}
unimodal <- date_modal %>%
filter(unimodal == 'unimodal')
View(unimodal)
View(date_modal)
j = 1
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j])
View(temp_histo_date)
temp_histo_date %>%
arrange(-count) %>%
select(1:5)
temp_histo_date %>%
arrange(-count) %>%
select([1]:[5])
temp_histo_date %>%
arrange(-count) %>%
select([,1]:[,5])
temp_histo_date %>%
arrange(-count)
max_count = max(temp_histo_date$count)
temp_histo_date %>%
filter(count > 0.9*max_count)
temp_histo_date %>%
filter(count > max_count-0.1*sun_n_pixels)
temp_histo_date %>%
filter(count > max_count-0.05*sun_n_pixels)
0.05*sun_n_pixels
temp_histo_date %>%
filter(count > 0.75*max_count)
j = 12
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j])
max_count = max(temp_histo_date$count)
temp_histo_date %>%
filter(count > 0.75*max_count)
temp_histo_date %>%
filter(count > 0.50*max_count)
max_count = first(temp_histo_date$temp_degC)
mean_temp = mean(temp_histo_date$temp_degC)
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j]) %>%
arrange(-count)
max_count_temp = first(temp_histo_date$temp_degC)
mean_temp = mean(temp_histo_date$temp_degC)
temp_range = range(temp_histo_date$temp_degC)
temp_range = spread(temp_histo_date$temp_degC)
temp_range = abs(temp_range(temp_histo_date$temp_degC))
temp_range = max(temp_histo_date$temp_degC)-min(temp_histo_date$temp_degC)
date_range_acceptable = (max(temp_histo_date$temp_degC)-min(temp_histo_date$temp_degC))*0.1
mode_temp = mode(temp_histo_date$temp_degC)
mode_mean_diff = abs(mode_temp - mean_temp)
mode_temp = first(temp_histo_date$temp_degC)
mean_temp = mean(temp_histo_date$temp_degC)
date_range_acceptable = (max(temp_histo_date$temp_degC)-min(temp_histo_date$temp_degC))*0.1
mode_mean_diff = abs(mode_temp - mean_temp)
for(j in 1: length(datelist)) {
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j]) %>%
arrange(-count)
mode_temp = first(temp_histo_date$temp_degC)
mean_temp = mean(temp_histo_date$temp_degC)
range_acceptable = (max(temp_histo_date$temp_degC)-min(temp_histo_date$temp_degC))*0.1
mode_mean_diff = abs(mode_temp - mean_temp)
if (mode_mean_diff < range_acceptable) {
date_modal$unimodal[j] = 'unimodal'
} else {
date_modal$unimodal[j] = 'not unimodal'
}
}
unimodal <- date_modal %>%
filter(unimodal == 'unimodal')
View(unimodal)
for(j in 1: length(datelist)) {
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j]) %>%
arrange(-count)
mode_temp = first(temp_histo_date$temp_degC)
mean_temp = mean(temp_histo_date$temp_degC)
range_acceptable = (max(temp_histo_date$temp_degC)-min(temp_histo_date$temp_degC))*0.2
mode_mean_diff = abs(mode_temp - mean_temp)
if (mode_mean_diff < range_acceptable) {
date_modal$unimodal[j] = 'unimodal'
} else {
date_modal$unimodal[j] = 'not unimodal'
}
}
unimodal <- date_modal %>%
filter(unimodal == 'unimodal')
range_acceptable = (max(temp_histo_date$temp_degC)-min(temp_histo_date$temp_degC))*0.5
mode_mean_diff = abs(mode_temp - mean_temp)
for(j in 1: length(datelist)) {
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j]) %>%
arrange(-count)
mode_temp = first(temp_histo_date$temp_degC)
mean_temp = mean(temp_histo_date$temp_degC)
range_acceptable = (max(temp_histo_date$temp_degC)-min(temp_histo_date$temp_degC))*0.5
mode_mean_diff = abs(mode_temp - mean_temp)
if (mode_mean_diff < range_acceptable) {
date_modal$unimodal[j] = 'unimodal'
} else {
date_modal$unimodal[j] = 'not unimodal'
}
}
unimodal <- date_modal %>%
filter(unimodal == 'unimodal')
for(j in 1: length(datelist)) {
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j]) %>%
arrange(-count)
mode_temp = first(temp_histo_date$temp_degC)
mean_temp = mean(temp_histo_date$temp_degC)
range_acceptable = (max(temp_histo_date$temp_degC)-min(temp_histo_date$temp_degC))*0.25
mode_mean_diff = abs(mode_temp - mean_temp)
if (mode_mean_diff < range_acceptable) {
date_modal$unimodal[j] = 'unimodal'
} else {
date_modal$unimodal[j] = 'not unimodal'
}
}
unimodal <- date_modal %>%
filter(unimodal == 'unimodal')
View(date_modal)
for(j in 1: length(datelist)) {
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j]) %>%
arrange(-count)
mode_temp = first(temp_histo_date$temp_degC)
median_temp = medain(temp_histo_date$temp_degC)
range_acceptable = (max(temp_histo_date$temp_degC)-min(temp_histo_date$temp_degC))*0.1
mode_mean_diff = abs(mode_temp - median_temp)
if (mode_mean_diff < range_acceptable) {
date_modal$unimodal[j] = 'unimodal'
} else {
date_modal$unimodal[j] = 'not unimodal'
}
}
unimodal <- date_modal %>%
filter(unimodal == 'unimodal')
for(j in 1: length(datelist)) {
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j]) %>%
arrange(-count)
mode_temp = first(temp_histo_date$temp_degC)
median_temp = median(temp_histo_date$temp_degC)
range_acceptable = (max(temp_histo_date$temp_degC)-min(temp_histo_date$temp_degC))*0.1
mode_mean_diff = abs(mode_temp - median_temp)
if (mode_mean_diff < range_acceptable) {
date_modal$unimodal[j] = 'unimodal'
} else {
date_modal$unimodal[j] = 'not unimodal'
}
}
unimodal <- date_modal %>%
filter(unimodal == 'unimodal')
View(unimodal)
for(j in 1: length(datelist)) {
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j]) %>%
arrange(-count)
mode_temp = first(temp_histo_date$temp_degC)
median_temp = median(temp_histo_date$temp_degC)
range_acceptable = (max(temp_histo_date$temp_degC)-min(temp_histo_date$temp_degC))*0.25
mode_mean_diff = abs(mode_temp - median_temp)
if (mode_mean_diff < range_acceptable) {
date_modal$unimodal[j] = 'unimodal'
} else {
date_modal$unimodal[j] = 'not unimodal'
}
}
unimodal <- date_modal %>%
filter(unimodal == 'unimodal')
for(j in 1: length(datelist)) {
temp_histo_date <- temp_histo_vert %>%
filter(date == datelist[j]) %>%
arrange(-count)
mode_temp = first(temp_histo_date$temp_degC)
median_temp = median(temp_histo_date$temp_degC)
range_acceptable = (max(temp_histo_date$temp_degC)-min(temp_histo_date$temp_degC))*0.15
mode_med_diff = abs(mode_temp - median_temp)
if (mode_med_diff < range_acceptable) {
date_modal$unimodal[j] = 'unimodal'
} else {
date_modal$unimodal[j] = 'not unimodal'
}
}
unimodal <- date_modal %>%
filter(unimodal == 'unimodal')
modal_dataset <- full_join(date_modal, image_pixels)
histo_unique_data <- full_join(temp_histo_all, image_pixels) %>%
full_join(., date_modal)
#set up pdf device
pdf(file.path(datadir, 'histograms.pdf'),width=11,height=8.5)
histo_unique_data <- full_join(temp_histo_vert, image_pixels) %>%
full_join(., date_modal)
#print PDF of histograms
for(i in 1:length(datelist)){
a <- histo_unique_data %>%
filter(date == datelist[i])
hist <- ggplot(a, aes(x = temp_degC, y = count)) +
geom_col(width = 0.4) +
final_theme +
labs(title = paste0(datelist[i]),
x = 'LS-derived skin temperature (deg C)',
y = 'count') +
annotate('text', label = paste0(a$perc_lake[1], ' percent of lake in LS scene'), x = min(a$temp_degC), y = max(a$count), hjust = 0)+
annotate('text', label = paste0(a$unimodal[1]), x = min(a$temp_degC), y = max(a$count)*.9, hjust = 0)
print(hist)
}
#Close pdf graphics device
dev.off()
