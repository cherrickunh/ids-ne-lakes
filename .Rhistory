# Convert Missing Values to NA for non-dates
gloeo_temp$temp_degC <- ifelse((trimws(as.character(gloeo_temp$temp_degC))==trimws("NA")),NA,gloeo_temp$temp_degC)
suppressWarnings(gloeo_temp$temp_degC <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(gloeo_temp$temp_degC))==as.character(as.numeric("NA"))),NA,gloeo_temp$temp_degC))
# Here is the structure of the input data frame:
str(gloeo_temp)
attach(gloeo_temp)
# The analyses below are basic descriptions of the variables. After testing, they should be replaced.
summary(year)
summary(dayofyr)
summary(time)
summary(datetime)
summary(site)
summary(temp_degC)
# Get more details on character variables
summary(as.factor(gloeo_temp$site))
detach(gloeo_temp)
# Package ID: edi.395.1 Cataloging System:https://pasta.edirepository.org.
# Data set title: Underwater temperature and light data from 3 mini-buoys in Lake Sunapee, NH, USA from June â October 2018.
# Data set creator:  Nicole Ward - Virginia Tech
# Data set creator:  Jennifer Brentrup - Dartmouth College
# Data set creator:  Ava Johnson - Virginia Tech
# Data set creator:  Cayelan Carey - Virginia Tech
# Data set creator:  Kathleen Weathers - Cary Institute of Ecosystem Studies
# Data set creator:  June Fichter - Lake Sunapee Protective Association
# Contact:  Nicole Ward -  Virginia Tech  - nkward@vt.edu
# Stylesheet v2.11 for metadata conversion into program: John H. Porter, Univ. Virginia, jporter@virginia.edu
inUrl1  <- "https://pasta.lternet.edu/package/data/eml/edi/395/1/38d468508e524aac464947d422c63365"
infile1 <- tempfile(tmpdir = temp_dumpdir)
try(download.file(inUrl1,infile1,method="curl"))
if (is.na(file.size(infile1))) download.file(inUrl1,infile1,method="auto")
dt1 <-read.csv(infile1,header=F
,skip=1
,sep=","
, col.names=c(
"dateTime",
"light",
"Depth",
"SerialNum"    ), check.names=TRUE)
unlink(infile1)
# Fix any interval or ratio columns mistakenly read in as nominal and nominal columns read as numeric or dates read as strings
# attempting to convert dt1$dateTime dateTime string to R date structure (date or POSIXct)
tmpDateFormat<-"%Y-%m-%d %H:%M:%S"
tmp1dateTime<-as.POSIXct(dt1$dateTime,format=tmpDateFormat)
# Keep the new dates only if they all converted correctly
if(length(tmp1dateTime) == length(tmp1dateTime[!is.na(tmp1dateTime)])){dt1$dateTime <- tmp1dateTime } else {print("Date conversion failed for dt1$dateTime. Please inspect the data and do the date conversion yourself.")}
rm(tmpDateFormat,tmp1dateTime)
if (class(dt1$light)=="factor") dt1$light <-as.numeric(levels(dt1$light))[as.integer(dt1$light) ]
if (class(dt1$light)=="character") dt1$light <-as.numeric(dt1$light)
if (class(dt1$Depth)=="factor") dt1$Depth <-as.numeric(levels(dt1$Depth))[as.integer(dt1$Depth) ]
if (class(dt1$Depth)=="character") dt1$Depth <-as.numeric(dt1$Depth)
if (class(dt1$SerialNum)=="factor") dt1$SerialNum <-as.numeric(levels(dt1$SerialNum))[as.integer(dt1$SerialNum) ]
if (class(dt1$SerialNum)=="character") dt1$SerialNum <-as.numeric(dt1$SerialNum)
# Convert Missing Values to NA for non-dates
dt1$light <- ifelse((trimws(as.character(dt1$light))==trimws("NA")),NA,dt1$light)
suppressWarnings(dt1$light <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt1$light))==as.character(as.numeric("NA"))),NA,dt1$light))
# Here is the structure of the input data frame:
str(dt1)
attach(dt1)
# The analyses below are basic descriptions of the variables. After testing, they should be replaced.
summary(dateTime)
summary(light)
summary(Depth)
summary(SerialNum)
# Get more details on character variables
detach(dt1)
inUrl2  <- "https://pasta.lternet.edu/package/data/eml/edi/395/1/282a7528aadb842cbbd77fd64a52907f"
infile2 <- tempfile(tmpdir = temp_dumpdir)
try(download.file(inUrl2,infile2,method="curl"))
if (is.na(file.size(infile2))) download.file(inUrl2,infile2,method="auto")
dt2 <-read.csv(infile2,header=F
,skip=1
,sep=","
, col.names=c(
"dateTime",
"temp",
"Depth",
"SerialNum"    ), check.names=TRUE)
unlink(infile2)
# Fix any interval or ratio columns mistakenly read in as nominal and nominal columns read as numeric or dates read as strings
# attempting to convert dt2$dateTime dateTime string to R date structure (date or POSIXct)
tmpDateFormat<-"%Y-%m-%d %H:%M:%S"
tmp2dateTime<-as.POSIXct(dt2$dateTime,format=tmpDateFormat)
# Keep the new dates only if they all converted correctly
if(length(tmp2dateTime) == length(tmp2dateTime[!is.na(tmp2dateTime)])){dt2$dateTime <- tmp2dateTime } else {print("Date conversion failed for dt2$dateTime. Please inspect the data and do the date conversion yourself.")}
rm(tmpDateFormat,tmp2dateTime)
if (class(dt2$temp)=="factor") dt2$temp <-as.numeric(levels(dt2$temp))[as.integer(dt2$temp) ]
if (class(dt2$temp)=="character") dt2$temp <-as.numeric(dt2$temp)
if (class(dt2$Depth)=="factor") dt2$Depth <-as.numeric(levels(dt2$Depth))[as.integer(dt2$Depth) ]
if (class(dt2$Depth)=="character") dt2$Depth <-as.numeric(dt2$Depth)
if (class(dt2$SerialNum)=="factor") dt2$SerialNum <-as.numeric(levels(dt2$SerialNum))[as.integer(dt2$SerialNum) ]
if (class(dt2$SerialNum)=="character") dt2$SerialNum <-as.numeric(dt2$SerialNum)
# Convert Missing Values to NA for non-dates
dt2$temp <- ifelse((trimws(as.character(dt2$temp))==trimws("NA")),NA,dt2$temp)
suppressWarnings(dt2$temp <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$temp))==as.character(as.numeric("NA"))),NA,dt2$temp))
# Here is the structure of the input data frame:
str(dt2)
attach(dt2)
# The analyses below are basic descriptions of the variables. After testing, they should be replaced.
summary(dateTime)
summary(temp)
summary(Depth)
summary(SerialNum)
# Get more details on character variables
detach(dt2)
inUrl3  <- "https://pasta.lternet.edu/package/data/eml/edi/395/1/70d2fa66231822258c3f9a3ba98829b6"
infile3 <- tempfile(tmpdir = temp_dumpdir)
try(download.file(inUrl3,infile3,method="curl"))
if (is.na(file.size(infile3))) download.file(inUrl3,infile3,method="auto")
dt3 <-read.csv(infile3,header=F
,skip=1
,sep=","
, col.names=c(
"dateTime",
"light",
"Depth",
"SerialNum"    ), check.names=TRUE)
unlink(infile3)
# Fix any interval or ratio columns mistakenly read in as nominal and nominal columns read as numeric or dates read as strings
# attempting to convert dt3$dateTime dateTime string to R date structure (date or POSIXct)
tmpDateFormat<-"%Y-%m-%d %H:%M:%S"
tmp3dateTime<-as.POSIXct(dt3$dateTime,format=tmpDateFormat)
# Keep the new dates only if they all converted correctly
if(length(tmp3dateTime) == length(tmp3dateTime[!is.na(tmp3dateTime)])){dt3$dateTime <- tmp3dateTime } else {print("Date conversion failed for dt3$dateTime. Please inspect the data and do the date conversion yourself.")}
rm(tmpDateFormat,tmp3dateTime)
if (class(dt3$light)=="factor") dt3$light <-as.numeric(levels(dt3$light))[as.integer(dt3$light) ]
if (class(dt3$light)=="character") dt3$light <-as.numeric(dt3$light)
if (class(dt3$Depth)=="factor") dt3$Depth <-as.numeric(levels(dt3$Depth))[as.integer(dt3$Depth) ]
if (class(dt3$Depth)=="character") dt3$Depth <-as.numeric(dt3$Depth)
if (class(dt3$SerialNum)=="factor") dt3$SerialNum <-as.numeric(levels(dt3$SerialNum))[as.integer(dt3$SerialNum) ]
if (class(dt3$SerialNum)=="character") dt3$SerialNum <-as.numeric(dt3$SerialNum)
# Convert Missing Values to NA for non-dates
dt3$light <- ifelse((trimws(as.character(dt3$light))==trimws("NA")),NA,dt3$light)
suppressWarnings(dt3$light <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$light))==as.character(as.numeric("NA"))),NA,dt3$light))
# Here is the structure of the input data frame:
str(dt3)
attach(dt3)
# The analyses below are basic descriptions of the variables. After testing, they should be replaced.
summary(dateTime)
summary(light)
summary(Depth)
summary(SerialNum)
# Get more details on character variables
detach(dt3)
inUrl4  <- "https://pasta.lternet.edu/package/data/eml/edi/395/1/14026c2023135291fb66f028de57c269"
infile4 <- tempfile(tmpdir = temp_dumpdir)
try(download.file(inUrl4,infile4,method="curl"))
if (is.na(file.size(infile4))) download.file(inUrl4,infile4,method="auto")
dt4 <-read.csv(infile4,header=F
,skip=1
,sep=","
, col.names=c(
"dateTime",
"temp",
"Depth",
"SerialNum"    ), check.names=TRUE)
unlink(infile4)
# Fix any interval or ratio columns mistakenly read in as nominal and nominal columns read as numeric or dates read as strings
# attempting to convert dt4$dateTime dateTime string to R date structure (date or POSIXct)
tmpDateFormat<-"%Y-%m-%d %H:%M:%S"
tmp4dateTime<-as.POSIXct(dt4$dateTime,format=tmpDateFormat)
# Keep the new dates only if they all converted correctly
if(length(tmp4dateTime) == length(tmp4dateTime[!is.na(tmp4dateTime)])){dt4$dateTime <- tmp4dateTime } else {print("Date conversion failed for dt4$dateTime. Please inspect the data and do the date conversion yourself.")}
rm(tmpDateFormat,tmp4dateTime)
if (class(dt4$temp)=="factor") dt4$temp <-as.numeric(levels(dt4$temp))[as.integer(dt4$temp) ]
if (class(dt4$temp)=="character") dt4$temp <-as.numeric(dt4$temp)
if (class(dt4$Depth)=="factor") dt4$Depth <-as.numeric(levels(dt4$Depth))[as.integer(dt4$Depth) ]
if (class(dt4$Depth)=="character") dt4$Depth <-as.numeric(dt4$Depth)
if (class(dt4$SerialNum)=="factor") dt4$SerialNum <-as.numeric(levels(dt4$SerialNum))[as.integer(dt4$SerialNum) ]
if (class(dt4$SerialNum)=="character") dt4$SerialNum <-as.numeric(dt4$SerialNum)
# Convert Missing Values to NA for non-dates
dt4$temp <- ifelse((trimws(as.character(dt4$temp))==trimws("NA")),NA,dt4$temp)
suppressWarnings(dt4$temp <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt4$temp))==as.character(as.numeric("NA"))),NA,dt4$temp))
# Here is the structure of the input data frame:
str(dt4)
attach(dt4)
# The analyses below are basic descriptions of the variables. After testing, they should be replaced.
summary(dateTime)
summary(temp)
summary(Depth)
summary(SerialNum)
# Get more details on character variables
detach(dt4)
inUrl5  <- "https://pasta.lternet.edu/package/data/eml/edi/395/1/19259608b0773cbd9926e06fd896a3a9"
infile5 <- tempfile(tmpdir = temp_dumpdir)
try(download.file(inUrl5,infile5,method="curl"))
if (is.na(file.size(infile5))) download.file(inUrl5,infile5,method="auto")
dt5 <-read.csv(infile5,header=F
,skip=1
,sep=","
, col.names=c(
"dateTime",
"light",
"Depth",
"SerialNum"    ), check.names=TRUE)
unlink(infile5)
# Fix any interval or ratio columns mistakenly read in as nominal and nominal columns read as numeric or dates read as strings
# attempting to convert dt5$dateTime dateTime string to R date structure (date or POSIXct)
tmpDateFormat<-"%Y-%m-%d %H:%M:%S"
tmp5dateTime<-as.POSIXct(dt5$dateTime,format=tmpDateFormat)
# Keep the new dates only if they all converted correctly
if(length(tmp5dateTime) == length(tmp5dateTime[!is.na(tmp5dateTime)])){dt5$dateTime <- tmp5dateTime } else {print("Date conversion failed for dt5$dateTime. Please inspect the data and do the date conversion yourself.")}
rm(tmpDateFormat,tmp5dateTime)
if (class(dt5$light)=="factor") dt5$light <-as.numeric(levels(dt5$light))[as.integer(dt5$light) ]
if (class(dt5$light)=="character") dt5$light <-as.numeric(dt5$light)
if (class(dt5$Depth)=="factor") dt5$Depth <-as.numeric(levels(dt5$Depth))[as.integer(dt5$Depth) ]
if (class(dt5$Depth)=="character") dt5$Depth <-as.numeric(dt5$Depth)
if (class(dt5$SerialNum)=="factor") dt5$SerialNum <-as.numeric(levels(dt5$SerialNum))[as.integer(dt5$SerialNum) ]
if (class(dt5$SerialNum)=="character") dt5$SerialNum <-as.numeric(dt5$SerialNum)
# Convert Missing Values to NA for non-dates
dt5$light <- ifelse((trimws(as.character(dt5$light))==trimws("NA")),NA,dt5$light)
suppressWarnings(dt5$light <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt5$light))==as.character(as.numeric("NA"))),NA,dt5$light))
# Here is the structure of the input data frame:
str(dt5)
attach(dt5)
# The analyses below are basic descriptions of the variables. After testing, they should be replaced.
summary(dateTime)
summary(light)
summary(Depth)
summary(SerialNum)
# Get more details on character variables
detach(dt5)
inUrl6  <- "https://pasta.lternet.edu/package/data/eml/edi/395/1/211956b6a28568e287f3789f5f97bc83"
infile6 <- tempfile(tmpdir = temp_dumpdir)
try(download.file(inUrl6,infile6,method="curl"))
if (is.na(file.size(infile6))) download.file(inUrl6,infile6,method="auto")
dt6 <-read.csv(infile6,header=F
,skip=1
,sep=","
, col.names=c(
"dateTime",
"temp",
"Depth",
"SerialNum"    ), check.names=TRUE)
unlink(infile6)
# Fix any interval or ratio columns mistakenly read in as nominal and nominal columns read as numeric or dates read as strings
# attempting to convert dt6$dateTime dateTime string to R date structure (date or POSIXct)
tmpDateFormat<-"%Y-%m-%d %H:%M:%S"
tmp6dateTime<-as.POSIXct(dt6$dateTime,format=tmpDateFormat)
# Keep the new dates only if they all converted correctly
if(length(tmp6dateTime) == length(tmp6dateTime[!is.na(tmp6dateTime)])){dt6$dateTime <- tmp6dateTime } else {print("Date conversion failed for dt6$dateTime. Please inspect the data and do the date conversion yourself.")}
rm(tmpDateFormat,tmp6dateTime)
if (class(dt6$temp)=="factor") dt6$temp <-as.numeric(levels(dt6$temp))[as.integer(dt6$temp) ]
if (class(dt6$temp)=="character") dt6$temp <-as.numeric(dt6$temp)
if (class(dt6$Depth)=="factor") dt6$Depth <-as.numeric(levels(dt6$Depth))[as.integer(dt6$Depth) ]
if (class(dt6$Depth)=="character") dt6$Depth <-as.numeric(dt6$Depth)
if (class(dt6$SerialNum)=="factor") dt6$SerialNum <-as.numeric(levels(dt6$SerialNum))[as.integer(dt6$SerialNum) ]
if (class(dt6$SerialNum)=="character") dt6$SerialNum <-as.numeric(dt6$SerialNum)
# Convert Missing Values to NA for non-dates
dt6$temp <- ifelse((trimws(as.character(dt6$temp))==trimws("NA")),NA,dt6$temp)
suppressWarnings(dt6$temp <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt6$temp))==as.character(as.numeric("NA"))),NA,dt6$temp))
# Here is the structure of the input data frame:
str(dt6)
attach(dt6)
# The analyses below are basic descriptions of the variables. After testing, they should be replaced.
summary(dateTime)
summary(temp)
summary(Depth)
summary(SerialNum)
# Get more details on character variables
detach(dt6)
View(dt1)
View(dt2)
View(dt3)
View(dt4)
View(dt5)
View(dt6)
rm(dt1, dt2, dt3,dt4,dt5,dt6)
# Package ID: edi.395.1 Cataloging System:https://pasta.edirepository.org.
# Data set title: Underwater temperature and light data from 3 mini-buoys in Lake Sunapee, NH, USA from June â October 2018.
# Data set creator:  Nicole Ward - Virginia Tech
# Data set creator:  Jennifer Brentrup - Dartmouth College
# Data set creator:  Ava Johnson - Virginia Tech
# Data set creator:  Cayelan Carey - Virginia Tech
# Data set creator:  Kathleen Weathers - Cary Institute of Ecosystem Studies
# Data set creator:  June Fichter - Lake Sunapee Protective Association
# Contact:  Nicole Ward -  Virginia Tech  - nkward@vt.edu
# Stylesheet v2.11 for metadata conversion into program: John H. Porter, Univ. Virginia, jporter@virginia.edu
inUrl1  <- "https://pasta.lternet.edu/package/data/eml/edi/395/1/38d468508e524aac464947d422c63365"
infile1 <- tempfile(tmpdir = temp_dumpdir)
try(download.file(inUrl1,infile1,method="curl"))
if (is.na(file.size(infile1))) download.file(inUrl1,infile1,method="auto")
gm_light <-read.csv(infile1,header=F
,skip=1
,sep=","
, col.names=c(
"dateTime",
"light",
"Depth",
"SerialNum"    ), check.names=TRUE)
unlink(infile1)
# Fix any interval or ratio columns mistakenly read in as nominal and nominal columns read as numeric or dates read as strings
# attempting to convert gm_light$dateTime dateTime string to R date structure (date or POSIXct)
tmpDateFormat<-"%Y-%m-%d %H:%M:%S"
tmp1dateTime<-as.POSIXct(gm_light$dateTime,format=tmpDateFormat)
# Keep the new dates only if they all converted correctly
if(length(tmp1dateTime) == length(tmp1dateTime[!is.na(tmp1dateTime)])){gm_light$dateTime <- tmp1dateTime } else {print("Date conversion failed for gm_light$dateTime. Please inspect the data and do the date conversion yourself.")}
rm(tmpDateFormat,tmp1dateTime)
if (class(gm_light$light)=="factor") gm_light$light <-as.numeric(levels(gm_light$light))[as.integer(gm_light$light) ]
if (class(gm_light$light)=="character") gm_light$light <-as.numeric(gm_light$light)
if (class(gm_light$Depth)=="factor") gm_light$Depth <-as.numeric(levels(gm_light$Depth))[as.integer(gm_light$Depth) ]
if (class(gm_light$Depth)=="character") gm_light$Depth <-as.numeric(gm_light$Depth)
if (class(gm_light$SerialNum)=="factor") gm_light$SerialNum <-as.numeric(levels(gm_light$SerialNum))[as.integer(gm_light$SerialNum) ]
if (class(gm_light$SerialNum)=="character") gm_light$SerialNum <-as.numeric(gm_light$SerialNum)
# Convert Missing Values to NA for non-dates
gm_light$light <- ifelse((trimws(as.character(gm_light$light))==trimws("NA")),NA,gm_light$light)
suppressWarnings(gm_light$light <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(gm_light$light))==as.character(as.numeric("NA"))),NA,gm_light$light))
# Here is the structure of the input data frame:
str(gm_light)
attach(gm_light)
# The analyses below are basic descriptions of the variables. After testing, they should be replaced.
summary(dateTime)
summary(light)
summary(Depth)
summary(SerialNum)
# Get more details on character variables
detach(gm_light)
inUrl2  <- "https://pasta.lternet.edu/package/data/eml/edi/395/1/282a7528aadb842cbbd77fd64a52907f"
infile2 <- tempfile(tmpdir = temp_dumpdir)
try(download.file(inUrl2,infile2,method="curl"))
if (is.na(file.size(infile2))) download.file(inUrl2,infile2,method="auto")
gm_temp <-read.csv(infile2,header=F
,skip=1
,sep=","
, col.names=c(
"dateTime",
"temp",
"Depth",
"SerialNum"    ), check.names=TRUE)
unlink(infile2)
# Fix any interval or ratio columns mistakenly read in as nominal and nominal columns read as numeric or dates read as strings
# attempting to convert gm_temp$dateTime dateTime string to R date structure (date or POSIXct)
tmpDateFormat<-"%Y-%m-%d %H:%M:%S"
tmp2dateTime<-as.POSIXct(gm_temp$dateTime,format=tmpDateFormat)
# Keep the new dates only if they all converted correctly
if(length(tmp2dateTime) == length(tmp2dateTime[!is.na(tmp2dateTime)])){gm_temp$dateTime <- tmp2dateTime } else {print("Date conversion failed for gm_temp$dateTime. Please inspect the data and do the date conversion yourself.")}
rm(tmpDateFormat,tmp2dateTime)
if (class(gm_temp$temp)=="factor") gm_temp$temp <-as.numeric(levels(gm_temp$temp))[as.integer(gm_temp$temp) ]
if (class(gm_temp$temp)=="character") gm_temp$temp <-as.numeric(gm_temp$temp)
if (class(gm_temp$Depth)=="factor") gm_temp$Depth <-as.numeric(levels(gm_temp$Depth))[as.integer(gm_temp$Depth) ]
if (class(gm_temp$Depth)=="character") gm_temp$Depth <-as.numeric(gm_temp$Depth)
if (class(gm_temp$SerialNum)=="factor") gm_temp$SerialNum <-as.numeric(levels(gm_temp$SerialNum))[as.integer(gm_temp$SerialNum) ]
if (class(gm_temp$SerialNum)=="character") gm_temp$SerialNum <-as.numeric(gm_temp$SerialNum)
# Convert Missing Values to NA for non-dates
gm_temp$temp <- ifelse((trimws(as.character(gm_temp$temp))==trimws("NA")),NA,gm_temp$temp)
suppressWarnings(gm_temp$temp <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(gm_temp$temp))==as.character(as.numeric("NA"))),NA,gm_temp$temp))
# Here is the structure of the input data frame:
str(gm_temp)
attach(gm_temp)
# The analyses below are basic descriptions of the variables. After testing, they should be replaced.
summary(dateTime)
summary(temp)
summary(Depth)
summary(SerialNum)
# Get more details on character variables
detach(gm_temp)
inUrl3  <- "https://pasta.lternet.edu/package/data/eml/edi/395/1/70d2fa66231822258c3f9a3ba98829b6"
infile3 <- tempfile(tmpdir = temp_dumpdir)
try(download.file(inUrl3,infile3,method="curl"))
if (is.na(file.size(infile3))) download.file(inUrl3,infile3,method="auto")
hc_light <-read.csv(infile3,header=F
,skip=1
,sep=","
, col.names=c(
"dateTime",
"light",
"Depth",
"SerialNum"    ), check.names=TRUE)
unlink(infile3)
# Fix any interval or ratio columns mistakenly read in as nominal and nominal columns read as numeric or dates read as strings
# attempting to convert hc_light$dateTime dateTime string to R date structure (date or POSIXct)
tmpDateFormat<-"%Y-%m-%d %H:%M:%S"
tmp3dateTime<-as.POSIXct(hc_light$dateTime,format=tmpDateFormat)
# Keep the new dates only if they all converted correctly
if(length(tmp3dateTime) == length(tmp3dateTime[!is.na(tmp3dateTime)])){hc_light$dateTime <- tmp3dateTime } else {print("Date conversion failed for hc_light$dateTime. Please inspect the data and do the date conversion yourself.")}
rm(tmpDateFormat,tmp3dateTime)
if (class(hc_light$light)=="factor") hc_light$light <-as.numeric(levels(hc_light$light))[as.integer(hc_light$light) ]
if (class(hc_light$light)=="character") hc_light$light <-as.numeric(hc_light$light)
if (class(hc_light$Depth)=="factor") hc_light$Depth <-as.numeric(levels(hc_light$Depth))[as.integer(hc_light$Depth) ]
if (class(hc_light$Depth)=="character") hc_light$Depth <-as.numeric(hc_light$Depth)
if (class(hc_light$SerialNum)=="factor") hc_light$SerialNum <-as.numeric(levels(hc_light$SerialNum))[as.integer(hc_light$SerialNum) ]
if (class(hc_light$SerialNum)=="character") hc_light$SerialNum <-as.numeric(hc_light$SerialNum)
# Convert Missing Values to NA for non-dates
hc_light$light <- ifelse((trimws(as.character(hc_light$light))==trimws("NA")),NA,hc_light$light)
suppressWarnings(hc_light$light <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(hc_light$light))==as.character(as.numeric("NA"))),NA,hc_light$light))
# Here is the structure of the input data frame:
str(hc_light)
attach(hc_light)
# The analyses below are basic descriptions of the variables. After testing, they should be replaced.
summary(dateTime)
summary(light)
summary(Depth)
summary(SerialNum)
# Get more details on character variables
detach(hc_light)
inUrl4  <- "https://pasta.lternet.edu/package/data/eml/edi/395/1/14026c2023135291fb66f028de57c269"
infile4 <- tempfile(tmpdir = temp_dumpdir)
try(download.file(inUrl4,infile4,method="curl"))
if (is.na(file.size(infile4))) download.file(inUrl4,infile4,method="auto")
hc_temp <-read.csv(infile4,header=F
,skip=1
,sep=","
, col.names=c(
"dateTime",
"temp",
"Depth",
"SerialNum"    ), check.names=TRUE)
unlink(infile4)
# Fix any interval or ratio columns mistakenly read in as nominal and nominal columns read as numeric or dates read as strings
# attempting to convert hc_temp$dateTime dateTime string to R date structure (date or POSIXct)
tmpDateFormat<-"%Y-%m-%d %H:%M:%S"
tmp4dateTime<-as.POSIXct(hc_temp$dateTime,format=tmpDateFormat)
# Keep the new dates only if they all converted correctly
if(length(tmp4dateTime) == length(tmp4dateTime[!is.na(tmp4dateTime)])){hc_temp$dateTime <- tmp4dateTime } else {print("Date conversion failed for hc_temp$dateTime. Please inspect the data and do the date conversion yourself.")}
rm(tmpDateFormat,tmp4dateTime)
if (class(hc_temp$temp)=="factor") hc_temp$temp <-as.numeric(levels(hc_temp$temp))[as.integer(hc_temp$temp) ]
if (class(hc_temp$temp)=="character") hc_temp$temp <-as.numeric(hc_temp$temp)
if (class(hc_temp$Depth)=="factor") hc_temp$Depth <-as.numeric(levels(hc_temp$Depth))[as.integer(hc_temp$Depth) ]
if (class(hc_temp$Depth)=="character") hc_temp$Depth <-as.numeric(hc_temp$Depth)
if (class(hc_temp$SerialNum)=="factor") hc_temp$SerialNum <-as.numeric(levels(hc_temp$SerialNum))[as.integer(hc_temp$SerialNum) ]
if (class(hc_temp$SerialNum)=="character") hc_temp$SerialNum <-as.numeric(hc_temp$SerialNum)
# Convert Missing Values to NA for non-dates
hc_temp$temp <- ifelse((trimws(as.character(hc_temp$temp))==trimws("NA")),NA,hc_temp$temp)
suppressWarnings(hc_temp$temp <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(hc_temp$temp))==as.character(as.numeric("NA"))),NA,hc_temp$temp))
# Here is the structure of the input data frame:
str(hc_temp)
attach(hc_temp)
# The analyses below are basic descriptions of the variables. After testing, they should be replaced.
summary(dateTime)
summary(temp)
summary(Depth)
summary(SerialNum)
# Get more details on character variables
detach(hc_temp)
inUrl5  <- "https://pasta.lternet.edu/package/data/eml/edi/395/1/19259608b0773cbd9926e06fd896a3a9"
infile5 <- tempfile(tmpdir = temp_dumpdir)
try(download.file(inUrl5,infile5,method="curl"))
if (is.na(file.size(infile5))) download.file(inUrl5,infile5,method="auto")
sb_light <-read.csv(infile5,header=F
,skip=1
,sep=","
, col.names=c(
"dateTime",
"light",
"Depth",
"SerialNum"    ), check.names=TRUE)
unlink(infile5)
# Fix any interval or ratio columns mistakenly read in as nominal and nominal columns read as numeric or dates read as strings
# attempting to convert sb_light$dateTime dateTime string to R date structure (date or POSIXct)
tmpDateFormat<-"%Y-%m-%d %H:%M:%S"
tmp5dateTime<-as.POSIXct(sb_light$dateTime,format=tmpDateFormat)
# Keep the new dates only if they all converted correctly
if(length(tmp5dateTime) == length(tmp5dateTime[!is.na(tmp5dateTime)])){sb_light$dateTime <- tmp5dateTime } else {print("Date conversion failed for sb_light$dateTime. Please inspect the data and do the date conversion yourself.")}
rm(tmpDateFormat,tmp5dateTime)
if (class(sb_light$light)=="factor") sb_light$light <-as.numeric(levels(sb_light$light))[as.integer(sb_light$light) ]
if (class(sb_light$light)=="character") sb_light$light <-as.numeric(sb_light$light)
if (class(sb_light$Depth)=="factor") sb_light$Depth <-as.numeric(levels(sb_light$Depth))[as.integer(sb_light$Depth) ]
if (class(sb_light$Depth)=="character") sb_light$Depth <-as.numeric(sb_light$Depth)
if (class(sb_light$SerialNum)=="factor") sb_light$SerialNum <-as.numeric(levels(sb_light$SerialNum))[as.integer(sb_light$SerialNum) ]
if (class(sb_light$SerialNum)=="character") sb_light$SerialNum <-as.numeric(sb_light$SerialNum)
# Convert Missing Values to NA for non-dates
sb_light$light <- ifelse((trimws(as.character(sb_light$light))==trimws("NA")),NA,sb_light$light)
suppressWarnings(sb_light$light <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(sb_light$light))==as.character(as.numeric("NA"))),NA,sb_light$light))
# Here is the structure of the input data frame:
str(sb_light)
attach(sb_light)
# The analyses below are basic descriptions of the variables. After testing, they should be replaced.
summary(dateTime)
summary(light)
summary(Depth)
summary(SerialNum)
# Get more details on character variables
detach(sb_light)
inUrl6  <- "https://pasta.lternet.edu/package/data/eml/edi/395/1/211956b6a28568e287f3789f5f97bc83"
infile6 <- tempfile(tmpdir = temp_dumpdir)
try(download.file(inUrl6,infile6,method="curl"))
if (is.na(file.size(infile6))) download.file(inUrl6,infile6,method="auto")
sb_temp <-read.csv(infile6,header=F
,skip=1
,sep=","
, col.names=c(
"dateTime",
"temp",
"Depth",
"SerialNum"    ), check.names=TRUE)
unlink(infile6)
# Fix any interval or ratio columns mistakenly read in as nominal and nominal columns read as numeric or dates read as strings
# attempting to convert sb_temp$dateTime dateTime string to R date structure (date or POSIXct)
tmpDateFormat<-"%Y-%m-%d %H:%M:%S"
tmp6dateTime<-as.POSIXct(sb_temp$dateTime,format=tmpDateFormat)
# Keep the new dates only if they all converted correctly
if(length(tmp6dateTime) == length(tmp6dateTime[!is.na(tmp6dateTime)])){sb_temp$dateTime <- tmp6dateTime } else {print("Date conversion failed for sb_temp$dateTime. Please inspect the data and do the date conversion yourself.")}
rm(tmpDateFormat,tmp6dateTime)
if (class(sb_temp$temp)=="factor") sb_temp$temp <-as.numeric(levels(sb_temp$temp))[as.integer(sb_temp$temp) ]
if (class(sb_temp$temp)=="character") sb_temp$temp <-as.numeric(sb_temp$temp)
if (class(sb_temp$Depth)=="factor") sb_temp$Depth <-as.numeric(levels(sb_temp$Depth))[as.integer(sb_temp$Depth) ]
if (class(sb_temp$Depth)=="character") sb_temp$Depth <-as.numeric(sb_temp$Depth)
if (class(sb_temp$SerialNum)=="factor") sb_temp$SerialNum <-as.numeric(levels(sb_temp$SerialNum))[as.integer(sb_temp$SerialNum) ]
if (class(sb_temp$SerialNum)=="character") sb_temp$SerialNum <-as.numeric(sb_temp$SerialNum)
# Convert Missing Values to NA for non-dates
sb_temp$temp <- ifelse((trimws(as.character(sb_temp$temp))==trimws("NA")),NA,sb_temp$temp)
suppressWarnings(sb_temp$temp <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(sb_temp$temp))==as.character(as.numeric("NA"))),NA,sb_temp$temp))
# Here is the structure of the input data frame:
str(sb_temp)
attach(sb_temp)
# The analyses below are basic descriptions of the variables. After testing, they should be replaced.
summary(dateTime)
summary(temp)
summary(Depth)
summary(SerialNum)
# Get more details on character variables
detach(sb_temp)
save.image("C:/Users/steeleb/Desktop/rawtempeod.RData")
