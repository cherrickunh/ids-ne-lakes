title =  '`buoy 2y` dataset') +
final_theme +
coord_cartesian(xlim = c(0, 27),
ylim = c(0, 27))
FigA_d <- ggplot(C2_2018, aes(x = is_temp_med, y = surface_temp_median)) +
geom_abline(slope = 1, intercept = 0, color = 'grey', size = 0.75) +
geom_point() +
#add deming regression and prediction intervals for C2 filtered for sub zero and maxIQR
geom_abline(intercept = C2_2018_deming$coefficients[1], slope = C2_2018_deming$coefficients[2], size = 0.75) +
geom_abline(intercept = C2_2018_deming$ci[1,1], slope = C2_2018_deming$ci[2,1], linetype = 3, size = 0.75) +
geom_abline(intercept = C2_2018_deming$ci[1,2], slope = C2_2018_deming$ci[2,2], linetype = 3, size = 0.75) +
geom_text(label = paste0('r = ', round(all2018_r, digits = 3)),
x = 2,
y = 25,
size = 4,
hjust = 0)+
geom_text(label = paste0('slope = ', round(all2018_slope, digits = 2)),
x = 2,
y = 23,
size = 4,
hjust = 0)+
geom_text(label = paste0('n = ', nrow(C2_2018)),
x = 2,
y = 21,
size = 4,
hjust = 0)+
labs(x = NULL,
y = NULL,
title = '`2018` dataset') +
final_theme +
coord_cartesian(xlim = c(0, 27),
ylim = c(0, 27))
FigA_e <- ggplot(C2_HCS, aes(x = HerrickCoveSouth_median, y = surface_temp_median)) +
geom_abline(slope = 1, intercept = 0, color = 'grey', size = 0.75) +
geom_point() +
#add deming regression and prediction intervals for C2 filtered for sub zero and maxIQR
geom_abline(intercept = C2_HCS_deming$coefficients[1], slope = C2_HCS_deming$coefficients[2], size = 0.75) +
geom_abline(intercept = C2_HCS_deming$ci[1,1], slope = C2_HCS_deming$ci[2,1], linetype = 3, size = 0.75) +
geom_abline(intercept = C2_HCS_deming$ci[1,2], slope = C2_HCS_deming$ci[2,2], linetype = 3, size = 0.75) +
geom_text(label = paste0('r = ', round(HCS_r, digits = 3)),
x = 2,
y = 25,
size = 4,
hjust = 0)+
geom_text(label = paste0('slope = ', round(HCS_slope, digits = 2)),
x = 2,
y = 23,
size = 4,
hjust = 0)+
geom_text(label = paste0('n = ', nrow(C2_HCS)),
x = 2,
y = 21,
size = 4,
hjust = 0)+
labs(x = NULL,
y = NULL,
title = '`HC` dataset') +
final_theme +
coord_cartesian(xlim = c(0, 27),
ylim = c(0, 27))
FigA_f <- ggplot(C2_NB, aes(x = Newbury_median, y = surface_temp_median)) +
geom_abline(slope = 1, intercept = 0, color = 'grey', size = 0.75) +
geom_point() +
#add deming regression and prediction intervals for C2 filtered for sub zero and maxIQR
geom_abline(intercept = C2_NB_deming$coefficients[1], slope = C2_NB_deming$coefficients[2], size = 0.75) +
geom_abline(intercept = C2_NB_deming$ci[1,1], slope = C2_NB_deming$ci[2,1], linetype = 3, size = 0.75) +
geom_abline(intercept = C2_NB_deming$ci[1,2], slope = C2_NB_deming$ci[2,2], linetype = 3, size = 0.75) +
geom_text(label = paste0('r = ', round(NB_r, digits = 3)),
x = 2,
y = 25,
size = 4,
hjust = 0)+
geom_text(label = paste0('slope = ', round(NB_slope, digits = 2)),
x = 2,
y = 23,
size = 4,
hjust = 0)+
geom_text(label = paste0('n = ', nrow(C2_NB)),
x = 2,
y = 21,
size = 4,
hjust = 0)+
labs(x = NULL,
y = NULL,
title = '`NB` dataset') +
final_theme +
coord_cartesian(xlim = c(0, 27),
ylim = c(0, 27))
FigA <- plot_grid(FigA_a, FigA_b, FigA_c, FigA_d, FigA_e, FigA_f,
labels = c('a', 'b', 'c', 'd', 'e', 'f'))
x_lab = ggdraw() + draw_label(label = expression(bold(paste(italic('in-situ'), ' median water temperature (deg C)'))),
fontface = 'bold')
y_lab = ggdraw() + draw_label(label = 'Landsat median water temperature (deg C)',
fontface = 'bold',
angle =90)
plot_grid(y_lab, FigA,
NULL, x_lab,
ncol = 2,
rel_widths = c(0.05, 1.1),
rel_heights = c(1.1, 0.05))
library(tidyverse)
library(leaflet)
sampling <- read.csv('data/in-situ locs/temp_ms_insitu.csv')
library(sf)
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
fitBounds(-72.084508, -72.026738,
43.314471, 43.432164)
sun
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
fitBounds([-72.084508, -72.026738],
[43.314471, 43.432164])
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
fitBounds(43.314471, -72.084508,
43.432164, -72.026738)
sun
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164)
fitBounds()
sun
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164)
sun
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164)
sun
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addMarkers(sampling)
View(sampling)
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addMarkers(sampling, lat = lat_dd, lng = lon_dd)
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addMarkers(lat = sampling$lat_dd, lng = sampling$lon_dd)
sun
View(sampling)
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addMarkers(lat = sampling$lat_dd, lng = sampling$lon_dd, group = frequency)
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addMarkers(lat = sampling$lat_dd, lng = sampling$lon_dd, group = sampling$frequency)
sun
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addMarkers(lat = sampling$lat_dd, lng = sampling$lon_dd, color = sampling$frequency)
sun
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addCircleMarkers(lat = sampling$lat_dd, lng = sampling$lon_dd, color = sampling$frequency)
sun
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addCircle(lat = sampling$lat_dd, lng = sampling$lon_dd, color = sampling$frequency)
sun
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addCircles(lat = sampling$lat_dd, lng = sampling$lon_dd, color = sampling$frequency)
sun
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addCircleMarkers(lat = sampling$lat_dd, lng = sampling$lon_dd, color = sampling$frequency)
sun
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addCircleMarkers(lat = sampling$lat_dd, lng = sampling$lon_dd,
color = !ifelse(sampling$frequency == 'high-frequency', 'black', 'grey'))
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addCircleMarkers(lat = sampling$lat_dd, lng = sampling$lon_dd,
color = !ifelse(sampling$frequency == 'high-frequency', '#000000', '#333333'))
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addCircleMarkers(lat = sampling$lat_dd, lng = sampling$lon_dd,
color = ~ifelse(sampling$frequency == 'high-frequency', '#000000', '#333333'))
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addCircleMarkers(lat = sampling$lat_dd, lng = sampling$lon_dd,
color = ~ifelse(sampling$frequency == 'high frequency', '#000000', '#333333'))
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addCircleMarkers(lat = sampling$lat_dd, lng = sampling$lon_dd,
color = ~ifelse(sampling$frequency == 'high frequency', 'black', 'grey'))
pal <- colorFactor(c("black", "dark grey"), domain = c("high frequency", "low frequency"))
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addCircleMarkers(lat = sampling$lat_dd, lng = sampling$lon_dd,
color = ~pal(sampling$frequency))
# make into a simple feature
locs <- st_as_sf(sampling)
#make into simple feature; crs is WGS84
sampling_georef <- st_as_sf(sampling, coords = c('lon_dd', 'lat_Dd'), crs = 'EPSG:4326')
#make into simple feature; crs is WGS84
sampling_georef <- st_as_sf(sampling, coords = c('lon_dd', 'lat_dd'), crs = 'EPSG:4326')
#get the crs
st_crs(sampling_georef)
sun <- leaflet() %>%
addProviderTiles(providers$Esri.WorldShadedRelief) %>%
fitBounds( -72.084508,43.314471,
-72.026738,43.432164) %>%
addCircleMarkers(sampling_georef)
#make sabattus basemeap
sun = tm_shape() +
tm_borders()
#make sunapee basemeap
sun = tm_basemap('Esri.WorldShadedRelief')
library(tmap)
#make sunapee basemeap
sun = tm_basemap('Esri.WorldShadedRelief')
sun
#add a layer to check projection
sun = sun +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency')
sun
#make into simple feature; crs is WGS84
sampling_georef <- st_as_sf(sampling, coords = c('lat_dd', 'lon_dd'), crs = 'EPSG:4326')
#get the crs
st_crs(sampling_georef)
#make sunapee basemeap
sun = tm_basemap('Esri.WorldShadedRelief')
#add a layer to check projection
sun = sun +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency')
sun
#make sunapee basemeap
sun = tm_basemap('Esri.WorldShadedRelief')
st_crs(sun)
#add a layer to check projection
sun = sun +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency')
st_crs(sun)
sampling <- read.csv('data/in-situ locs/temp_ms_insitu.csv')
#make into simple feature; crs is WGS84
sampling_georef <- st_as_sf(sampling, coords = c('lon_dd', 'lat_dd'), crs = 'EPSG:4326')
#get the crs
st_crs(sampling_georef)
#make sunapee basemeap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency')
st_crs(sun)
sun
#make sunapee basemeap
sun = tm_basemap('Esri.WorldShadedRelief')
sun
tmap_mode('view')
#make sunapee basemeap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency')
sun
tmap_mode('plot')
#make sunapee basemeap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency')
sun
tmap_mode('view')
#make sunapee basemeap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency')
sun
tmap_mode('plot')
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency')
sun
tmap_mode('view')
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency')
sun
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency') +
tm_layout(legend.width = 10)
sun
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency') +
tm_layout(legend.width = 20)
sun
tmap_mode('plot')
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency') +
tm_layout(legend.width = 20)
sun
tmap_mode('view')
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency') +
tm_layout(legend.width = 20)
sun
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency') +
tm_layout(legend.width = 20,
basemap = c('Esri.WorldShadedRelief'))
#make sunapee basemap
sun = tm_shape(sampling_georef) +
tm_dots(col = 'frequency') +
tm_layout(legend.width = 20,
basemap = c('Esri.WorldShadedRelief'))
#make sunapee basemap
sun = tm_shape(sampling_georef) +
tm_dots(col = 'frequency') +
tm_layout(legend.width = 20,
basemaps = c('Esri.WorldShadedRelief'))
tmap_mode('view')
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency') +
tm_layout(legend.width = 20)
sun
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
size = 2)
sun
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
size = 1)
sun
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
size = 0.1)
sun
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
size = 0.2)
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
size = 0.2)
sun
tmaptools::palette_explorer()
library(tmaptools)
tmaptools::palette_explorer()
install.packages('shinyjs')
tmaptools::palette_explorer()
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
size = 0.2,
palette = c('black', 'grey'))
sun
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 'source',
size = 0.2,
palette = c('black', 'grey'))
sun
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
icon = 'source',
size = 0.2,
palette = c('black', 'grey'))
sun
View(sampling)
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
icon = 'source',
size = 0.1,
palette = c('black', 'grey'))
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
size = 0.1,
palette = c('black', 'grey'))
sun
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
size = 0.1,
palette = c('black', 'grey'))
sun
tm_basemap()
inset = tm_basemap('United States') +
inset = tm_basemap('United States')
inset
install.pakc
install.packages('usmap')
library(usmap)
us <- us_map('states')
us
us <- plot_usmap('states')
us
ne <- plot_usmap(c('VT', 'NH', 'ME', 'MA'))
ne <- plot_usmap(include = c('VT', 'NH', 'ME', 'MA'))
ne
st_crs(us)
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
size = 0.1,
palette = c('black', 'grey')) +
tm_scale_bar()
sun
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
size = 0.1,
palette = c('black', 'grey')) +
tm_scale_bar(breaks = 3)
sun
tmap_mode('plot')
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
size = 0.1,
palette = c('black', 'grey')) +
tm_scale_bar(breaks = 3)
sun
tmap_mode('view')
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
size = 0.1,
palette = c('black', 'grey')) +
tm_scale_bar(breaks = 3)
sun
us <- plot_usmap('states')
us
ne <- plot_usmap(include = c('VT', 'NH', 'ME', 'MA'))
ne
#make sunapee basemap
sun = tm_basemap('Esri.WorldShadedRelief') +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
size = 0.1,
palette = c('black', 'grey')) +
tm_scale_bar(breaks = 3) +
tm_compass()
sun
data('United States')
data('US')
