is_aug_data_wo <- aug_data_wo %>%
filter(source == 'in-situ')
ls_8_lm_wo <- lm(value~year, data = ls_aug_data_wo)
is_8_lm_wo <- lm(value~year, data = is_aug_data_wo)
lm_source_sep_iva <- lm(value ~ year+source+year*source, data = sep_data)
summary(lm_source_sep_iva)
# there is a significant difference in slope
lm_source_sep <- lm(value ~ year+source, data = sep_data)
summary(lm_source_sep)
all_9_lm
is_9_lm
ls_9_lm
#plot one line for landsat
ls_9_data <- sep_data %>%
filter(source == 'landsat')
car::durbinWatsonTest(lm(value~year, data = ls_9_data))
# do analysis without outliers
sep_data_wo <- sep_data %>%
filter(value >15)
lm_source_sep_iva_wo <- lm(value ~ year+source+year*source, data = sep_data_wo)
summary(lm_source_sep_iva_wo)
# sig diff in slope
lm_source_sep_wo <- lm(value ~ year+source, data = sep_data_wo)
summary(lm_source_sep_wo)
lm_sep_wo <- lm(value ~ year, data = sep_data_wo)
summary(lm_sep_wo)
ls_sep_data_Wo <- sep_data_wo %>%
filter(source == 'landsat')
is_sep_data_Wo <- sep_data_wo %>%
filter(source == 'in-situ')
ls_9_lm_wo = lm(value ~ year, data = ls_sep_data_Wo)
summary(ls_9_lm_wo)
is_9_lm_wo = lm(value ~ year, data = is_sep_data_Wo)
is_9_lm
lm_source_oct_iva <- lm(value ~ year+source+year*source, data = oct_data)
summary(lm_source_oct_iva)
#no diff in slope
lm_source_oct <- lm(value ~ year+source, data = oct_data)
summary(lm_source_oct)
#no diff in intercept
all_10_lm
#plot one line
car::durbinWatsonTest(lm(value~year, data = oct_data))
# IVA results to table ####
iva_table <- NULL
iva_table$month <- c('May', 'June', 'July', 'August', 'August, outliers removed', 'September', 'September, outliers removed', 'October')
iva_table$iva_pval <- c(summary(lm_source_may_iva)$coefficients[4,4],
summary(lm_source_jun_iva)$coefficients[4,4],
summary(lm_source_jul_iva)$coefficients[4,4],
summary(lm_source_aug_iva)$coefficients[4,4],
summary(lm_source_aug_iva_wo)$coefficients[4,4],
summary(lm_source_sep_iva)$coefficients[4,4],
summary(lm_source_sep_iva_wo)$coefficients[4,4],
summary(lm_source_oct_iva)$coefficients[4,4])
iva_table$multreg_pval <- c(summary(lm_source_may)$coefficients[3,4],
summary(lm_source_jun)$coefficients[3,4],
summary(lm_source_jul)$coefficients[3,4],
summary(lm_source_aug)$coefficients[3,4],
summary(lm_source_aug_wo)$coefficients[3,4],
summary(lm_source_sep)$coefficients[3,4],
summary(lm_source_sep_wo)$coefficients[3,4],
summary(lm_source_oct)$coefficients[3,4])
iva_table$alldata_slope_pval <- c(all_5_lm$coefficients[2,4],
all_6_lm$coefficients[2,4],
all_7_lm$coefficients[2,4],
all_8_lm$coefficients[2,4],
summary(lm_aug_wo)$coefficients[2,4],
all_9_lm$coefficients[2,4],
summary(lm_sep_wo)$coefficients[2,4],
all_10_lm$coefficients[2,4])
iva_table$ls_slope_pval <- c(ls_5_lm$coefficients[2,4],
ls_6_lm$coefficients[2,4],
ls_7_lm$coefficients[2,4],
ls_8_lm$coefficients[2,4],
summary(ls_8_lm_wo)$coefficients[2,4],
ls_9_lm$coefficients[2,4],
summary(ls_9_lm_wo)$coefficients[2,4],
ls_10_lm$coefficients[2,4])
iva_table$is_slope_pval <- c(is_5_lm$coefficients[2,4],
is_6_lm$coefficients[2,4],
is_7_lm$coefficients[2,4],
is_8_lm$coefficients[2,4],
summary(is_8_lm_wo)$coefficients[2,4],
is_9_lm$coefficients[2,4],
summary(is_9_lm_wo)$coefficients[2,4],
is_10_lm$coefficients[2,4])
iva_table <- as.data.frame(iva_table)
iva_table <- iva_table %>%
mutate_at(vars(iva_pval:is_slope_pval),
~ round(., digits = 3))
# recode table values where they are irrelevant
iva_table_recode <- iva_table %>%
mutate(multreg_pval = case_when(iva_pval <0.05 ~ NA_real_,
TRUE ~ multreg_pval),
alldata_slope_pval = case_when(multreg_pval <0.05 ~NA_real_,
iva_pval <0.05~NA_real_,
is.na(multreg_pval) ~ alldata_slope_pval,
TRUE ~ alldata_slope_pval),
is_slope_pval = case_when(iva_pval <0.05 ~ is_slope_pval,
multreg_pval < 0.05 ~ is_slope_pval,
TRUE ~ NA_real_),
ls_slope_pval = case_when(iva_pval <0.05 ~ ls_slope_pval,
multreg_pval < 0.05 ~ ls_slope_pval,
TRUE ~ NA_real_))
iva_table_recode
#### plot on same axes with separate lines ####
may_is <- may_data %>%
filter(source == 'in-situ')
mean_may_is = mean(may_is$value)
may_ls <- may_data %>%
filter(source == 'landsat')
mean_may_ls = mean(may_ls$value)
may <- temp_monthly_median %>%
filter(month == 5) %>%
ggplot(., aes(x = year, y = value))+
geom_point(aes(color = source)) +
geom_abline(slope = 0,
intercept = mean_may_is,
lty = 2) +
geom_abline(slope = 0,
intercept = mean_may_ls,
lty = 2,
color = "#E69F00") +
final_theme +
coord_cartesian(ylim = c(7, 27),
xlim = c(1980, 2020)) +
scale_color_colorblind() +
labs(x = NULL, y = NULL, title = 'May') +
theme(legend.position = 'none')
may
mean_june = mean(jun_data$value)
june <- temp_monthly_median %>%
filter(month == 6) %>%
ggplot(., aes(x = year, y = value))+
geom_point(aes(color = source)) +
geom_abline(slope = 0,
intercept = mean_june,
lty = 2,
color = '#009E73') +
final_theme +
coord_cartesian(ylim = c(7, 27)) +
scale_color_colorblind() +
labs(x = NULL, y = NULL, title = 'June') +
theme(legend.position = 'none')
june
jul <- temp_monthly_median %>%
filter(month == 7) %>%
ggplot(., aes(x = year, y = value))+
geom_point(aes(color = source)) +
geom_abline(slope = all_7_lm$coefficients[2, 1],
intercept = all_7_lm$coefficients[1,1],
color = '#009E73') +
final_theme +
coord_cartesian(ylim = c(7, 27),
xlim = c(1980, 2020)) +
scale_color_colorblind() +
labs(x = NULL, y = NULL, title = 'July') +
theme(legend.position = 'none')
jul
aug_data_out <- aug_data %>%
filter(value < 15)
aug <- ggplot(aug_data_wo, aes(x = year, y = value)) +
geom_point(aes(color = source)) +
geom_abline(slope = all_8_lm$coefficients[2, 1],
intercept = all_8_lm$coefficients[1,1],
color = '#009E73') +
final_theme +
coord_cartesian(ylim = c(7, 27),
xlim = c(1980, 2020)) +
scale_color_colorblind() +
geom_point(data = aug_data_out, mapping = aes(x = year, y =value), shape = 17, color = '#E69F00', size = 2) +
labs(x = NULL, y = NULL, title = 'August') +
theme(legend.position = 'none')
aug
sep_data_out <- sep_data %>%
filter(value < 15)
is_data_sep <- sep_data %>%
filter(source == 'in-situ')
sept <-ggplot(sep_data_wo, aes(x = year, y = value))+
geom_point(aes(color = source)) +
geom_abline(slope = ls_9_lm$coefficients[2, 1],
intercept = ls_9_lm$coefficients[1,1],
color = '#E69F00') +
geom_abline(slope = 0,
intercept = mean(is_data_sep$value),
lty = 2) +
final_theme +
coord_cartesian(ylim = c(7, 27),
xlim = c(1980, 2020)) +
scale_color_colorblind() +
geom_point(data = sep_data_out, mapping = aes(x = year, y =value), shape = 17, color = '#E69F00', size = 2) +
labs(x = NULL, y = NULL, title = 'September') +
theme(legend.position = 'none')
sept
oct <- temp_monthly_median %>%
filter(month == 10) %>%
ggplot(., aes(x = year, y = value))+
geom_point(aes(color = source)) +
geom_abline(slope = all_10_lm$coefficients[2, 1],
intercept = all_10_lm$coefficients[1,1],
color = '#009E73') +
final_theme +
coord_cartesian(ylim = c(7, 27),
xlim = c(1980, 2020)) +
scale_color_colorblind() +
labs(x = NULL, y = NULL, title = 'October') +
theme(legend.position = 'none')
oct
#set up png device
jpeg(file.path(figdir, 'FigH_application_monthly_median_temp_IQR_together.jpg'),
width=9,height=6, units = 'in', res = 300)
gridExtra::grid.arrange(may, june, jul, aug, sept, oct,
nrow = 2,
left = 'lake surface temperature\ndegrees C',
bottom = 'black = in-situ   yellow = landsat   green = all data')
#Close pdf graphics device
dev.off()
#save title
x_axis_title=ggpubr:::text_grob('median lake surface temperature\n(degreesC)', size = 12, face = "bold")
#set up png device
jpeg(file.path(figdir, 'FigH_application_monthly_median_temp_IQR_together.jpg'),
width=9,height=6, units = 'in', res = 300)
gridExtra::grid.arrange(may, june, jul, aug, sept, oct,
nrow = 2,
left = x_axis_title,
bottom = 'black = in-situ   yellow = landsat   green = all data')
#Close pdf graphics device
dev.off()
#save title
x_axis_title=ggpubr:::text_grob('median lake surface temperature\n(degreesC)', size = 12, face = "bold", rot = 90)
#set up png device
jpeg(file.path(figdir, 'FigH_application_monthly_median_temp_IQR_together.jpg'),
width=9,height=6, units = 'in', res = 300)
gridExtra::grid.arrange(may, june, jul, aug, sept, oct,
nrow = 2,
left = x_axis_title,
bottom = 'black = in-situ   yellow = landsat   green = all data')
#Close pdf graphics device
dev.off()
#save title
x_axis_title=ggpubr:::text_grob('median lake surface temperature\n(degrees C)', size = 12, face = "bold", rot = 90)
#set up png device
jpeg(file.path(figdir, 'FigH_application_monthly_median_temp_IQR_together.jpg'),
width=9,height=6, units = 'in', res = 300)
gridExtra::grid.arrange(may, june, jul, aug, sept, oct,
nrow = 2,
left = x_axis_title,
bottom = 'black = in-situ   yellow = landsat   green = all data')
#Close pdf graphics device
dev.off()
# read in libraries and functions
source('scripts/R_library.R')
# point to directories
C2_datadir <- '~/GitHub/ids-ne-lakes/data/colab-output/C2/'
fig_dir <- '~/GitHub/ids-ne-lakes/figures/'
# Read in Data ####
C2_data <- read.csv(file.path(C2_datadir, 'sumapee_paired_C2_QAQCflag_v2021-11-09.csv'))
# Read in Data ####
C2_data <- read.csv(file.path(C2_datadir, 'sunapee_paired_C2_QAQCflag_v2021-11-09.csv'))
# filter for subsets
C2_buoy <- C2_data %>%
filter(freeze_QAQC == 'P' & cloud_cover < 40) %>%
select(date, LSmission, loon_median, surface_temp_median) %>%
filter(!is.na(loon_median))
C2_buoy_2y <- C2_data %>%
filter(freeze_QAQC == 'P' & cloud_cover <40) %>%
select(date, LSmission, loon_median, surface_temp_median) %>%
filter(date >= '2019-01-01')%>%
filter(!is.na(loon_median))
C2_2018 <- C2_data %>%
filter(freeze_QAQC == 'P'& cloud_cover <40) %>%
filter(date >= '2018-01-01' & date < '2019-01-01')
C2_HCS <- C2_data %>%
filter(freeze_QAQC == 'P' & cloud_cover <40) %>%
select(date, LSmission, HerrickCoveSouth_median, surface_temp_median) %>%
filter(!is.na(HerrickCoveSouth_median))
C2_NB <- C2_data %>%
filter(freeze_QAQC == 'P'& cloud_cover <40) %>%
select(date, LSmission, Newbury_median, surface_temp_median) %>%
filter(!is.na(Newbury_median))
# Calculate Deming regression and statistics ####
#just buoy data
C2_buoy_deming = deming::deming(C2_buoy$surface_temp_median ~ C2_buoy$loon_median)
C2_buoy_deming
buoy_slope <- as.numeric(C2_buoy_deming$coefficients[2])
buoy_r <- cor(C2_buoy$loon_median, C2_buoy$surface_temp_median)
C2_buoy_deming_forresid = mcreg(x = C2_buoy$loon_median, y = C2_buoy$surface_temp_median, method.reg = 'Deming')
C2_buoy_deming$opt_resid = MCResult.getResiduals(C2_buoy_deming_forresid)$optimized
#2 y of buoy data
C2_2ybuoy_deming = deming::deming(C2_buoy_2y$surface_temp_median ~ C2_buoy_2y$loon_median)
C2_2ybuoy_deming
buoy2y_slope <- as.numeric(C2_2ybuoy_deming$coefficients[2])
buoy2y_r <- cor(C2_buoy_2y$surface_temp_median, C2_buoy_2y$loon_median)
C2_2ybuoy_deming_forresid = mcreg(x = C2_buoy_2y$loon_median, y = C2_buoy_2y$surface_temp_median, method.reg = 'Deming')
C2_buoy_2y$opt_resid = MCResult.getResiduals(C2_2ybuoy_deming_forresid)$optimized
#2018 only
C2_2018_deming = deming::deming(C2_2018$surface_temp_median ~ C2_2018$temp_med)
C2_2018_deming
all2018_slope <- as.numeric(C2_2018_deming$coefficients[2])
all2018_r <- cor(C2_2018$surface_temp_median, C2_2018$temp_med)
C2_2018_deming_forresid = mcreg(x = C2_2018$temp_med, y = C2_2018$surface_temp_median, method.reg = 'Deming')
C2_2018$opt_resid = MCResult.getResiduals(C2_2018_deming_forresid)$optimized
#Herrick Cove South only
C2_HCS_deming = deming::deming(C2_HCS$surface_temp_median ~ C2_HCS$HerrickCoveSouth_median)
C2_HCS_deming
HCS_slope <- as.numeric(C2_HCS_deming$coefficients[2])
HCS_r <- cor(C2_HCS$surface_temp_median, C2_HCS$HerrickCoveSouth_median)
C2_HCS_deming_forresid = mcreg(x = C2_HCS$HerrickCoveSouth_median, y = C2_HCS$surface_temp_median, method.reg = 'Deming')
C2_HCS$opt_resid = MCResult.getResiduals(C2_HCS_deming_forresid)$optimized
#Newbury only
C2_NB_deming = deming::deming(C2_NB$surface_temp_median ~ C2_NB$Newbury_median)
C2_NB_deming
NB_slope <- as.numeric(C2_NB_deming$coefficients[2])
NB_r <- cor(C2_NB$surface_temp_median, C2_NB$Newbury_median)
C2_NB_deming_forresid = mcreg(x = C2_NB$Newbury_median, y = C2_NB$surface_temp_median, method.reg = 'Deming')
C2_NB$opt_resid = MCResult.getResiduals(C2_NB_deming_forresid)$optimized
FigD_a <- ggplot(C2_buoy, aes(x = loon_median, y = surface_temp_median)) +
geom_abline(slope = 1, intercept = 0, color = 'grey', size = 0.75) +
geom_point() +
#add deming regression and prediction intervals for C2 filtered for sub zero and maxIQR
geom_abline(intercept = C2_buoy_deming$coefficients[1], slope = C2_buoy_deming$coefficients[2], size = 0.75) +
geom_abline(intercept = C2_buoy_deming$ci[1,1], slope = C2_buoy_deming$ci[2,1], linetype = 3, size = 0.75) +
geom_abline(intercept = C2_buoy_deming$ci[1,2], slope = C2_buoy_deming$ci[2,2], linetype = 3, size = 0.75) +
geom_text(label = paste0('r = ', round(buoy_r, digits = 3)),
x = 2,
y = 25,
size = 4,
hjust = 0)+
geom_text(label = paste0('slope = ', round(buoy_slope, digits = 2)),
x = 2,
y = 23,
size = 4,
hjust = 0)+
labs(x = expression(bold(paste(italic('in-situ'), ' median water temp (deg C)'))),
y = 'median Landsat-derived\nsurface temperature (deg C)',
title = 'Collection 2',
subtitle = '`buoy` dataset') +
final_theme +
coord_cartesian(xlim = c(0, 27),
ylim = c(0, 27))
FigD_a
FigD_b <- ggplot(C2_buoy_2y, aes(x = loon_median, y = surface_temp_median)) +
geom_abline(slope = 1, intercept = 0, color = 'grey', size = 0.75) +
geom_point() +
#add deming regression and prediction intervals for C2 filtered for sub zero and maxIQR
geom_abline(intercept = C2_2ybuoy_deming$coefficients[1], slope = C2_2ybuoy_deming$coefficients[2], size = 0.75) +
geom_abline(intercept = C2_2ybuoy_deming$ci[1,1], slope = C2_2ybuoy_deming$ci[2,1], linetype = 3, size = 0.75) +
geom_abline(intercept = C2_2ybuoy_deming$ci[1,2], slope = C2_2ybuoy_deming$ci[2,2], linetype = 3, size = 0.75) +
geom_text(label = paste0('r = ', round(buoy2y_r, digits = 3)),
x = 2,
y = 25,
size = 4,
hjust = 0)+
geom_text(label = paste0('slope = ', round(buoy2y_slope, digits = 2)),
x = 2,
y = 23,
size = 4,
hjust = 0)+
labs(x = expression(bold(paste(italic('in-situ'), ' median water temp (deg C)'))),
y = 'median Landsat-derived\nsurface temperature (deg C)',
title = 'Collection 2',
subtitle = '`buoy 2y` dataset') +
final_theme +
coord_cartesian(xlim = c(0, 27),
ylim = c(0, 27))
FigD_b
FigD_c <- ggplot(C2_2018, aes(x = temp_med, y = surface_temp_median)) +
geom_abline(slope = 1, intercept = 0, color = 'grey', size = 0.75) +
geom_point() +
#add deming regression and prediction intervals for C2 filtered for sub zero and maxIQR
geom_abline(intercept = C2_2018_deming$coefficients[1], slope = C2_2018_deming$coefficients[2], size = 0.75) +
geom_abline(intercept = C2_2018_deming$ci[1,1], slope = C2_2018_deming$ci[2,1], linetype = 3, size = 0.75) +
geom_abline(intercept = C2_2018_deming$ci[1,2], slope = C2_2018_deming$ci[2,2], linetype = 3, size = 0.75) +
geom_text(label = paste0('r = ', round(all2018_r, digits = 3)),
x = 2,
y = 25,
size = 4,
hjust = 0)+
geom_text(label = paste0('slope = ', round(all2018_slope, digits = 2)),
x = 2,
y = 23,
size = 4,
hjust = 0)+
labs(x = expression(bold(paste(italic('in-situ'), ' median water temp (deg C)'))),
y = 'median Landsat-derived\nsurface temperature (deg C)',
title = 'Collection 2',
subtitle = '`2018` dataset') +
final_theme +
coord_cartesian(xlim = c(0, 27),
ylim = c(0, 27))
FigD_c
FigD_d <- ggplot(C2_HCS, aes(x = HerrickCoveSouth_median, y = surface_temp_median)) +
geom_abline(slope = 1, intercept = 0, color = 'grey', size = 0.75) +
geom_point() +
#add deming regression and prediction intervals for C2 filtered for sub zero and maxIQR
geom_abline(intercept = C2_HCS_deming$coefficients[1], slope = C2_HCS_deming$coefficients[2], size = 0.75) +
geom_abline(intercept = C2_HCS_deming$ci[1,1], slope = C2_HCS_deming$ci[2,1], linetype = 3, size = 0.75) +
geom_abline(intercept = C2_HCS_deming$ci[1,2], slope = C2_HCS_deming$ci[2,2], linetype = 3, size = 0.75) +
geom_text(label = paste0('r = ', round(HCS_r, digits = 3)),
x = 2,
y = 25,
size = 4,
hjust = 0)+
geom_text(label = paste0('slope = ', round(HCS_slope, digits = 2)),
x = 2,
y = 23,
size = 4,
hjust = 0)+
labs(x = expression(bold(paste(italic('in-situ'), ' median water temp (deg C)'))),
y = 'median Landsat-derived\nsurface temperature (deg C)',
title = 'Collection 2',
subtitle = '`HCS` dataset') +
final_theme +
coord_cartesian(xlim = c(0, 27),
ylim = c(0, 27))
FigD_d
FigD_e <- ggplot(C2_NB, aes(x = Newbury_median, y = surface_temp_median)) +
geom_abline(slope = 1, intercept = 0, color = 'grey', size = 0.75) +
geom_point() +
#add deming regression and prediction intervals for C2 filtered for sub zero and maxIQR
geom_abline(intercept = C2_NB_deming$coefficients[1], slope = C2_NB_deming$coefficients[2], size = 0.75) +
geom_abline(intercept = C2_NB_deming$ci[1,1], slope = C2_NB_deming$ci[2,1], linetype = 3, size = 0.75) +
geom_abline(intercept = C2_NB_deming$ci[1,2], slope = C2_NB_deming$ci[2,2], linetype = 3, size = 0.75) +
geom_text(label = paste0('r = ', round(NB_r, digits = 3)),
x = 2,
y = 25,
size = 4,
hjust = 0)+
geom_text(label = paste0('slope = ', round(NB_slope, digits = 2)),
x = 2,
y = 23,
size = 4,
hjust = 0)+
labs(x = expression(bold(paste(italic('in-situ'), ' median water temp (deg C)'))),
y = 'median Landsat-derived\nsurface temperature (deg C)',
title = 'Collection 2',
subtitle = '`NB` dataset') +
final_theme +
coord_cartesian(xlim = c(0, 27),
ylim = c(0, 27))
FigD_e
plot_grid(FigD_a, FigD_b, FigD_c, FigD_d, FigD_e,
labels = c('a', 'b', 'c', 'd', 'e'))
ggsave(file.path(fig_dir, 'SFC_C2ValidationExample_v09Nov2021.jpg'), height = 8, width = 12, units = 'in', dpi = 300)
source('R_library.R')
source('scripts/R_library.R')
datadir = 'data/'
#load in all high-frequency insitu data for historical data analysis
insitu <- read.csv(paste0(datadir, 'insitu_temp_data_v2021-05-17.csv')) %>%
filter(!is.na(lat_dd)) %>%
mutate(datetime = as.POSIXct(datetime, tz='Etc/GMT+5'))
#load in all high-frequency insitu data for historical data analysis
insitu <- read.csv(paste0(datadir, 'insitu_temp_data_v2021-10-21.csv')) %>%
filter(!is.na(lat_dd)) %>%
mutate(datetime = as.POSIXct(datetime, tz='Etc/GMT+5'))
#load in all high-frequency insitu data for historical data analysis
insitu <- read.csv(paste0(datadir, 'insitu_temp_data_v2021-10-20.csv')) %>%
filter(!is.na(lat_dd)) %>%
mutate(datetime = as.POSIXct(datetime, tz='Etc/GMT+5'))
#number of observations for total DB
insitu %>%
summarize(nobs = length(datetime),
ndays = length(unique(format(datetime, '%Y-%m-%d'))),
year_start = min(as.numeric(format(datetime, '%Y'))),
year_end = max(as.numeric(format(datetime, '%Y'))),
min_month = min(as.numeric(format(datetime, '%m'))),
max_month = max(as.numeric(format(datetime, '%m'))),
nsites = length(unique(location)))
#number of observations between time of 9 and 11
insitu %>%
mutate(hour = as.numeric(format(datetime, '%H'))) %>%
filter(hour >= 9 & hour < 11) %>%
summarize(nobs = length(datetime),
ndays = length(unique(format(datetime, '%Y-%m-%d'))),
year_start = min(as.numeric(format(datetime, '%Y'))),
year_end = max(as.numeric(format(datetime, '%Y'))),
min_month = min(as.numeric(format(datetime, '%m'))),
max_month = max(as.numeric(format(datetime, '%m'))),
nsites = length(unique(location)))
#number of sites
length(unique(insitu$location))
unique(insitu$location)
#document max spread and IQR for C2_lst filtering
range_per_date <- insitu %>%
mutate(hour = as.numeric(format(datetime, '%H')),
date = as.Date(datetime)) %>%
filter(hour >= 9 & hour < 11) %>%
group_by(date) %>%
summarize(temp_range = max(temp_degC) - min(temp_degC),
IQR = IQR(temp_degC, na.rm = T),
n_locs = length(unique(location)))
max_spread <- max(range_per_date$temp_range, na.rm = T)
max_IQR <- max(range_per_date$IQR, na.rm = T)
range_summary <- range_per_date %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
summarise(min_range = min(temp_range, na.rm = T),
max_range = max(temp_range, na.rm = T),
min_IQR = min(IQR, na.rm = T),
max_IQR = max(IQR, na.rm = T))
insitu %>%
mutate(year = format(datetime, '%Y'),
month = as.numeric(format(datetime, '%m'))) %>%
group_by(year, location) %>%
summarise(min_depth_m = min(depth_m),
max_depth_m = max(depth_m),
min_month = min(month),
max_month = max(month)) %>%
pivot_longer(!c(year, location), names_to = 'variable', values_to = 'value') %>%
pivot_wider(id_cols = c(year, variable, value),
names_from = c(location, variable)) %>%
write.csv(., file.path(datadir, 'insitu_data_extent_summary.csv'), row.names = F)
