nsites = length(unique(location)))
#number of observations between time of 9 and 11
insitu %>%
mutate(hour = as.numeric(format(datetime, '%H'))) %>%
filter(hour >= 9 & hour < 11) %>%
summarize(nobs = length(datetime),
ndays = length(unique(format(datetime, '%Y-%m-%d'))),
year_start = min(as.numeric(format(datetime, '%Y'))),
year_end = max(as.numeric(format(datetime, '%Y'))),
min_month = min(as.numeric(format(datetime, '%m'))),
max_month = max(as.numeric(format(datetime, '%m'))),
nsites = length(unique(location)))
#number of sites
length(unique(insitu$location))
unique(insitu$location)
#document max spread and IQR for C2_lst filtering
range_per_date <- insitu %>%
mutate(hour = as.numeric(format(datetime, '%H')),
date = as.Date(datetime)) %>%
filter(hour >= 9 & hour < 11) %>%
group_by(date) %>%
summarize(temp_range = max(temp_degC) - min(temp_degC),
IQR = IQR(temp_degC, na.rm = T),
n_locs = length(unique(location)))
max_spread <- max(range_per_date$temp_range, na.rm = T)
max_IQR <- max(range_per_date$IQR, na.rm = T)
range_summary <- range_per_date %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
summarise(min_range = min(temp_range, na.rm = T),
max_range = max(temp_range, na.rm = T),
min_IQR = min(IQR, na.rm = T),
max_IQR = max(IQR, na.rm = T))
insitu %>%
mutate(year = format(datetime, '%Y'),
month = as.numeric(format(datetime, '%m'))) %>%
group_by(year, location) %>%
summarise(min_depth_m = min(depth_m),
max_depth_m = max(depth_m),
min_month = min(month),
max_month = max(month)) %>%
pivot_longer(!c(year, location), names_to = 'variable', values_to = 'value') %>%
pivot_wider(id_cols = c(year, variable, value),
names_from = c(location, variable)) %>%
write.csv(., file.path(datadir, 'insitu_data_extent_summary.csv'), row.names = F)
C2_lst_all_val <- C2_lst_all %>%
mutate(freeze_QAQC = case_when(temp_min < 0 ~ 'F', #pass/fail for freezing temps
TRUE ~ 'P')) %>%
# left_join(., modal_analysis) %>% #join with modal analysis
# mutate(unimodal_QAQC = case_when(unimodal == 'unimodal' ~ 'P',
#                                  TRUE ~ 'F')) %>%  # pass/fail for unimodality
mutate(temp_spread = round(temp_max, digits = 1) - round(temp_min, digits = 1)) %>% #calc temp spread; pass/fail for temp spread
mutate(spread_QAQC = case_when(temp_spread < max_spread*1.1 ~ 'P',
TRUE ~ 'F')) %>%
mutate(IQR = round(temp_p75, digits = 1) - round(temp_p25, digits = 1))  %>%  #calc IQR; pass/fail for temp IQR
mutate(IQR_QAQC = case_when(IQR < max_IQR*1.1 ~ 'P',
TRUE ~ 'F'))
C2_lst_filt_maxrange <- C2_lst_all_val %>%
filter(freeze_QAQC == 'P' &
# unimodal_QAQC == 'P' &
spread_QAQC == 'P')
C2_lst_filt_maxrange %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
C2_lst_filt_maxIQR <- C2_lst_all_val %>%
filter(freeze_QAQC == 'P' &
# unimodal_QAQC == 'P' &
IQR_QAQC == 'P')
C2_lst_filt_maxIQR %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
ggplot(C2_lst_all_val, aes(x = pct_lake, y = (temp_max-temp_min))) +
geom_point(aes(color = month)) +
labs(y = 'temp_spread')+
geom_abline(intercept = 1.1 * max_spread, slope = 0, lty = 2) +
final_theme
# #inner join with unimodal data and 25% of lake
# match_details_range <- match_details %>%
#   mutate(date = as.Date(date)) %>%
#   inner_join(., C2_lst_all_val) %>%
#   filter(freeze_QAQC == 'P' & unimodal_QAQC == 'P' & spread_QAQC == 'P') %>%
#   filter(perc_lake > 25)
#
# match_details_IQR <- match_details %>%
#   mutate(date = as.Date(date)) %>%
#   inner_join(., C2_lst_all_val) %>%
#   filter(freeze_QAQC == 'P' & unimodal_QAQC == 'P' & IQR_QAQC == 'P') %>%
#   filter(perc_lake > 25)
#
# #number of observations where there is a match with LS data
# match_details_range %>%
#   summarize(nobs = length(datetime),
#             ndays = length(unique(format(datetime, '%Y-%m-%d'))),
#             year_start = min(as.numeric(format(datetime, '%Y'))),
#             year_end = max(as.numeric(format(datetime, '%Y'))))
#
# length(unique(match_details_range$location))
#
# match_details_IQR %>%
#   summarize(nobs = length(datetime),
#             ndays = length(unique(format(datetime, '%Y-%m-%d'))),
#             year_start = min(as.numeric(format(datetime, '%Y'))),
#             year_end = max(as.numeric(format(datetime, '%Y'))))
#
# length(unique(match_details_IQR$location))
C2_validation_range <- C2_lst_filt_maxrange %>%
select(date, LSmission) %>%
inner_join(., C2_lst_paired)
C2_validation_IQR <- C2_lst_filt_maxIQR%>%
select(date, LSmission) %>%
inner_join(., C2_lst_paired)
val_med_ls <-deming::deming(C2_validation_range$surface_temp_median ~ C2_validation_range$temp_med)
val_med_ls
cor(C2_validation_range$surface_temp_median, C2_validation_range$temp_med)
ggplot(C2_validation_range, aes(x = temp_med, y = surface_temp_median)) +
geom_point() +
geom_abline(intercept = val_med_ls$coefficients[1], slope = val_med_ls$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_ls$ci[1,1], slope = val_med_ls$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_ls$ci[1,2], slope = val_med_ls$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
coord_cartesian(xlim = c(5,27),
ylim = c(5,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
ggsave(paste0(figdir, 'C2_deming_range_v07Oct2021.jpg'), height = 5, width = 5, units = 'in')
C2_validation_range$pred_temp_range = val_med_ls$coefficients[1] + val_med_ls$coefficients[2]*C2_validation_range$temp_med
C2_lst_insitu_dem_forresid = mcreg(x = C2_validation_range$temp_med, y = C2_validation_range$surface_temp_median, method.reg = 'Deming')
C2_validation_range$opt_resid_range = MCResult.getResiduals(C2_lst_insitu_dem_forresid)$optimized
#plot to make sure prediction is correct
ggplot(C2_validation_range, aes(x = temp_med, y = pred_temp_range))+
geom_point(color = 'blue') +
geom_point(aes(x = temp_med, y = surface_temp_median))
C2_lst_all_val <- full_join(C2_lst_all_val, C2_validation_range)
C2_validation_range <- C2_validation_range %>%
mutate(calib_range = (surface_temp_median-val_med_ls$coefficients[1])/val_med_ls$coefficients[2]) %>%
select(date, LSmission, temp_med, pred_temp_range, opt_resid_range, calib_range)
C2_lst_all_val <- C2_lst_all_val %>%
full_join(., C2_validation_range)
ggplot(C2_lst_all_val, aes(x = temp_med, y = temp_median)) +
geom_point() +
geom_point(aes(x = temp_med, y = calib_range), color = 'red')+
geom_abline(intercept = val_med_ls$coefficients[1], slope = val_med_ls$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_ls$ci[1,1], slope = val_med_ls$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_ls$ci[1,2], slope = val_med_ls$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
coord_cartesian(xlim = c(7,27),
ylim = c(7,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
C2_lst_all_val <- full_join(C2_lst_all_val, C2_validation_range)
val_med_IQR_dem <-deming::deming(C2_validation_IQR$surface_temp_median ~ C2_validation_IQR$temp_med)
val_med_IQR_dem
cor(C2_validation_IQR$surface_temp_median, C2_validation_IQR$temp_med)
ggplot(C2_validation_IQR, aes(x = temp_med, y = surface_temp_median)) +
geom_point() +
geom_abline(intercept = val_med_IQR_dem$coefficients[1], slope = val_med_IQR_dem$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_IQR_dem$ci[1,1], slope = val_med_IQR_dem$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_IQR_dem$ci[1,2], slope = val_med_IQR_dem$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
coord_cartesian(xlim = c(7,27),
ylim = c(7,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
ggsave(paste0(figdir, 'C2_deming_reg_median_IQR_v07Oct2021.jpg'), height = 5, width = 5, units = 'in')
C2_validation_IQR$pred_temp_IQR = val_med_IQR_dem$coefficients[1] + val_med_IQR_dem$coefficients[2]*C2_validation_IQR$temp_med
C2_lst_insitu_IQR_dem_forresid = mcreg(x = C2_validation_IQR$temp_med, y = C2_validation_IQR$surface_temp_median, method.reg = 'Deming')
C2_validation_IQR$opt_resid_IQR = MCResult.getResiduals(C2_lst_insitu_IQR_dem_forresid)$optimized
#plot to make sure prediction is correct
ggplot(C2_validation_IQR, aes(x = temp_med, y = pred_temp_IQR))+
geom_point(color = 'blue') +
geom_point(aes(x = temp_med, y = surface_temp_median))
C2_validation_IQR<- C2_validation_IQR %>%
mutate(calib_IQR = (surface_temp_median-val_med_IQR_dem$coefficients[1])/val_med_IQR_dem$coefficients[2])%>%
select(date, LSmission, pred_temp_IQR, opt_resid_IQR, calib_IQR)
C2_lst_all_val <- C2_lst_all_val %>%
full_join(., C2_validation_IQR)
#plot to make sure calibration is correct
ggplot(C2_lst_all_val, aes(x = temp_med, y = temp_median)) +
geom_point() +
geom_point(aes(x = temp_med, y = calib_IQR), color = 'red')+
geom_abline(intercept = val_med_IQR_dem$coefficients[1], slope = val_med_IQR_dem$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_IQR_dem$ci[1,1], slope = val_med_IQR_dem$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_IQR_dem$ci[1,2], slope = val_med_IQR_dem$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
coord_cartesian(xlim = c(7,27),
ylim = c(7,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
C2_lst_all_val <- full_join(C2_lst_all_val, C2_validation_IQR)
write.csv(C2_lst_all_val, file.path(datadir, paste0('LS_C2_QAQC_calval_v', Sys.Date(), '.csv')), row.names = F)
# load QAQC LS data
ls <- read.csv(file.path(datadir, 'LS_C2_QAQC_calval_v2021-10-08.csv')) %>%
mutate(date = as.Date(date))
View(ls)
ls_range <- ls %>%
filter(freeze_QAQC == 'P' & spread_QAQC)
ls_range <- ls %>%
filter(freeze_QAQC == 'P' & spread_QAQC == 'P')
#apply to all QAQC IQR dataset
C2_calibration_range <- C2_lst_filt_maxrange %>%
mutate(calib_range = (surface_temp_median-val_med_ls$coefficients[1])/val_med_ls$coefficients[2])%>%
select(date, LSmission, calib_range)
#apply to all QAQC IQR dataset
C2_calibration_range <- C2_lst_filt_maxrange %>%
mutate(calib_range = (temp_median-val_med_ls$coefficients[1])/val_med_ls$coefficients[2])%>%
select(date, LSmission, calib_range)
#apply to all QAQC IQR dataset
C2_calibration_IQR <- C2_lst_filt_maxIQR %>%
mutate(calib_IQR = (surface_temp_median-val_med_IQR_dem$coefficients[1])/val_med_IQR_dem$coefficients[2])%>%
select(date, LSmission, calib_IQR)
#apply to all QAQC IQR dataset
C2_calibration_IQR <- C2_lst_filt_maxIQR %>%
mutate(calib_IQR = (temp_median-val_med_IQR_dem$coefficients[1])/val_med_IQR_dem$coefficients[2])%>%
select(date, LSmission, calib_IQR)
knitr::opts_chunk$set(echo = TRUE)
source('R_library.R')
dir = '~/GitHub/ids-ne-lakes/'
datadir = '~/GitHub/ids-ne-lakes/data/'
figdir = '~/GitHub/ids-ne-lakes/figures/'
#load in all high-frequency insitu data for historical data analysis
insitu <- read.csv(paste0(datadir, 'insitu_temp_data_v2021-05-17.csv')) %>%
filter(!is.na(lat_dd)) %>%
mutate(datetime = as.POSIXct(datetime, tz='Etc/GMT+5'))
#read in all skin temp data for whole lake
C2_lst_all <- read_csv(paste0(datadir, 'colab-output/C2/sunapee_1980_2020_C2_stats.csv'),
col_types = c('')) %>%
mutate(date =as.Date(substrRight(`system:index`, 8), '%Y%m%d'),
month = as.numeric(format(date, '%m')),
year = as.factor(format(date, '%Y')),
doy = as.numeric(format(date, '%j')),
LSmission = case_when(grepl('LT04', `system:index`) ~ 'LS 4',
grepl('LT05', `system:index`) ~ 'LS 5',
grepl('LE07', `system:index`) ~ 'LS 7',
grepl('LC08', `system:index`) ~ 'LS 8')) %>%
rowid_to_column()
C2_lst_all %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
knitr::opts_chunk$set(echo = TRUE)
source('R_library.R')
dir = '~/GitHub/ids-ne-lakes/'
datadir = '~/GitHub/ids-ne-lakes/data/'
figdir = '~/GitHub/ids-ne-lakes/figures/'
#load in all high-frequency insitu data for historical data analysis
insitu <- read.csv(paste0(datadir, 'insitu_temp_data_v2021-05-17.csv')) %>%
filter(!is.na(lat_dd)) %>%
mutate(datetime = as.POSIXct(datetime, tz='Etc/GMT+5'))
#read in all skin temp data for whole lake
C2_lst_all <- read_csv(paste0(datadir, 'colab-output/C2/sunapee_1980_2020_C2_stats.csv'),
col_types = c('')) %>%
mutate(date =as.Date(substrRight(`system:index`, 8), '%Y%m%d'),
month = as.numeric(format(date, '%m')),
year = as.factor(format(date, '%Y')),
doy = as.numeric(format(date, '%j')),
LSmission = case_when(grepl('LT04', `system:index`) ~ 'LS 4',
grepl('LT05', `system:index`) ~ 'LS 5',
grepl('LE07', `system:index`) ~ 'LS 7',
grepl('LC08', `system:index`) ~ 'LS 8')) %>%
rowid_to_column()
C2_lst_all %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
# REPLACE WITH REAL FILE LATER
C2_lst_paired <- read_csv(paste0(datadir, 'colab-output/C2/temporary_sunapee_stats_paired_C2.csv'),
col_types = c(''))
#number of observations for total DB
insitu %>%
summarize(nobs = length(datetime),
ndays = length(unique(format(datetime, '%Y-%m-%d'))),
year_start = min(as.numeric(format(datetime, '%Y'))),
year_end = max(as.numeric(format(datetime, '%Y'))),
min_month = min(as.numeric(format(datetime, '%m'))),
max_month = max(as.numeric(format(datetime, '%m'))),
nsites = length(unique(location)))
#number of observations between time of 9 and 11
insitu %>%
mutate(hour = as.numeric(format(datetime, '%H'))) %>%
filter(hour >= 9 & hour < 11) %>%
summarize(nobs = length(datetime),
ndays = length(unique(format(datetime, '%Y-%m-%d'))),
year_start = min(as.numeric(format(datetime, '%Y'))),
year_end = max(as.numeric(format(datetime, '%Y'))),
min_month = min(as.numeric(format(datetime, '%m'))),
max_month = max(as.numeric(format(datetime, '%m'))),
nsites = length(unique(location)))
#number of sites
length(unique(insitu$location))
unique(insitu$location)
#document max spread and IQR for C2_lst filtering
range_per_date <- insitu %>%
mutate(hour = as.numeric(format(datetime, '%H')),
date = as.Date(datetime)) %>%
filter(hour >= 9 & hour < 11) %>%
group_by(date) %>%
summarize(temp_range = max(temp_degC) - min(temp_degC),
IQR = IQR(temp_degC, na.rm = T),
n_locs = length(unique(location)))
max_spread <- max(range_per_date$temp_range, na.rm = T)
max_IQR <- max(range_per_date$IQR, na.rm = T)
range_summary <- range_per_date %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
summarise(min_range = min(temp_range, na.rm = T),
max_range = max(temp_range, na.rm = T),
min_IQR = min(IQR, na.rm = T),
max_IQR = max(IQR, na.rm = T))
insitu %>%
mutate(year = format(datetime, '%Y'),
month = as.numeric(format(datetime, '%m'))) %>%
group_by(year, location) %>%
summarise(min_depth_m = min(depth_m),
max_depth_m = max(depth_m),
min_month = min(month),
max_month = max(month)) %>%
pivot_longer(!c(year, location), names_to = 'variable', values_to = 'value') %>%
pivot_wider(id_cols = c(year, variable, value),
names_from = c(location, variable)) %>%
write.csv(., file.path(datadir, 'insitu_data_extent_summary.csv'), row.names = F)
C2_lst_all_val <- C2_lst_all %>%
mutate(freeze_QAQC = case_when(temp_min < 0 ~ 'F', #pass/fail for freezing temps
TRUE ~ 'P')) %>%
# left_join(., modal_analysis) %>% #join with modal analysis
# mutate(unimodal_QAQC = case_when(unimodal == 'unimodal' ~ 'P',
#                                  TRUE ~ 'F')) %>%  # pass/fail for unimodality
mutate(temp_spread = round(temp_max, digits = 1) - round(temp_min, digits = 1)) %>% #calc temp spread; pass/fail for temp spread
mutate(spread_QAQC = case_when(temp_spread < max_spread*1.1 ~ 'P',
TRUE ~ 'F')) %>%
mutate(IQR = round(temp_p75, digits = 1) - round(temp_p25, digits = 1))  %>%  #calc IQR; pass/fail for temp IQR
mutate(IQR_QAQC = case_when(IQR < max_IQR*1.1 ~ 'P',
TRUE ~ 'F'))
C2_lst_filt_maxrange <- C2_lst_all_val %>%
filter(freeze_QAQC == 'P' &
# unimodal_QAQC == 'P' &
spread_QAQC == 'P')
C2_lst_filt_maxrange %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
C2_lst_filt_maxIQR <- C2_lst_all_val %>%
filter(freeze_QAQC == 'P' &
# unimodal_QAQC == 'P' &
IQR_QAQC == 'P')
C2_lst_filt_maxIQR %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
# ggplot(C2_lst_all_val, aes(x = pct_lake, y = (temp_max-temp_min))) +
#   geom_point(aes(color = month)) +
#   labs(y = 'temp_spread')+
#   geom_abline(intercept = 1.1 * max_spread, slope = 0, lty = 2) +
#   final_theme
# ggsave(file.path(figdir, 'C2 tempspread by pct lake by month summary.png'))
#
# ggplot(C2_lst_all_val, aes(x = pct_lake, y = (temp_p75-temp_p25))) +
#   geom_point(aes(color = month)) +
#   labs(y = 'temp_IQR')+
#     geom_abline(intercept = 1.1 * max_IQR, slope = 0, lty = 2) +
# final_theme
# ggsave(file.path(figdir, 'C2 temp IQR by pct lake by month summary.png'))
#
# ggplot(C2_lst_filt_maxrange, aes(x = pct_lake, y = temp_spread)) +
#   geom_point(aes(color = month)) +
#   final_theme
# ggsave(file.path(figdir, 'C2 filtered tempspread by pct lake by month summary.png'))
#
# ggplot(C2_lst_filt_maxIQR, aes(x = pct_lake, y = IQR)) +
#   geom_point(aes(color = month)) +
#   final_theme
# ggsave(file.path(figdir, 'C2 filtered temp IQR by pct lake by month summary.png'))
# #inner join with unimodal data and 25% of lake
# match_details_range <- match_details %>%
#   mutate(date = as.Date(date)) %>%
#   inner_join(., C2_lst_all_val) %>%
#   filter(freeze_QAQC == 'P' & unimodal_QAQC == 'P' & spread_QAQC == 'P') %>%
#   filter(perc_lake > 25)
#
# match_details_IQR <- match_details %>%
#   mutate(date = as.Date(date)) %>%
#   inner_join(., C2_lst_all_val) %>%
#   filter(freeze_QAQC == 'P' & unimodal_QAQC == 'P' & IQR_QAQC == 'P') %>%
#   filter(perc_lake > 25)
#
# #number of observations where there is a match with LS data
# match_details_range %>%
#   summarize(nobs = length(datetime),
#             ndays = length(unique(format(datetime, '%Y-%m-%d'))),
#             year_start = min(as.numeric(format(datetime, '%Y'))),
#             year_end = max(as.numeric(format(datetime, '%Y'))))
#
# length(unique(match_details_range$location))
#
# match_details_IQR %>%
#   summarize(nobs = length(datetime),
#             ndays = length(unique(format(datetime, '%Y-%m-%d'))),
#             year_start = min(as.numeric(format(datetime, '%Y'))),
#             year_end = max(as.numeric(format(datetime, '%Y'))))
#
# length(unique(match_details_IQR$location))
C2_validation_range <- C2_lst_filt_maxrange %>%
select(date, LSmission) %>%
inner_join(., C2_lst_paired)
C2_validation_IQR <- C2_lst_filt_maxIQR%>%
select(date, LSmission) %>%
inner_join(., C2_lst_paired)
val_med_ls <-deming::deming(C2_validation_range$surface_temp_median ~ C2_validation_range$temp_med)
val_med_ls
cor(C2_validation_range$surface_temp_median, C2_validation_range$temp_med)
ggplot(C2_validation_range, aes(x = temp_med, y = surface_temp_median)) +
geom_point() +
geom_abline(intercept = val_med_ls$coefficients[1], slope = val_med_ls$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_ls$ci[1,1], slope = val_med_ls$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_ls$ci[1,2], slope = val_med_ls$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
coord_cartesian(xlim = c(5,27),
ylim = c(5,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
ggsave(paste0(figdir, 'C2_deming_range_v07Oct2021.jpg'), height = 5, width = 5, units = 'in')
C2_validation_range$pred_temp_range = val_med_ls$coefficients[1] + val_med_ls$coefficients[2]*C2_validation_range$temp_med
C2_lst_insitu_dem_forresid = mcreg(x = C2_validation_range$temp_med, y = C2_validation_range$surface_temp_median, method.reg = 'Deming')
C2_validation_range$opt_resid_range = MCResult.getResiduals(C2_lst_insitu_dem_forresid)$optimized
#plot to make sure prediction is correct
ggplot(C2_validation_range, aes(x = temp_med, y = pred_temp_range))+
geom_point(color = 'blue') +
geom_point(aes(x = temp_med, y = surface_temp_median))
C2_validation_range <- C2_validation_range %>%
mutate(calib_range = (surface_temp_median-val_med_ls$coefficients[1])/val_med_ls$coefficients[2]) %>%
select(date, LSmission, temp_med, pred_temp_range, opt_resid_range, calib_range)
#apply to all QAQC IQR dataset
C2_calibration_range <- C2_lst_filt_maxrange %>%
mutate(calib_range = (temp_median-val_med_ls$coefficients[1])/val_med_ls$coefficients[2])%>%
select(date, LSmission, calib_range)
C2_lst_all_val <- C2_lst_all_val %>%
full_join(., C2_validation_range)
ggplot(C2_lst_all_val, aes(x = temp_med, y = temp_median)) +
geom_point() +
geom_point(aes(x = temp_med, y = calib_range), color = 'red')+
geom_abline(intercept = val_med_ls$coefficients[1], slope = val_med_ls$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_ls$ci[1,1], slope = val_med_ls$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_ls$ci[1,2], slope = val_med_ls$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
coord_cartesian(xlim = c(7,27),
ylim = c(7,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
C2_lst_all_val <- full_join(C2_lst_all_val, C2_calibration_range)
val_med_IQR_dem <-deming::deming(C2_validation_IQR$surface_temp_median ~ C2_validation_IQR$temp_med)
val_med_IQR_dem
cor(C2_validation_IQR$surface_temp_median, C2_validation_IQR$temp_med)
ggplot(C2_validation_IQR, aes(x = temp_med, y = surface_temp_median)) +
geom_point() +
geom_abline(intercept = val_med_IQR_dem$coefficients[1], slope = val_med_IQR_dem$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_IQR_dem$ci[1,1], slope = val_med_IQR_dem$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_IQR_dem$ci[1,2], slope = val_med_IQR_dem$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
coord_cartesian(xlim = c(7,27),
ylim = c(7,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
ggsave(paste0(figdir, 'C2_deming_reg_median_IQR_v07Oct2021.jpg'), height = 5, width = 5, units = 'in')
C2_validation_IQR$pred_temp_IQR = val_med_IQR_dem$coefficients[1] + val_med_IQR_dem$coefficients[2]*C2_validation_IQR$temp_med
C2_lst_insitu_IQR_dem_forresid = mcreg(x = C2_validation_IQR$temp_med, y = C2_validation_IQR$surface_temp_median, method.reg = 'Deming')
C2_validation_IQR$opt_resid_IQR = MCResult.getResiduals(C2_lst_insitu_IQR_dem_forresid)$optimized
#plot to make sure prediction is correct
ggplot(C2_validation_IQR, aes(x = temp_med, y = pred_temp_IQR))+
geom_point(color = 'blue') +
geom_point(aes(x = temp_med, y = surface_temp_median))
#apply to the validation set
C2_validation_IQR<- C2_validation_IQR %>%
mutate(calib_IQR = (surface_temp_median-val_med_IQR_dem$coefficients[1])/val_med_IQR_dem$coefficients[2])%>%
select(date, LSmission, pred_temp_IQR, opt_resid_IQR, calib_IQR)
#apply to all QAQC IQR dataset
C2_calibration_IQR <- C2_lst_filt_maxIQR %>%
mutate(calib_IQR = (temp_median-val_med_IQR_dem$coefficients[1])/val_med_IQR_dem$coefficients[2])%>%
select(date, LSmission, calib_IQR)
C2_lst_all_val <- C2_lst_all_val %>%
full_join(., C2_validation_IQR)
#plot to make sure calibration is correct
ggplot(C2_lst_all_val, aes(x = temp_med, y = temp_median)) +
geom_point() +
geom_point(aes(x = temp_med, y = calib_IQR), color = 'red')+
geom_abline(intercept = val_med_IQR_dem$coefficients[1], slope = val_med_IQR_dem$coefficients[2], color = 'blue') +
geom_abline(intercept = val_med_IQR_dem$ci[1,1], slope = val_med_IQR_dem$ci[2,1], color = 'blue', linetype = 2) +
geom_abline(intercept = val_med_IQR_dem$ci[1,2], slope = val_med_IQR_dem$ci[2,2], color = 'blue', linetype = 2) +
geom_abline(intercept = 0, slope = 1) +
coord_cartesian(xlim = c(7,27),
ylim = c(7,27)) +
labs(y = 'satellite-derived median\nskin temperature (deg C)',
x = expression(paste(italic('in-situ'), ' median water temp (deg C)'))) +
final_theme
C2_lst_all_val <- full_join(C2_lst_all_val, C2_calibration_IQR)
write.csv(C2_lst_all_val, file.path(datadir, paste0('LS_C2_QAQC_calval_v', Sys.Date(), '.csv')), row.names = F)
source('scripts/R_library.R')
figdir = 'figures/'
datadir = 'data/'
lmp <- read.csv('https://raw.githubusercontent.com/Lake-Sunapee-Protective-Association/LMP/main/master%20files/LSPALMP_1986-2020_v2021-03-29.csv')
lmp_temp_deep <- lmp %>%
filter(parameter == 'temp_C') %>%
filter(station == 200 | station ==210 | station == 220| station==230) %>%
filter(depth_m == 0.5)
# load QAQC LS data
ls <- read.csv(file.path(datadir, 'LS_C2_QAQC_calval_v2021-10-08.csv')) %>%
mutate(date = as.Date(date))
ls_range <- ls %>%
filter(freeze_QAQC == 'P' & spread_QAQC == 'P')
ls_IQR <- ls %>%
filter(freeze_QAQC == 'P' & IQR_QAQC == 'P')
