<<<<<<< Updated upstream
=======
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month, LSmission) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid)/n()), digits = 2),
n_obs = n()) %>%
pivot_longer(!c(month, LSmission), names_to = 'variable', values_to = 'values') %>%
pivot_wider(id_cols = c(LSmission,  values, variable),
names_from = c(month, variable),
values_from = values) %>%
arrange(LSmission)
# by month
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid)/n()), digits = 2),
n_obs = n())
# by month
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid)/n()), digits = 2),
n_obs = n()) %>%
select(month, n_obs, mae, rmse, bias)
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month, LSmission) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid)/n()), digits = 2),
n_obs = n()) %>%
pivot_longer(!c(month, LSmission), names_to = 'variable', values_to = 'values') %>%
pivot_wider(id_cols = c(LSmission,  values, variable),
names_from = c(month, variable),
values_from = values) %>%
arrange(LSmission)
#by month and mission
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month, LSmission) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid)/n()), digits = 2),
n_obs = n()) %>%
pivot_longer(!c(month, LSmission), names_to = 'variable', values_to = 'values') %>%
pivot_wider(id_cols = c(LSmission,  values, variable),
names_from = c(month, variable),
values_from = values) %>%
filter(variable == 'n_obs' | variable == 'mae' | variable == 'rmse' | variable == 'bias') %>%
arrange(LSmission)
#by month and mission
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month, LSmission) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid)/n()), digits = 2),
n_obs = n()) %>%
pivot_longer(!c(month, LSmission), names_to = 'variable', values_to = 'values') %>%
filter(variable == 'n_obs' | variable == 'mae' | variable == 'rmse' | variable == 'bias') %>%
pivot_wider(id_cols = c(LSmission,  values, variable),
names_from = c(month, variable),
values_from = values) %>%
arrange(LSmission)
#by month and mission
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month, LSmission) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid)/n()), digits = 2),
n_obs = n()) %>%
pivot_longer(!c(month, LSmission), names_to = 'variable', values_to = 'values') %>%
filter(variable == 'n_obs' | variable == 'mae' | variable == 'rmse' | variable == 'bias') %>%
mutate(variable = factor(variable, levels = c('n_obs', 'mae', 'rmse', 'bias'))) %>%
pivot_wider(id_cols = c(LSmission,  values, variable),
names_from = c(month, variable),
values_from = values) %>%
arrange(LSmission)
#by month and mission
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month, LSmission) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid)/n()), digits = 2),
n_obs = n()) %>%
pivot_longer(!c(month, LSmission), names_to = 'variable', values_to = 'values') %>%
filter(variable == 'n_obs' | variable == 'mae' | variable == 'rmse' | variable == 'bias') %>%
mutate(variable = factor(variable, levels = c('n_obs', 'mae', 'rmse', 'bias'))) %>%
arrange(variable) %>%
pivot_wider(id_cols = c(LSmission,  values, variable),
names_from = c(month, variable),
values_from = values) %>%
arrange(LSmission)
#by month and mission
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month, LSmission) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid)/n()), digits = 2),
n_obs = n()) %>%
pivot_longer(!c(month, LSmission), names_to = 'variable', values_to = 'values') %>%
filter(variable == 'n_obs' | variable == 'mae' | variable == 'rmse' | variable == 'bias') %>%
mutate(variable = factor(variable, levels = c('n_obs', 'mae', 'rmse', 'bias'))) %>%
arrange(month, variable) %>%
pivot_wider(id_cols = c(LSmission,  values, variable),
names_from = c(month, variable),
values_from = values) %>%
arrange(LSmission)
#by month and mission
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month, LSmission) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid)/n()), digits = 2),
n_obs = n()) %>%
pivot_longer(!c(month, LSmission), names_to = 'variable', values_to = 'values') %>%
filter(variable == 'n_obs' | variable == 'mae' | variable == 'rmse' | variable == 'bias') %>%
mutate(variable = factor(variable, levels = c('n_obs', 'mae', 'rmse', 'bias'))) %>%
arrange(month, variable) %>%
pivot_wider(id_cols = c(LSmission,  values, variable),
names_from = c(month, variable),
values_from = values) %>%
arrange(LSmission) %>%
write.csv(., file.path(datadir, 'LS_deming_prediction_stats_v29June2021.csv'))
# calculate mse with optomized residuals
#all data
validation %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid))/n(), digits = 2),
n_obs = n())
# by month
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid))/n(), digits = 2),
n_obs = n()) %>%
select(month, n_obs, mae, rmse, bias)
#by month and mission
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month, LSmission) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid))/n(), digits = 2),
n_obs = n()) %>%
pivot_longer(!c(month, LSmission), names_to = 'variable', values_to = 'values') %>%
filter(variable == 'n_obs' | variable == 'mae' | variable == 'rmse' | variable == 'bias') %>%
mutate(variable = factor(variable, levels = c('n_obs', 'mae', 'rmse', 'bias'))) %>%
arrange(month, variable) %>%
pivot_wider(id_cols = c(LSmission,  values, variable),
names_from = c(month, variable),
values_from = values) %>%
arrange(LSmission) %>%
write.csv(., file.path(datadir, 'LS_deming_prediction_stats_v29June2021.csv'))
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month, LSmission) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid))/n(), digits = 2),
n_obs = n()) %>%
pivot_longer(!c(month, LSmission), names_to = 'variable', values_to = 'values') %>%
filter(variable == 'n_obs' | variable == 'mae' | variable == 'rmse' | variable == 'bias') %>%
mutate(variable = factor(variable, levels = c('n_obs', 'mae', 'rmse', 'bias'))) %>%
arrange(month, variable) %>%
pivot_wider(id_cols = c(LSmission,  values, variable),
names_from = c(month, variable),
values_from = values) %>%
arrange(LSmission)
View(val_mean_dem)
#plot to make sure prediction is correct
ggplot(validation, aes(x = temp_med, y = pred_temp))+
geom_point(color = 'blue') +
geom_point(aes(x = temp_med, y = surface_temp_median))
# calculate mse with optomized residuals
#all data
validation %>%
summarise(mse = round(sum(((temp_pred - temp_med)^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum((temp_pred - temp_med))/n(), digits = 2),
mae = round(sum(abs((temp_pred - temp_med)))/n(), digits = 2),
n_obs = n())
# calculate mse with optomized residuals
#all data
validation %>%
summarise(mse = round(sum(((pred_temp - temp_med)^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum((pred_temp - temp_med))/n(), digits = 2),
mae = round(sum(abs((pred_temp - temp_med)))/n(), digits = 2),
n_obs = n())
# calculate mse with optomized residuals
#all data
validation %>%
summarise(mse = round(sum((pred_temp - temp_med)^2)/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum((pred_temp - temp_med))/n(), digits = 2),
mae = round(sum(abs((pred_temp - temp_med)))/n(), digits = 2),
n_obs = n())
# calculate mse with optomized residuals
#all data
validation %>%
summarise(mse = round(sum((pred_temp - temp_med)^2)/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(pred_temp - temp_med)/n(), digits = 2),
mae = round(sum(abs(pred_temp - temp_med))/n(), digits = 2),
n_obs = n())
# by month
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid))/n(), digits = 2),
n_obs = n()) %>%
select(month, n_obs, mae, rmse, bias)
# by month
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid))/n(), digits = 2),
n_obs = n()) %>%
select(month, n_obs, mae, rmse, bias) %>%
pivot_longer(!c(month), names_to = 'variable', values_to = 'values') %>%
mutate(variable = factor(variable, levels = c('n_obs', 'mae', 'rmse', 'bias'))) %>%
arrange(month, variable) %>%
pivot_wider(id_cols = c(month,  values, variable),
names_from = c(variable),
values_from = values)
# by month
validation %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid))/n(), digits = 2),
n_obs = n()) %>%
select(month, n_obs, mae, rmse, bias) %>%
write.csv(., file.path(datadir, 'LS_deming_prediction_stats_allmissions_v29June2021.csv'))
buoy_data_summary_flyover <- insitu %>%
filter(location == 'loon') %>%
mutate(hour = as.numeric(format(datetime, '%H')),
year = as.factor(format(datetime, '%Y')),
day = as.factor(format(datetime, '%d'))) %>%
filter(hour >=9 & hour <11)
buoy_data_summary_flyover <- insitu %>%
filter(location == 'loon') %>%
mutate(hour = as.numeric(format(datetime, '%H')),
year = as.factor(format(datetime, '%Y')),
day = as.factor(format(datetime, '%d'))) %>%
filter(hour >=9 & hour <11)
QC_check <- buoy_data_summary_flyover %>%
group_by(month, year) %>%
summarise(ndays = length(unique(day))) %>%
filter(ndays >= 15)
buoy_data_summary_flyover <- buoy_data_summary_flyover %>%
right_join(., QC_check)
ggplot(buoy_data_summary_flyover, aes(x = month, y = temp_degC, fill = year)) +
geom_boxplot(aes(group = paste(year, month))) +
final_theme +
scale_x_continuous(breaks = c(5, 6,7,8,9,10,11), labels = c('May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov')) +
scale_y_continuous(n.breaks = 8) +
labs(y = 'water temperature (deg C)')
ggsave(paste0(figdir, 'water_temp_buoy_interannual_v29June2021.png'), width = 8, height = 4, units = 'in')
insitu_2018 <- insitu %>%
mutate(year = as.numeric(format(datetime, '%Y'))) %>%
filter(year == 2018)%>%
mutate(hour = as.numeric(format(datetime, '%H')),
year = as.factor(format(datetime, '%Y')),
day = as.factor(format(datetime, '%d'))) %>%
filter(hour >=9 & hour <11)
insitu_2018 <- insitu %>%
mutate(year = as.numeric(format(datetime, '%Y'))) %>%
filter(year == 2018)%>%
mutate(hour = as.numeric(format(datetime, '%H')),
year = as.factor(format(datetime, '%Y')),
day = as.factor(format(datetime, '%d'))) %>%
filter(hour >=9 & hour <11)
QC_check_2018 <- insitu_2018 %>%
group_by(month, year, location) %>%
summarise(ndays = length(unique(day))) %>%
filter(ndays >= 15)
QC_check_2018 <- insitu_2018 %>%
group_by(month, year, location) %>%
summarise(ndays = length(unique(day))) %>%
filter(ndays >= 15)
insitu_2018 <- insitu_2018 %>%
right_join(., QC_check_2018) %>%
mutate(location = as.factor(location)) %>%
filter(month >=6 & month <10) #filter for months that have multiple locations
unique(insitu_2018$location)
insitu_2018 <- insitu_2018 %>%
mutate(location_long = case_when(location == 'loon' ~ 'primary (LSPA/GLEON) buoy',
location == 'GeorgesMills' ~ 'Georges Mills buoy',
location == 'HerrickCove' ~ 'Herrick Cove buoy',
location == 'StateBeach' ~ 'State Beach buoy',
location == 'HerrickCoveSouth' ~ 'Herrick Cove near-shore',
>>>>>>> Stashed changes
location == 'Newbury' ~ 'Newbury near-shore',
location == 'NorthSunapeeHarbor' ~ 'North Sunapee Harbor near-shore',
location == 'SouthOfTheFells' ~ 'South of the Fells near-shore'),
location_long = factor(location_long, levels = c('primary (LSPA/GLEON) buoy','Georges Mills buoy','Herrick Cove buoy','State Beach buoy','Herrick Cove near-shore','Newbury near-shore','North Sunapee Harbor near-shore','South of the Fells near-shore')))
ggplot(insitu_2018, aes(x = month, y = temp_degC, fill = location_long)) +
geom_boxplot(aes(group = paste(month, location_long))) +
final_theme +
scale_x_continuous(breaks = c(6,7,8,9), labels = c('Jun', 'Jul', 'Aug', 'Sept')) +
scale_y_continuous(n.breaks = 8) +
labs(y = 'water temperature (deg C)') +
labs(fill = 'location') +
theme(legend.spacing.y = unit(0.1, 'cm')) +
guides()
ggplot(insitu_2018, aes(x = month, y = temp_degC, fill = location_long)) +
geom_boxplot(aes(group = paste(location_long, month))) +
final_theme +
scale_x_continuous(breaks = c(6,7,8,9), labels = c('Jun', 'Jul', 'Aug', 'Sept')) +
scale_y_continuous(n.breaks = 8) +
labs(y = 'water temperature (deg C)') +
labs(fill = 'location') +
theme(legend.spacing.y = unit(0.1, 'cm')) +
guides()
insitu_2018 <- insitu_2018 %>%
mutate(location_long = case_when(location == 'loon' ~ 'primary (LSPA/GLEON) buoy',
location == 'GeorgesMills' ~ 'Georges Mills buoy',
location == 'HerrickCove' ~ 'Herrick Cove buoy',
location == 'StateBeach' ~ 'State Beach buoy',
location == 'HerrickCoveSouth' ~ 'Herrick Cove near-shore',
location == 'Newbury' ~ 'Newbury near-shore',
location == 'NorthSunapeeHarbor' ~ 'North Sunapee Harbor near-shore',
location == 'SouthOfTheFells' ~ 'South of the Fells near-shore'),
location_long = factor(location_long, levels = c('primary (LSPA/GLEON) buoy','Georges Mills buoy','Herrick Cove buoy','State Beach buoy','Herrick Cove near-shore','Newbury near-shore','North Sunapee Harbor near-shore','South of the Fells near-shore'), ordered = T))
ggplot(insitu_2018, aes(x = month, y = temp_degC, fill = location_long)) +
geom_boxplot(aes(group = paste(location_long, month))) +
final_theme +
scale_x_continuous(breaks = c(6,7,8,9), labels = c('Jun', 'Jul', 'Aug', 'Sept')) +
scale_y_continuous(n.breaks = 8) +
labs(y = 'water temperature (deg C)') +
labs(fill = 'location') +
theme(legend.spacing.y = unit(0.1, 'cm')) +
guides()
ggsave(paste0(figdir, 'water_temp_2018_crosssite.png'), width = 8, height = 4, units = 'in')
ggplot(insitu_2018, aes(x = month, y = temp_degC, fill = location_long)) +
geom_boxplot(aes(group = paste(location_long, month)))  +
scale_x_continuous(breaks = c(6,7,8,9), labels = c('Jun', 'Jul', 'Aug', 'Sept')) +
scale_y_continuous(n.breaks = 8) +
labs(y = 'water temperature (deg C)') +
labs(fill = 'location') +
theme(legend.spacing.y = unit(0.1, 'cm')) +
guides()+
final_theme
ggplot(insitu_2018, aes(x = month, y = temp_degC, fill = location_long)) +
geom_boxplot(aes(group = paste(location_long, month)))  +
scale_x_continuous(breaks = c(6,7,8,9), labels = c('Jun', 'Jul', 'Aug', 'Sept')) +
scale_y_continuous(n.breaks = 8) +
labs(y = 'water temperature (deg C)') +
labs(fill = 'location') +
theme(legend.spacing.y = unit(0.1, 'cm')) +
guides()+
final_theme +
scale_fill_colorblind()
ggsave(paste0(figdir, 'water_temp_2018_crosssite_v29June2021.png'), width = 8, height = 4, units = 'in')
ggplot(insitu_2018, aes(x = month, y = temp_degC, fill = location_long)) +
geom_boxplot(aes(group = paste(location_long, month)))  +
scale_x_continuous(breaks = c(6,7,8,9), labels = c('Jun', 'Jul', 'Aug', 'Sept')) +
scale_y_continuous(n.breaks = 8) +
labs(y = 'water temperature (deg C)') +
labs(fill = 'location') +
theme(legend.spacing.y = unit(0.1, 'cm')) +
guides()+
final_theme
ggplot(insitu_2018, aes(x = month, y = temp_degC, fill = location_long)) +
scale_fill_colorblind() +
geom_boxplot(aes(group = paste(location_long, month)))  +
scale_x_continuous(breaks = c(6,7,8,9), labels = c('Jun', 'Jul', 'Aug', 'Sept')) +
scale_y_continuous(n.breaks = 8) +
labs(y = 'water temperature (deg C)') +
labs(fill = 'location') +
theme(legend.spacing.y = unit(0.1, 'cm')) +
guides()+
final_theme
insitu_2018 <- insitu_2018 %>%
mutate(location_long = case_when(location == 'loon' ~ 'primary (LSPA/GLEON) buoy',
location == 'GeorgesMills' ~ 'Georges Mills buoy',
location == 'HerrickCove' ~ 'Herrick Cove buoy',
location == 'StateBeach' ~ 'State Beach buoy',
location == 'HerrickCoveSouth' ~ 'Herrick Cove near-shore',
location == 'Newbury' ~ 'Newbury near-shore',
location == 'NorthSunapeeHarbor' ~ 'North Sunapee Harbor near-shore',
location == 'SouthOfTheFells' ~ 'South of the Fells near-shore'),
location_long = factor(location_long, levels = c('primary (LSPA/GLEON) buoy','Georges Mills buoy','Herrick Cove buoy','State Beach buoy','Herrick Cove near-shore','Newbury near-shore','North Sunapee Harbor near-shore','South of the Fells near-shore'), ordered = T)) %>%
arrange(location_long, datetime)
ggplot(insitu_2018, aes(x = month, y = temp_degC, fill = location_long)) +
scale_fill_colorblind() +
geom_boxplot(aes(group = paste(location_long, month)))  +
scale_x_continuous(breaks = c(6,7,8,9), labels = c('Jun', 'Jul', 'Aug', 'Sept')) +
scale_y_continuous(n.breaks = 8) +
labs(y = 'water temperature (deg C)') +
labs(fill = 'location') +
theme(legend.spacing.y = unit(0.1, 'cm')) +
guides()+
final_theme
insitu_2018 <- insitu_2018 %>%
mutate(location_long = case_when(location == 'loon' ~ 'primary (LSPA/GLEON) buoy',
location == 'GeorgesMills' ~ 'Georges Mills buoy',
location == 'HerrickCove' ~ 'Herrick Cove buoy',
location == 'StateBeach' ~ 'State Beach buoy',
location == 'HerrickCoveSouth' ~ 'Herrick Cove near-shore',
location == 'Newbury' ~ 'Newbury near-shore',
location == 'NorthSunapeeHarbor' ~ 'North Sunapee Harbor near-shore',
location == 'SouthOfTheFells' ~ 'South of the Fells near-shore'),
location_long = factor(location_long, levels = c('primary (LSPA/GLEON) buoy','Georges Mills buoy','Herrick Cove buoy','State Beach buoy','Herrick Cove near-shore','Newbury near-shore','North Sunapee Harbor near-shore','South of the Fells near-shore'), ordered = T)) %>%
arrange(location_long)
ggplot(insitu_2018, aes(x = month, y = temp_degC, fill = location_long)) +
scale_fill_colorblind() +
geom_boxplot(aes(group = paste(location_long, month)))  +
scale_x_continuous(breaks = c(6,7,8,9), labels = c('Jun', 'Jul', 'Aug', 'Sept')) +
scale_y_continuous(n.breaks = 8) +
labs(y = 'water temperature (deg C)') +
labs(fill = 'location') +
theme(legend.spacing.y = unit(0.1, 'cm')) +
guides()+
final_theme
ggplot(insitu_2018, aes(x = month, y = temp_degC, fill = location_long)) +
geom_boxplot(aes(group = paste(location_long, month)))  +
scale_x_continuous(breaks = c(6,7,8,9), labels = c('Jun', 'Jul', 'Aug', 'Sept')) +
scale_y_continuous(n.breaks = 8) +
labs(y = 'water temperature (deg C)') +
labs(fill = 'location') +
theme(legend.spacing.y = unit(0.1, 'cm')) +
guides()+
final_theme
ggplot(insitu_2018, aes(x = month, y = temp_degC, fill = location_long)) +
scale_fill_canva() +
geom_boxplot(aes(group = paste(location_long, month)))  +
scale_x_continuous(breaks = c(6,7,8,9), labels = c('Jun', 'Jul', 'Aug', 'Sept')) +
scale_y_continuous(n.breaks = 8) +
labs(y = 'water temperature (deg C)') +
labs(fill = 'location') +
theme(legend.spacing.y = unit(0.1, 'cm')) +
guides()+
final_theme
ggplot(insitu_2018, aes(x = month, y = temp_degC, fill = location_long)) +
geom_boxplot(aes(group = paste(location_long, month)))  +
scale_x_continuous(breaks = c(6,7,8,9), labels = c('Jun', 'Jul', 'Aug', 'Sept')) +
scale_y_continuous(n.breaks = 8) +
labs(y = 'water temperature (deg C)') +
labs(fill = 'location') +
theme(legend.spacing.y = unit(0.1, 'cm')) +
guides()+
final_theme
insitu %>%
mutate(hour = as.numeric(format(datetime, '%H')),
<<<<<<< Updated upstream
year = as.factor(format(datetime, '%Y')),
day = as.factor(format(datetime, '%d'))) %>%
filter(hour >=10 & hour <12)
QC_check <- buoy_data_summary_flyover %>%
group_by(month, year) %>%
summarise(ndays = length(unique(day))) %>%
filter(ndays >= 15)
buoy_data_summary_flyover <- buoy_data_summary_flyover %>%
right_join(., QC_check)
ggplot(buoy_data_summary_flyover, aes(x = month, y = temp_degC, fill = year)) +
geom_boxplot(aes(group = paste(year, month))) +
final_theme +
scale_x_continuous(breaks = c(5, 6,7,8,9,10,11), labels = c('May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov')) +
scale_y_continuous(n.breaks = 8) +
labs(y = 'water temperature (deg C)')
ggsave(paste0(figdir, 'water_temp_buoy_interannual.png'), width = 8, height = 4, units = 'in')
lst_unimodal <- lst_all %>%
filter(surface_temp_min>0)
lst_unimodal <- lst_all %>%
filter(skew < 1 & skew >-1)
lst_unimodal <- lst_all %>%
filter(surface_temp_skew < 1 & surface_temp_skew >-1)
lst_unimodal <- lst_all %>%
filter(surface_temp_min>0)
lst_unimodal <- lst_unimodal %>%
filter(surface_temp_skew < 1 & surface_temp_skew >-1)
read.csv(file.path(datadir, 'temp_zonal_stats_sunapee_2018_06_16.csv')
read.csv(file.path(datadir, 'temp_zonal_stats_sunapee_2018_06_16.csv'))
read.delim(file.path(datadir, 'in-situ locs/2018_hg_locs.txt'))
read.delim(file.path(datadir, 'in-situ locs/2018_hf_locs.txt'))
read.delim(file.path(datadir, 'in-situ locs/2018_hf_locs.txt'), sep = ',')
ls2018 <- read.csv(file.path(datadir, 'temp_zonal_stats_sunapee_2018_06_16.csv'))
locs2018 <- read.delim(file.path(datadir, 'in-situ locs/2018_hf_locs.txt'), sep = ',')
library(tidyverse)
#point to data directory
datadir = 'data/colab-output/2021-06-08/'
final_theme=theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
plot.title=element_text(size=16, face='bold', hjust=0.5))
#load file
temp_histo <- read.csv(file.path(datadir, 'sunapee_histograms_0p1bin.csv'))
#transform and rename
temp_histo <- temp_histo %>%
gather(date, count, -bin) %>%
mutate(date = substr(date, 2, 9),
date = as.Date(date, format = '%Y%m%d'),
bin = as.numeric(bin),
count = as.numeric(count)) %>%
rename(temp_degC = bin)
View(temp_histo)
#total number of pixels in lake sunapee
sun_n_pixels <- 23640
image_pixels <- temp_histo %>%
group_by(date) %>%
summarise(tot_pix = sum(count)) %>%
mutate(perc_lake = round((tot_pix/sun_n_pixels)*100, digits = 2))
#filter for counts that aren't null
temp_histo_all <- temp_histo %>%
filter(count > 0)
write.csv(temp_histo_all, file.path(datadir, 'sunapee_histograms_0p1bin_reformatted.csv'))
# application of the data, examining trends from lspa 200-230 to see if they are similar to Landsat-derived data
library(tidyverse)
library(ggthemes)
#Load lspa data
lmp <- read.csv('https://raw.githubusercontent.com/Lake-Sunapee-Protective-Association/LMP/main/master%20files/LSPALMP_1986-2020_v2021-03-29.csv')
lmp_temp_deep <- lmp %>%
filter(parameter == 'temp_C') %>%
filter(station == 200 | station ==210 | station == 220| station==230) %>%
filter(depth_m == 0.5)
lmp_temp_summer_mean <- lmp_temp_deep %>%
mutate(month = as.numeric(format(as.Date(date), '%m')),
year = as.numeric(format(as.Date(date), '%Y'))) %>%
filter(month >= 6 & month <=8) %>%
group_by(station, year) %>%
summarise(is_summer_mean_temp_degC = mean(value),
is_sd_temp_degC = sd(value),
is_n_obs = length(value)) %>%
mutate(station = as.factor(station)) %>%
filter(is_n_obs >= 3)
ggplot(lmp_temp_summer_mean, aes(x=year, y = is_summer_mean_temp_degC, color = station)) +
geom_point()
ggplot(lmp_temp_summer_mean, aes(x=year, y = is_summer_mean_temp_degC)) +
geom_point() +
facet_grid(station ~ .) +
geom_smooth(method = 'lm', se = F)
#Load Landsat data
landsat_station <- read.csv('data/temp_zonal_stats_sunapee_1985_2020_06_15.csv')
landsat_station_deep <- landsat_station %>%
filter(WAYPOINT == 200 | WAYPOINT ==210 | WAYPOINT == 220| WAYPOINT==230)
landsat_summer_mean <- landsat_station_deep %>%
mutate(date = as.Date(substr(uid, 15, 22), format = '%Y%m%d'),
month = as.numeric(format(date, '%m')),
year = as.numeric(format(date, '%Y'))) %>%
filter(month >= 6 & month <=8) %>%
filter(min > 0 & skew < 1 & skew >-1) %>%
group_by(WAYPOINT, year) %>%
summarise(ls_summer_mean_temp_degC = mean(median),
ls_sd_temp_degC = sd(median),
ls_n_obs = length(median)) %>%
mutate(WAYPOINT = as.factor(WAYPOINT)) %>%
filter(ls_n_obs >= 3)
ggplot(landsat_summer_mean, aes(x=year, y = ls_summer_mean_temp_degC, color = WAYPOINT)) +
geom_point()
ggplot(landsat_summer_mean, aes(x=year, y = ls_summer_mean_temp_degC)) +
geom_point() +
facet_grid(WAYPOINT ~ .) +
geom_smooth(method = 'lm', se = F)
ls_is_summer_mean <- landsat_summer_mean %>%
mutate(station = as.factor(WAYPOINT)) %>%
full_join(., lmp_temp_summer_mean)
ggplot(ls_is_summer_mean, aes(x = ls_summer_mean_temp_degC, y = is_summer_mean_temp_degC)) +
geom_point() +
facet_grid(station ~ .) +
geom_smooth(method = 'lm', se=F)
# this file loads in the histograms from the colab output; creates histos, and then assesses unimodality
library(tidyverse)
final_theme=theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
plot.title=element_text(size=16, face='bold', hjust=0.5))
#point to data directory
datadir = 'data/colab-output/2021-06-08/'
#load file
temp_histo <- read.csv(file.path(datadir, 'sunapee_histograms_0p1bin.csv'))
#transform and rename
temp_histo <- temp_histo %>%
gather(date, count, -bin) %>%
mutate(date = substr(date, 2, 9),
date = as.Date(date, format = '%Y%m%d'),
bin = as.numeric(bin),
count = as.numeric(count)) %>%
rename(temp_degC = bin)
#total number of pixels in lake sunapee
sun_n_pixels <- 23640
image_pixels <- temp_histo %>%
group_by(date) %>%
summarise(tot_pix = sum(count)) %>%
mutate(perc_lake = round((tot_pix/sun_n_pixels)*100, digits = 2))
#filter for counts that aren't null
temp_histo_all <- temp_histo %>%
filter(count > 0)
write.csv(temp_histo_all, file.path(datadir, 'sunapee_histograms_0p1bin_reformatted.csv'))
#make a list of all dates
datelist <- unique(temp_histo_all$date)
date_modal <- as.data.frame(datelist) %>%
rename(date = datelist) %>%
mutate(unimodal = '')
#determine unimodality from density plot, if one derivative change, unimodal if more it's not.
for(j in 1:length(datelist)) {
temp_histo_date <- temp_histo_all %>%
filter(date == datelist[j])
temp_histo_date$diff <- NA_real_
temp_histo_date$simple_change <- ''
for(i in 2:nrow(temp_histo_date)){
temp_histo_date$diff[i] = temp_histo_date$count[i] - temp_histo_date$count[i-1]
}
temp_histo_date <- temp_histo_date %>%
filter(abs(diff) > 0.05*sun_n_pixels) #difference has to be more than 5% of pixels for a meaningful multimodality
if (nrow(temp_histo_date)>2) {
for(k in 2:nrow(temp_histo_date)){
temp_histo_date$simple_change[k] = case_when(temp_histo_date$diff[k] >0 & temp_histo_date$diff[k-1]< 0 ~ 'y',
temp_histo_date$diff[k] <0 & temp_histo_date$diff[k-1]> 0 ~ 'y',
TRUE~ NA_character_)
}
n_change <- nrow(temp_histo_date %>%
filter(simple_change == 'y'))
date_modal$unimodal[j] = case_when(n_change > 1 ~ 'not unimodal',
TRUE ~ 'unimodal')
} else{
date_modal$unimodal[j] = 'unk'
}
}
View(date_modal)
#determine unimodality from density plot, if one derivative change, unimodal if more it's not.
for(j in 1:length(datelist)) {
temp_histo_date <- temp_histo_all %>%
filter(date == datelist[j])
temp_histo_date$diff <- NA_real_
temp_histo_date$simple_change <- ''
for(i in 2:nrow(temp_histo_date)){
temp_histo_date$diff[i] = temp_histo_date$count[i] - temp_histo_date$count[i-1]
}
temp_histo_date <- temp_histo_date %>%
filter(abs(diff) > 0.01*sun_n_pixels) #difference has to be more than 1% of pixels for a meaningful multimodality
if (nrow(temp_histo_date)>2) {
for(k in 2:nrow(temp_histo_date)){
temp_histo_date$simple_change[k] = case_when(temp_histo_date$diff[k] >0 & temp_histo_date$diff[k-1]< 0 ~ 'y',
temp_histo_date$diff[k] <0 & temp_histo_date$diff[k-1]> 0 ~ 'y',
TRUE~ NA_character_)
}
n_change <- nrow(temp_histo_date %>%
filter(simple_change == 'y'))
date_modal$unimodal[j] = case_when(n_change > 1 ~ 'not unimodal',
TRUE ~ 'unimodal')
} else{
date_modal$unimodal[j] = 'unk'
}
}
View(date_modal)
knitr::opts_chunk$set(echo = TRUE)
source('R_library.R')
install.packages('mcr')
source('R_library.R')
install.packages('cowplot')
source('R_library.R')
source('R_library.R')
dir = '~/GitHub/ids-ne-lakes/'
datadir = '~/GitHub/ids-ne-lakes/data/'
figdir = '~/GitHub/ids-ne-lakes/figures/'
#load in all insitu data for historical data analysis
insitu <- read.csv(paste0(datadir, 'insitu_temp_data_v2021-05-17.csv')) %>%
filter(!is.na(lat_dd)) %>%
mutate(datetime = as.POSIXct(datetime, tz='Etc/GMT+5')) %>%
filter(format(datetime, '%m') < 11)
#load in all insitu data for historical data analysis
insitu <- read.csv(paste0(datadir, 'insitu_temp_data_v2021-05-17.csv')) %>%
filter(!is.na(lat_dd)) %>%
mutate(datetime = as.POSIXct(datetime, tz='Etc/GMT+5')) %>%
filter(format(datetime, '%m') < 11)
#read in all skin temp data for whole lake
lst_all <- read_csv(paste0(datadir, 'colab-output/2021-06-08/sunapee_temp_stats.csv'),
col_types = c('')) %>%
mutate(date =as.Date(substrRight(`system:index`, 8), '%Y%m%d'),
month = as.numeric(format(date, '%m')),
year = as.factor(format(date, '%Y')),
doy = as.numeric(format(date, '%j')),
LSmission = case_when(grepl('LT04', `system:index`) ~ 'LS 4',
grepl('LT05', `system:index`) ~ 'LS 5',
grepl('LE07', `system:index`) ~ 'LS 7',
grepl('LC08', `system:index`) ~ 'LS 8')) %>%
filter(month < 11) %>%
mutate(month = as.factor(month))
lst_paired <- read_csv(paste0(datadir, 'colab-output/2021-06-08/sunapee_insitu_landsat_paired.csv'),
col_types = c('')) %>%
mutate(date =as.Date(substrRight(`system:index`, 8), '%Y%m%d')) %>%
filter(as.numeric(format(date, '%m')) < 11)
lst_paired <- read_csv(paste0(datadir, 'colab-output/2021-06-08/sunapee_insitu_landsat_paired.csv'),
col_types = c('')) %>%
mutate(date =as.Date(substrRight(`system:index`, 8), '%Y%m%d')) %>%
filter(as.numeric(format(date, '%m')) < 11)
#make a list of the file namesin the folder
match_names <- list.files(paste0(datadir, 'colab-output/2021-06-08/ancillary'))
#iterate over the files into a dataframe
for(i in 1:length(match_names)) {
data <- read_csv(paste0(datadir, 'match-files/', match_names[i]),
col_types = c('')) %>%
mutate(source = paste0(match_names[i]))
if (i == 1) {
match_details <- data
} else {
match_details <- full_join(match_details, data)
}
}
# add columns for match_details
match_details <- match_details %>%
mutate(date =as.Date(datetime),
month = as.numeric(format(date, '%m')),
year = as.factor(format(date, '%Y')),
doy = as.numeric(format(date, '%j'))) %>%
filter(frequency == 'sub-daily') %>%
filter(month < 11) %>%
mutate(month = as.factor(month))
#read in the modal information
modal_analysis <- read.csv(file.path(datadir, 'colab-output/2021-06-08/date_modalanalysis.csv')) %>%
mutate(date = as.Date(date))
#read in binned data
lst_hist <- read.csv(file.path(datadir, 'colab-output/2021-06-08/sunapee_histograms_0p1bin_reformatted.csv')) %>%
mutate(date = as.Date(date))
install.packages('deming')
knitr::opts_chunk$set(echo = TRUE)
source('R_library.R')
dir = '~/GitHub/ids-ne-lakes/'
datadir = '~/GitHub/ids-ne-lakes/data/'
figdir = '~/GitHub/ids-ne-lakes/figures/'
#number of observations for total DB
insitu %>%
summarize(nobs = length(datetime),
ndays = length(unique(format(datetime, '%Y-%m-%d'))),
year_start = min(as.numeric(format(datetime, '%Y'))),
year_end = max(as.numeric(format(datetime, '%Y'))),
min_month = min(as.numeric(format(datetime, '%m'))),
max_month = max(as.numeric(format(datetime, '%m'))),
nsites = length(unique(location)))
#number of observations between time of 10 and 12
insitu %>%
mutate(hour = as.numeric(format(datetime, '%H'))) %>%
filter(hour >= 10 & hour < 12) %>%
summarize(nobs = length(datetime),
ndays = length(unique(format(datetime, '%Y-%m-%d'))),
year_start = min(as.numeric(format(datetime, '%Y'))),
year_end = max(as.numeric(format(datetime, '%Y'))),
min_month = min(as.numeric(format(datetime, '%m'))),
max_month = max(as.numeric(format(datetime, '%m'))),
nsites = length(unique(location)))
#number of sites
length(unique(insitu$location))
unique(insitu$location)
#document max spread for LST
range_per_date <- insitu %>%
mutate(hour = as.numeric(format(datetime, '%H')),
date = as.Date(datetime)) %>%
filter(hour >= 10 & hour < 12) %>%
group_by(date) %>%
summarize(temp_range = max(temp_degC) - min(temp_degC),
n_locs = length(unique(location)))
max_spread <- max(range_per_date$temp_range, na.rm = T)
View(range_per_date)
range_summary <- range_per_date %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
summarise(min_range = min(temp_range),
max_range = max(temp_range))
View(range_summary)
range_summary <- range_per_date %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
summarise(min_range = min(temp_range, na.rm = T),
max_range = max(temp_range, na.rm = T))
View(range_summary)
range_summary <- range_per_date %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
group_by(month) %>%
filter(n_locs >3) %>%
summarise(min_range = min(temp_range, na.rm = T),
max_range = max(temp_range, na.rm = T))
View(range_summary)
lst_all %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
View(lst_all)
lst_filt_freeze <- lst_all %>%
filter(surface_temp_min > 0)
lst_filt_mod <- lst_filt_freeze %>%
left_join(., modal_analysis) %>%
filter(unimodal == 'unimodal')
lst_filt_mod <- lst_filt_mod %>%
mutate(temp_spread = round(surface_temp_max, digits = 1) - round(surface_temp_min, digits = 1)) %>%
filter(temp_spread < max_spread*1.1)
lst_filt_mod %>%
group_by(LSmission) %>%
summarize(count = length(LSmission))
colnames(lst_filt_mod)
lst_filt_mod %>%
select(date, LSmission, temp_spread, pct_lake, surface_temp_count:surface_temp_stdDev) %>%
write.csv(file.path(datadir, 'LS_passQAQC_v19July2021.csv'), row.names = F)
install.packages('GGally')
library(GGally)
ggpairs(lst_filt_mod, columns = c(azimuth:esd, pct_lake:surface_temp_stdDev, month:LSmission))
ggpairs(lst_filt_mod, columns = 1:nrow(lst_filt_mod))
ggpairs(lst_filt_mod, columns = 1:nrow(lst_filt_modc('azimuth':'esd', 'pct_lake':'surface_temp_stdDev', 'month':'LSmission'))
ggpairs(lst_filt_mod, columns = c('azimuth':'esd', 'pct_lake':'surface_temp_stdDev', 'month':'LSmission'))
View(lst_filt_mod)
ggplot(lst_filt_mod, aes(x = pct_lake, y = surface_temp_range))
ggplot(lst_filt_mod, aes(x = pct_lake, y = surface_temp_range)) +
geom_point()
ggplot(lst_filt_mod, aes(x = pct_lake, y = temp_spread)) +
geom_point()
ggplot(lst_filt_mod, aes(x = perc_lake, y = temp_spread)) +
geom_point()
ggplot(lst_all, aes(x = pct_lake, y = (surface_temp_max-surface_temp_min))) +
geom_point()
ggplot(lst_all, aes(x = pct_lake, y = (surface_temp_max-surface_temp_min))) +
geom_point(aes(color = month))
ggplot(lst_filt_mod, aes(x = perc_lake, y = temp_spread)) +
geom_point(aes(color = month))
ggplot(lst_all, aes(x = pct_lake, y = (surface_temp_max-surface_temp_min))) +
geom_point(aes(color = month))
=======
date = as.Date(datetime)) %>%
filter(hour >= 9 & hour < 11) %>%
group_by(date)
cor_pixel_doy = round(cor(x = validation$pixel_count, y = validation$doy), digits = 2)
pixel_doy <- ggplot(validation, aes(x = pixel_count, y = doy)) +
geom_point() +
annotate('text', label = paste0('r = ', cor_pixel_doy), y = 125, x = 8500) +
labs(x = 'pixel count\ncontributing to mean LST', y='day of year') +
final_theme+
theme(plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
cor_pixel_cloud = round(cor(x = validation$pixel_count, y = validation$cloud_cover), digits = 2)
pixel_cloud <- ggplot(validation, aes(x = pixel_count, y = cloud_cover)) +
geom_point() +
annotate('text', label = paste0('r = ', cor_pixel_cloud), y = 0, x = 8500) +
labs(x = 'pixel count\ncontributing to mean LST', y='percent cloud cover\nin Landsat image') +
final_theme+
theme(plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
doy_cloud <- ggplot(validation, aes(x = doy, y = cloud_cover)) +
geom_point() +
annotate('text', label = paste0('r = ', cor_doy_cloud), y = 0, x = 275) +
labs(x = 'day of year\n', y='percent cloud cover\nin Landsat image') +
final_theme+
theme(plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
plot_grid(pixel_doy, pixel_cloud, doy_cloud, labels = c('a', 'b', 'c'), nrow = 1)
cor_doy_cloud = round(cor(x = validation$doy, y = validation$cloud_cover), digits = 2)
doy_cloud <- ggplot(validation, aes(x = doy, y = cloud_cover)) +
geom_point() +
annotate('text', label = paste0('r = ', cor_doy_cloud), y = 0, x = 275) +
labs(x = 'day of year\n', y='percent cloud cover\nin Landsat image') +
final_theme+
theme(plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
plot_grid(pixel_doy, pixel_cloud, doy_cloud, labels = c('a', 'b', 'c'), nrow = 1)
>>>>>>> Stashed changes
