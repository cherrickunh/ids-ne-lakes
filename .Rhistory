tm_shape(northamer) +
tm_borders(lwd = 2) +
tm_scale_bar(position = c('right', 'bottom')) +
tm_shape(bbox_NE) +
tm_borders(lwd = 3, col = 'red')
NA_base
# NA with better focus
NE_base = tm_shape(NA_wstates, bbox = bbox_NE) +
tm_polygons() +
tm_shape(northamer) +
tm_borders(lwd = 2)+
tm_scale_bar(position = c('right', 'bottom')) +
tm_shape(bbox_sunapee) +
tm_borders(lwd = 3, col = 'blue') +
tm_layout(frame.lwd = 3, frame = 'red')
NE_base
#make sunapee basemap
sunbase = tm_shape(sun_bathy) +
tm_raster(palette = 'Blues',
title = 'lake depth\n(meters)') +
tm_shape(sun) +
tm_borders() +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 24,
size = 0.5,
title = 'sampling\nfrequency',
palette = c('black', 'yellow')) +
tm_compass(position = c('left', 'bottom')) +
tm_scale_bar(position = c('left', 'bottom')) +
tm_layout(inner.margins = 0.05, frame.lwd = 3, frame = 'blue')
#put it all together
print(NA_base, vp = grid::viewport(0.3, 0.85, width= 0.4))
print(NE_base, vp = grid::viewport(0.3, 0.35, width = 0.4))
print(sunbase, vp = grid::viewport(0.7, 0.5, height = 1))
#put it all together
print(NA_base, vp = grid::viewport(0.3, 0.853, width= 0.4))
print(NE_base, vp = grid::viewport(0.3, 0.33, width = 0.4))
print(sunbase, vp = grid::viewport(0.7, 0.5, height = 1))
#put it all together
print(NA_base, vp = grid::viewport(0.3, 0.848, width= 0.4))
print(NE_base, vp = grid::viewport(0.3, 0.34, width = 0.4))
#put it all together
print(NA_base, vp = grid::viewport(0.3, 0.847, width= 0.4))
print(NE_base, vp = grid::viewport(0.3, 0.342, width = 0.4))
print(NA_base, vp = grid::viewport(0.3, 0.847, width= 0.4))
print(NE_base, vp = grid::viewport(0.3, 0.342, width = 0.4))
print(sunbase, vp = grid::viewport(0.7, 0.5, height = 1))
fig_dir = 'figures/'
ggsave(file.path(fig_dir, 'Fig2_DataExtent.png'))
tmap_save(file.path(fig_dir, 'Fig2_DataExtent.png'),
width = 1500)
#put it all together
png(file = file.path(fig_dir, 'Fig2_DataExtent.png'),
width = 1500)
print(NA_base, vp = grid::viewport(0.3, 0.847, width= 0.4))
print(NE_base, vp = grid::viewport(0.3, 0.342, width = 0.4))
print(sunbase, vp = grid::viewport(0.7, 0.5, height = 1))
dev.off()
#put it all together
png(file = file.path(fig_dir, 'Fig2_DataExtent.png'),
width = 4*300,
height= 6*300)
print(NA_base, vp = grid::viewport(0.3, 0.847, width= 0.4))
print(NE_base, vp = grid::viewport(0.3, 0.342, width = 0.4))
print(sunbase, vp = grid::viewport(0.7, 0.5, height = 1))
dev.off()
print(NA_base, vp = grid::viewport(0.3, 0.847, width= 0.4))
print(NE_base, vp = grid::viewport(0.3, 0.342, width = 0.4))
print(sunbase, vp = grid::viewport(0.7, 0.5, height = 1))
#make sunapee basemap
sunbase = tm_shape(sun_bathy) +
tm_raster(palette = 'Blues',
title = 'lake depth\n(meters)') +
tm_shape(sun) +
tm_borders() +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 24,
size = 0.5,
title = 'sampling\nfrequency',
palette = c('black', 'yellow')) +
tm_compass(position = c('left', 'bottom')) +
tm_scale_bar(position = c('left', 'bottom')) +
tm_layout(inner.margins = 0.1, frame.lwd = 3, frame = 'blue')
sunbase
#put it all together
png(file = file.path(fig_dir, 'Fig2_DataExtent.png',
width = 4*200,
height = 6*200))
dev.off()
#put it all together
png(file = file.path(fig_dir, 'Fig2_DataExtent.png',
width = 6*200,
height = 6*200))
print(NA_base, vp = grid::viewport(0.3, 0.847, width= 0.4))
print(NE_base, vp = grid::viewport(0.3, 0.342, width = 0.4))
print(sunbase, vp = grid::viewport(0.7, 0.5, height = 1))
dev.off()
dev.off()
sunbase
#create a new one and modify
bbox_sun_new <- st_bbox(sun_bathy)
#create a new one and modify
bbox_sun_new <- st_bbox(sun_bathy)
bbox_sun_new[1] <- bbox_sun_new[1] + (0.1 * xrange) # xmin - left
bbox_sun_new[3] <- bbox_sun_new[3] + (0.1 * xrange) # xmax - right
bbox_sun_new[2] <- bbox_sun_new[2] + (0.1 * yrange) # ymin - bottom
bbox_sun_new[4] <- bbox_sun_new[4] + (0.1 * yrange) # ymax - top
#make sunapee basemap ----
#play with extent for legends to fit
sunbase = tm_shape(sun_bathy, bbox = bbox_sun_new) +
tm_raster(palette = 'Blues',
title = 'lake depth\n(meters)') +
tm_shape(sun) +
tm_borders() +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 24,
size = 0.5,
title = 'sampling\nfrequency',
palette = c('black', 'yellow')) +
tm_compass(position = c('left', 'bottom')) +
tm_scale_bar(position = c('left', 'bottom')) +
tm_layout(frame.lwd = 3, frame = 'blue')
sunbase
#create a new one and modify
bbox_sun_new <- st_bbox(sun_bathy)
bbox_sun_new[1] <- bbox_sun_new[1] - (0.1 * xrange) # xmin - left
bbox_sun_new[3] <- bbox_sun_new[3] + (0.1 * xrange) # xmax - right
bbox_sun_new[2] <- bbox_sun_new[2] - (0.1 * yrange) # ymin - bottom
bbox_sun_new[4] <- bbox_sun_new[4] + (0.1 * yrange) # ymax - top
#make sunapee basemap ----
#play with extent for legends to fit
sunbase = tm_shape(sun_bathy, bbox = bbox_sun_new) +
tm_raster(palette = 'Blues',
title = 'lake depth\n(meters)') +
tm_shape(sun) +
tm_borders() +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 24,
size = 0.5,
title = 'sampling\nfrequency',
palette = c('black', 'yellow')) +
tm_compass(position = c('left', 'bottom')) +
tm_scale_bar(position = c('left', 'bottom')) +
tm_layout(frame.lwd = 3, frame = 'blue')
sunbase
#make sunapee basemap ----
#play with extent for legends to fit
sunbase = tm_shape(sun_bathy) +
tm_raster(palette = 'Blues',
title = 'lake depth\n(meters)') +
tm_shape(sun) +
tm_borders() +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 24,
size = 0.5,
title = 'sampling\nfrequency',
palette = c('black', 'yellow')) +
tm_compass(position = c('left', 'bottom')) +
tm_scale_bar(position = c('left', 'bottom')) +
tm_layout(frame.lwd = 3, frame = 'blue')
sunbase
#create a new one and modify
bbox_sun_new <- st_bbox(sun_bathy)
bbox_sun_new[1] <- bbox_sun_new[1] - (0.2 * xrange) # xmin - left
bbox_sun_new[3] <- bbox_sun_new[3] + (0.2 * xrange) # xmax - right
bbox_sun_new[2] <- bbox_sun_new[2] - (0.2 * yrange) # ymin - bottom
bbox_sun_new[4] <- bbox_sun_new[4] + (0.2 * yrange) # ymax - top
#get bounding box of bathy
bbox_sunapee <- st_bbox(sun_bathy) # current bounding box
xrange <- bbox_sunapee$xmax - bbox_sunapee$xmin # range of x values
yrange <- bbox_sunapee$ymax - bbox_sunapee$ymin # range of y values
#create a new one and modify
bbox_sun_new <- st_bbox(sun_bathy)
bbox_sun_new[1] <- bbox_sun_new[1] - (0.2 * xrange) # xmin - left
bbox_sun_new[3] <- bbox_sun_new[3] + (0.2 * xrange) # xmax - right
bbox_sun_new[2] <- bbox_sun_new[2] - (0.2 * yrange) # ymin - bottom
bbox_sun_new[4] <- bbox_sun_new[4] + (0.2 * yrange) # ymax - top
#make it a sf poly
bbox_sunapee = bbox_sunapee %>%
st_as_sfc()
#make sunapee basemap ----
#play with extent for legends to fit
sunbase = tm_shape(sun_bathy) +
tm_raster(palette = 'Blues',
title = 'lake depth\n(meters)') +
tm_shape(sun) +
tm_borders() +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 24,
size = 0.5,
title = 'sampling\nfrequency',
palette = c('black', 'yellow')) +
tm_compass(position = c('left', 'bottom')) +
tm_scale_bar(position = c('left', 'bottom')) +
tm_layout(frame.lwd = 3, frame = 'blue')
sunbase
#make sunapee basemap ----
#play with extent for legends to fit
sunbase = tm_shape(sun_bathy, bbox = bbox_sun_new) +
tm_raster(palette = 'Blues',
title = 'lake depth\n(meters)') +
tm_shape(sun) +
tm_borders() +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 24,
size = 0.5,
title = 'sampling\nfrequency',
palette = c('black', 'yellow')) +
tm_compass(position = c('left', 'bottom')) +
tm_scale_bar(position = c('left', 'bottom')) +
tm_layout(frame.lwd = 3, frame = 'blue')
sunbase
#get bounding box of bathy
bbox_sunapee <- st_bbox(sun_bathy) # current bounding box
xrange <- bbox_sunapee$xmax - bbox_sunapee$xmin # range of x values
yrange <- bbox_sunapee$ymax - bbox_sunapee$ymin # range of y values
#create a new one and modify
bbox_sun_new <- st_bbox(sun_bathy)
bbox_sun_new[1] <- bbox_sun_new[1] - (0.25 * xrange) # xmin - left
bbox_sun_new[3] <- bbox_sun_new[3] + (0.25 * xrange) # xmax - right
bbox_sun_new[2] <- bbox_sun_new[2] - (0.05 * yrange) # ymin - bottom
bbox_sun_new[4] <- bbox_sun_new[4] + (0.05 * yrange) # ymax - top
#make sunapee basemap ----
#play with extent for legends to fit
sunbase = tm_shape(sun_bathy, bbox = bbox_sun_new) +
tm_raster(palette = 'Blues',
title = 'lake depth\n(meters)') +
tm_shape(sun) +
tm_borders() +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 24,
size = 0.5,
title = 'sampling\nfrequency',
palette = c('black', 'yellow')) +
tm_compass(position = c('left', 'bottom')) +
tm_scale_bar(position = c('left', 'bottom')) +
tm_layout(frame.lwd = 3, frame = 'blue')
sunbase
bbox_sun_new[1] <- bbox_sun_new[1] - (0.30 * xrange) # xmin - left
bbox_sun_new[3] <- bbox_sun_new[3] + (0.30 * xrange) # xmax - right
bbox_sun_new[2] <- bbox_sun_new[2] - (0.05 * yrange) # ymin - bottom
bbox_sun_new[4] <- bbox_sun_new[4] + (0.05 * yrange) # ymax - top
#make sunapee basemap ----
#play with extent for legends to fit
sunbase = tm_shape(sun_bathy, bbox = bbox_sun_new) +
tm_raster(palette = 'Blues',
title = 'lake depth\n(meters)') +
tm_shape(sun) +
tm_borders() +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 24,
size = 0.5,
title = 'sampling\nfrequency',
palette = c('black', 'yellow')) +
tm_compass(position = c('left', 'bottom')) +
tm_scale_bar(position = c('left', 'bottom')) +
tm_layout(frame.lwd = 3, frame = 'blue')
sunbase
#make sunapee basemap ----
#play with extent for legends to fit
sunbase = tm_shape(sun_bathy, bbox = bbox_sun_new) +
tm_raster(palette = 'Blues',
title = 'lake depth\n(meters)') +
tm_shape(sun) +
tm_borders() +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 24,
size = 0.5,
title = 'sampling\nfrequency',
palette = c('black', 'yellow')) +
tm_compass(position = c('right', 'bottom')) +
tm_scale_bar(position = c('right', 'bottom')) +
tm_layout(frame.lwd = 3, frame = 'blue')
sunbase
#make sunapee basemap ----
#play with extent for legends to fit
sunbase = tm_shape(sun_bathy, bbox = bbox_sun_new) +
tm_raster(palette = 'Blues',
title = 'lake depth\n(meters)') +
tm_shape(sun) +
tm_borders() +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 24,
size = 0.5,
title = 'sampling\nfrequency',
palette = c('black', 'yellow'),
position = c('left', 'bottom')) +
tm_compass(position = c('right', 'bottom')) +
tm_scale_bar(position = c('right', 'bottom')) +
tm_layout(frame.lwd = 3, frame = 'blue')
sunbase
#make sunapee basemap ----
#play with extent for legends to fit
sunbase = tm_shape(sun_bathy, bbox = bbox_sun_new) +
tm_raster(palette = 'Blues',
title = 'lake depth\n(meters)',
legend.position = c('left', 'bottom')) +
tm_shape(sun) +
tm_borders() +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 24,
size = 0.5,
title = 'sampling\nfrequency',
palette = c('black', 'yellow')) +
tm_compass(position = c('right', 'bottom')) +
tm_scale_bar(position = c('right', 'bottom')) +
tm_layout(frame.lwd = 3, frame = 'blue')
sunbase
#make sunapee basemap ----
#play with extent for legends to fit
sunbase = tm_shape(sun_bathy, bbox = bbox_sun_new) +
tm_raster(palette = 'Blues',
title = 'lake depth\n(meters)') +
tm_shape(sun) +
tm_borders() +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 24,
size = 0.5,
title = 'sampling\nfrequency',
palette = c('black', 'yellow')) +
tm_compass(position = c('right', 'bottom')) +
tm_scale_bar(position = c('right', 'bottom')) +
tm_layout(frame.lwd = 3, frame = 'blue',
legend.position = c('left', 'bottom'))
sunbase
#create a new one and modify
bbox_sun_new <- st_bbox(sun_bathy)
bbox_sun_new[1] <- bbox_sun_new[1] - (0.25 * xrange) # xmin - left
bbox_sun_new[3] <- bbox_sun_new[3] + (0.25 * xrange) # xmax - right
bbox_sun_new[2] <- bbox_sun_new[2] - (0.05 * yrange) # ymin - bottom
bbox_sun_new[4] <- bbox_sun_new[4] + (0.05 * yrange) # ymax - top
#make sunapee basemap ----
#play with extent for legends to fit
sunbase = tm_shape(sun_bathy, bbox = bbox_sun_new) +
tm_raster(palette = 'Blues',
title = 'lake depth\n(meters)') +
tm_shape(sun) +
tm_borders() +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 24,
size = 0.5,
title = 'sampling\nfrequency',
palette = c('black', 'yellow')) +
tm_compass(position = c('right', 'bottom')) +
tm_scale_bar(position = c('right', 'bottom')) +
tm_layout(frame.lwd = 3, frame = 'blue',
legend.position = c('left', 'bottom'))
sunbase
#create a new one and modify
bbox_sun_new <- st_bbox(sun_bathy)
bbox_sun_new[1] <- bbox_sun_new[1] - (0.25 * xrange) # xmin - left
bbox_sun_new[3] <- bbox_sun_new[3] + (0.25 * xrange) # xmax - right
bbox_sun_new[2] <- bbox_sun_new[2] - (0.075 * yrange) # ymin - bottom
bbox_sun_new[4] <- bbox_sun_new[4] + (0.025 * yrange) # ymax - top
#make sunapee basemap ----
#play with extent for legends to fit
sunbase = tm_shape(sun_bathy, bbox = bbox_sun_new) +
tm_raster(palette = 'Blues',
title = 'lake depth\n(meters)') +
tm_shape(sun) +
tm_borders() +
tm_shape(sampling_georef) +
tm_dots(col = 'frequency',
shape = 24,
size = 0.5,
title = 'sampling\nfrequency',
palette = c('black', 'yellow')) +
tm_compass(position = c('right', 'bottom')) +
tm_scale_bar(position = c('right', 'bottom')) +
tm_layout(frame.lwd = 3, frame = 'blue',
legend.position = c('left', 'bottom'))
sunbase
#put it all together
png(file = file.path(fig_dir, 'Fig2_DataExtent.png',
width = 6*200,
height = 6*200))
#put it all together
png(file = file.path(fig_dir, 'Fig2_DataExtent.png'),
width = 6*200,
height = 6*200))
#put it all together
png(file = file.path(fig_dir, 'Fig2_DataExtent.png'),
width = 6*200,
height = 6*200)
print(NA_base, vp = grid::viewport(0.3, 0.847, width= 0.4))
print(NE_base, vp = grid::viewport(0.3, 0.342, width = 0.4))
print(sunbase, vp = grid::viewport(0.7, 0.5, height = 1))
dev.off()
#put it all together
png(file = file.path(fig_dir, 'Fig2_DataExtent.png'),
width = 6*200,
height = 6*200)
print(NA_base, vp = grid::viewport(0.3, 0.847, width= 0.3))
print(NE_base, vp = grid::viewport(0.3, 0.342, width = 0.3))
print(sunbase, vp = grid::viewport(0.7, 0.5, height = 1))
dev.off()
#put it all together
png(file = file.path(fig_dir, 'Fig2_DataExtent.png'),
width = 6*100,
height = 6*100)
print(NA_base, vp = grid::viewport(0.3, 0.847, width= 0.3))
print(NE_base, vp = grid::viewport(0.3, 0.342, width = 0.3))
print(sunbase, vp = grid::viewport(0.7, 0.5, height = 1))
dev.off()
#put it all together
png(file = file.path(fig_dir, 'Fig2_DataExtent.png'),
width = 6,
height = 6,
units = 'in',
res = 300)
print(NA_base, vp = grid::viewport(0.3, 0.847, width= 0.3))
print(NE_base, vp = grid::viewport(0.3, 0.342, width = 0.3))
print(sunbase, vp = grid::viewport(0.7, 0.5, height = 1))
dev.off()
#put it all together
png(file = file.path(fig_dir, 'Fig2_DataExtent.png'),
width = 6,
height = 6,
units = 'in',
res = 300)
print(NA_base, vp = grid::viewport(0.2, 0.847, width= 0.4))
print(NE_base, vp = grid::viewport(0.0, 0.342, width = 0.4))
print(sunbase, vp = grid::viewport(0.7, 0.5, height = 1))
dev.off()
#put it all together
png(file = file.path(fig_dir, 'Fig2_DataExtent.png'),
width = 6,
height = 6,
units = 'in',
res = 300)
print(NA_base, vp = grid::viewport(0.22, 0.847, width= 0.4))
print(NE_base, vp = grid::viewport(0.22, 0.342, width = 0.4))
print(sunbase, vp = grid::viewport(0.7, 0.5, height = 1))
dev.off()
# miscellaneous calculations in the MS
source('scripts/R_library.R')
# point to directories
C1_datadir <- '~/GitHub/ids-ne-lakes/data/colab-output/C1/'
C2_datadir <- '~/GitHub/ids-ne-lakes/data/colab-output/C2/'
figdir <- '~/GitHub/ids-ne-lakes/figures/'
## load and summarize valid landsat data ####
C1 <- read.csv(file.path(C1_datadir, 'C1_SCA_v2_temp_stats.csv')) %>%
mutate(date = as.Date(substrRight(`system.index`, 8), format = '%Y%m%d')) %>%
mutate(LSmission = case_when(grepl('LT05', `system.index`) ~ 'LS 5',
grepl('LT04', `system.index`) ~ 'LS 4',
grepl('LE07', `system.index`) ~ 'LS 7',
grepl('LC08', `system.index`) ~ 'LS 8',
TRUE ~ NA_character_),
collection = 'C1',
filter = 'none')
C2 <- read.csv(file.path(C2_datadir, 'C2_v2_temp_stats.csv')) %>%
mutate(date = as.Date(substrRight(`system.index`, 8), format = '%Y%m%d')) %>%
mutate(LSmission = case_when(grepl('LT05', `system.index`) ~ 'LS 5',
grepl('LT04', `system.index`) ~ 'LS 4',
grepl('LE07', `system.index`) ~ 'LS 7',
grepl('LC08', `system.index`) ~ 'LS 8',
TRUE ~ NA_character_),
collection = 'C2',
filter = 'none')
# % increase in scenes from C1 to C2
(nrow(C2) - nrow(C1)) / nrow(C1)
# % increase in missions
alldata <- full_join(C1, C2)
mission_summary <- alldata %>%
group_by(LSmission, collection) %>%
summarise(count = length(LSmission)) %>%
pivot_wider(names_from = collection,
values_from = count) %>%
mutate(perc_change_C1_C2 = round(((C2-C1)/C1)*100, digits = 1))
#calculate percentage change with kurtosis filter
C1_kurt = C1 %>%
filter(surface_temp_kurtosis > 2) %>%
mutate(filter = 'kurtosis')
C2_kurt = C2 %>%
filter(surface_temp_kurtosis > 2) %>%
mutate(filter = 'kurtosis')
C2_mission <- full_join(C2, C2_kurt) %>%
mutate(month = format(date, '%m'),
year = format(date, '%Y'),
decade = case_when(year < 1990 ~ 'eighties',
year >= 1990 & year < 2000 ~ 'nineties',
year >= 2000 & year < 2010 ~ 'aughts',
year >= 2010 & year <= 2020 ~ 'teens',
TRUE ~ ''))
mission_summary_kurt <- C2_mission %>%
group_by(LSmission, filter) %>%
summarise(count = length(LSmission)) %>%
pivot_wider(names_from = filter,
values_from = count) %>%
mutate(perc_change_kurt = round(((kurtosis-none)/abs(none))*100, digits = 1))
month_summary_kurt <- C2_mission %>%
group_by(month, filter) %>%
summarise(count = length(month)) %>%
pivot_wider(names_from = filter,
values_from = count) %>%
mutate(perc_change_kurtmonth = round(((kurtosis-none)/abs(none))*100, digits = 1))
tableb <- full_join(mission_summary, mission_summary_kurt)
write.csv(tableb, file.path(figdir, 'ST3_C1C2filtercount.csv'), row.names = F)
