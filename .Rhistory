flag_alltemp, flag_temp0p5m, flag_temp0p75m, flag_temp0p85m)
unique(buoytemp_filter$flag_alltemp)
# remove suspect/x data
buoytemp_filter <- buoytemp_filter %>%
filter(!grepl('i', flag_alltemp)) %>%
select(-flag_alltemp)
unique(buoytemp_filter$flag_temp0p5m) #i is okay
unique(buoytemp_filter$flag_temp0p75m)
unique(buoytemp_filter$flag_temp0p85m)
# remove suspect/x data
buoytemp_filter <- buoytemp_filter %>%
filter(!grepl('i', flag_alltemp) |
!grepl('i', flag_temp0p5m) |
!grepl('i', flag_temp0p75m) |
!grepl('i', flag_temp0p85m))
#select only temp <= 1.5m
buoytemp_filter <- buoytemp %>%
select(datetime, location,
waterTemperature_degC_0p1m, waterTemperature_degC_0p25m,
waterTemperature_degC_0p5m, waterTemperature_degC_0p75m,
waterTemperature_degC_0p85m, waterTemperature_degC_1m,
waterTemperature_degC_1p5m,
flag_alltemp, flag_temp0p5m, flag_temp0p75m, flag_temp0p85m)
unique(buoytemp_filter$flag_alltemp)
unique(buoytemp_filter$flag_temp0p5m)
unique(buoytemp_filter$flag_temp0p75m)
unique(buoytemp_filter$flag_temp0p85m)
# remove suspect/x data
buoytemp_filter <- buoytemp_filter %>%
filter(!grepl('i', flag_alltemp) |
!grepl('i', flag_temp0p5m) |
!grepl('i', flag_temp0p75m) |
!grepl('i', flag_temp0p85m))
unique(buoytemp_filter$flag_alltemp)
# remove suspect/x data
buoytemp_filter <- buoytemp_filter %>%
filter(!grepl('i', flag_alltemp) &
!grepl('i', flag_temp0p5m) &
!grepl('i', flag_temp0p75m) &
!grepl('i', flag_temp0p85m))
unique(buoytemp_filter$flag_alltemp)
unique(buoytemp_filter$flag_temp0p5m)
unique(buoytemp_filter$flag_temp0p75m)
unique(buoytemp_filter$flag_temp0p85m)
#select only temp <= 1.5m
buoytemp_filter <- buoytemp %>%
select(datetime, location,
waterTemperature_degC_0p1m, waterTemperature_degC_0p25m,
waterTemperature_degC_0p5m, waterTemperature_degC_0p75m,
waterTemperature_degC_0p85m, waterTemperature_degC_1m,
waterTemperature_degC_1p5m,
flag_alltemp, flag_temp0p5m, flag_temp0p75m, flag_temp0p85m)
unique(buoytemp_filter$flag_alltemp)
unique(buoytemp_filter$flag_temp0p5m)
unique(buoytemp_filter$flag_temp0p75m)
unique(buoytemp_filter$flag_temp0p85m)
# remove suspect/x data/intermittent recordings
filter(!grepl('i', flag_alltemp) &
!grepl('i', flag_temp0p5m) &
!grepl('i', flag_temp0p75m) &
!grepl('i', flag_temp0p85m)) %>%
select(-c(flag_alltemp, flag_temp0p5m, flag_temp0p75m, flag_temp0p85m))
# remove suspect/x data/intermittent recordings
buoytemp_filter <- buoytemp_filter %>%
filter(!grepl('i', flag_alltemp) &
!grepl('i', flag_temp0p5m) &
!grepl('i', flag_temp0p75m) &
!grepl('i', flag_temp0p85m)) %>%
select(-c(flag_alltemp, flag_temp0p5m, flag_temp0p75m, flag_temp0p85m))
#filter buoy temp string
buoytemp_filter <- buoytemp_filter %>%
select(datetime, waterTemperature_degC_0p1m:waterTemperature_degC_1p5m, location) %>% #only select 1.5 or closer to surface
pivot_longer(cols = c(waterTemperature_degC_0p1m:waterTemperature_degC_1p5m)) %>%
mutate(depth_m = case_when(grepl('0p1m', name) ~ 0.1,
grepl('0p25m', name) ~ 0.25,
grepl('0p5m', name) ~ 0.5,
grepl('0p75m', name) ~ 0.75,
grepl('0p85m', name) ~ 0.85,
grepl('1m', name) ~ 1.0,
grepl('1p5m', name) ~ 1.5,
TRUE ~ NA_real_)) %>%
filter(!is.na(value))
buoytemp_filter <- buoytemp_filter %>%
mutate(datetime = as.POSIXct(datetime, tz = 'UTC')) %>%
rename(temp_degC = value) %>%
select(-name)
head(buoytemp_filter)
colnames(buoytemp)
%>%
rename(temp_degC = DOTempC) %>%
mutate(depth_m = 1.5) %>%
filter(!is.na(temp_degC))
buoydo_filter <- buoytemp %>%
select(datetime, location,
waterTemperature_EXO_degC_1m, waterTemperature_DO_degC_0p25m, waterTemperature_DO_degC_0p75m, waterTemperature_DO_degC_1p5m,
flag_exodo, flag_do1p5m, flag_do0p25m)
unique(buoydo_filter$flag_exodo)
unique(buoydo_filter$flag_do1p5m)
unique(buoydo_filter$flag_do0p25m)
mutate(datetime = as.POSIXct(datetime, tz = 'UTC')) %>%
select(-c(flag_do1p5m, flag_exodo, flag_do0p25m))
buoydo_filter <- buoytemp %>%
select(datetime, location,
waterTemperature_EXO_degC_1m, waterTemperature_DO_degC_0p25m, waterTemperature_DO_degC_0p75m, waterTemperature_DO_degC_1p5m,
flag_exodo, flag_do1p5m, flag_do0p25m)
unique(buoydo_filter$flag_exodo)
unique(buoydo_filter$flag_do1p5m)
unique(buoydo_filter$flag_do0p25m)
# flags that might impact temp from this sensor is 'i' and 's'
buoydo_filter <- buoydo_filter %>%
mutate(waterTemperature_DO_degC_1p5m = case_when(grepl('i', flag_do1p5m) ~ NA_real_,
grepl('s', flag_do1p5m) ~ NA_real_,
TRUE ~ waterTemperature_DO_degC_1p5m))
# flags that might impact temp from this sensor is 'i' and 's'
buoydo_filter <- buoydo_filter %>%
mutate(waterTemperature_DO_degC_1p5m = case_when(grepl('i', flag_do1p5m) ~ NA_real_,
grepl('s', flag_do1p5m) ~ NA_real_,
TRUE ~ waterTemperature_DO_degC_1p5m)) %>%
mutate(datetime = as.POSIXct(datetime, tz = 'UTC')) %>%
select(-c(flag_do1p5m, flag_exodo, flag_do0p25m))
buoydo_filter <- buoydo_filter %>%
pivot_longer(names_to = 'depth_m',
values_to = temp_degC,
-c(datetime, location))
buoydo_filter <- buoydo_filter %>%
pivot_longer(names_to = 'depth_m',
values_to = 'temp_degC',
-c(datetime, location))
#join buoy data together
buoy_filter <- full_join(buoytemp_filter, buoydo_filter) %>%
mutate(source = 'edi.499.3')
buoydo_filter <- buoydo_filter %>%
pivot_longer(names_to = 'depth_m',
values_to = 'temp_degC',
-c(datetime, location)) %>%
mutate(depth_m = case_when(grepl('1p5', depth_m) ~ 1.5,
grepl('0p25', depth_m) ~ 0.25,
grepl('1m', depth_m) ~ 1.0,
TRUE ~ as.numeric(depth_m)))
buoydo_filter <- buoytemp %>%
select(datetime, location,
waterTemperature_EXO_degC_1m, waterTemperature_DO_degC_0p25m, waterTemperature_DO_degC_0p75m, waterTemperature_DO_degC_1p5m,
flag_exodo, flag_do1p5m, flag_do0p25m)
unique(buoydo_filter$flag_exodo)
unique(buoydo_filter$flag_do1p5m)
unique(buoydo_filter$flag_do0p25m)
# flags that might impact temp from this sensor is 'i' and 's'
buoydo_filter <- buoydo_filter %>%
mutate(waterTemperature_DO_degC_1p5m = case_when(grepl('i', flag_do1p5m) ~ NA_real_,
grepl('s', flag_do1p5m) ~ NA_real_,
TRUE ~ waterTemperature_DO_degC_1p5m)) %>%
mutate(datetime = as.POSIXct(datetime, tz = 'UTC')) %>%
select(-c(flag_do1p5m, flag_exodo, flag_do0p25m))
buoydo_filter <- buoydo_filter %>%
pivot_longer(names_to = 'depth_m',
values_to = 'temp_degC',
-c(datetime, location)) %>%
mutate(depth_m = case_when(grepl('1p5', depth_m) ~ 1.5,
grepl('0p25', depth_m) ~ 0.25,
grepl('0p75', depth_m) ~ 0.75,
grepl('1m', depth_m) ~ 1.0,
TRUE ~ as.numeric(depth_m)))
#join buoy data together
buoy_filter <- full_join(buoytemp_filter, buoydo_filter) %>%
mutate(source = 'edi.499.3')
buoydo_filter <- buoytemp %>%
select(datetime, location,
waterTemperature_EXO_degC_1m, waterTemperature_DO_degC_0p25m, waterTemperature_DO_degC_0p75m, waterTemperature_DO_degC_1p5m,
flag_exodo, flag_do1p5m, flag_do0p25m)
unique(buoydo_filter$flag_exodo)
unique(buoydo_filter$flag_do1p5m)
unique(buoydo_filter$flag_do0p25m)
# flags that might impact temp from this sensor is 'i' and 's'
buoydo_filter <- buoydo_filter %>%
mutate(waterTemperature_DO_degC_1p5m = case_when(grepl('i', flag_do1p5m) ~ NA_real_,
grepl('s', flag_do1p5m) ~ NA_real_,
TRUE ~ waterTemperature_DO_degC_1p5m)) %>%
mutate(datetime = as.POSIXct(datetime, tz = 'UTC')) %>%
select(-c(flag_do1p5m, flag_exodo, flag_do0p25m))
buoydo_filter
buoydo_filter <- buoydo_filter %>%
pivot_longer(names_to = 'depth_m',
values_to = 'temp_degC',
-c(datetime, location)) %>%
filter(!is.na(temp_degC))
buoydo_filter
# flags that might impact temp from this sensor is 'i' and 's'
buoydo_filter <- buoydo_filter %>%
mutate(waterTemperature_DO_degC_1p5m = case_when(grepl('i', flag_do1p5m) ~ NA_real_,
grepl('s', flag_do1p5m) ~ NA_real_,
TRUE ~ waterTemperature_DO_degC_1p5m)) %>%
mutate(datetime = as.POSIXct(datetime, tz = 'UTC')) %>%
select(-c(flag_do1p5m, flag_exodo, flag_do0p25m))
buoydo_filter <- buoytemp %>%
select(datetime, location,
waterTemperature_EXO_degC_1m, waterTemperature_DO_degC_0p25m, waterTemperature_DO_degC_0p75m, waterTemperature_DO_degC_1p5m,
flag_exodo, flag_do1p5m, flag_do0p25m)
unique(buoydo_filter$flag_exodo)
unique(buoydo_filter$flag_do1p5m)
unique(buoydo_filter$flag_do0p25m)
# flags that might impact temp from this sensor is 'i' and 's'
buoydo_filter <- buoydo_filter %>%
mutate(waterTemperature_DO_degC_1p5m = case_when(grepl('i', flag_do1p5m) ~ NA_real_,
grepl('s', flag_do1p5m) ~ NA_real_,
TRUE ~ waterTemperature_DO_degC_1p5m)) %>%
mutate(datetime = as.POSIXct(datetime, tz = 'UTC')) %>%
select(-c(flag_do1p5m, flag_exodo, flag_do0p25m))
buoydo_filter <- buoydo_filter %>%
pivot_longer(names_to = 'parameter',
values_to = 'temp_degC',
-c(datetime, location)) %>%
filter(!is.na(temp_degC))
buoydo_filter <- buoydo_filter %>%
mutate(depth_m = case_when(grepl('1p5', parameter) ~ 1.5,
grepl('0p25', parameter) ~ 0.25,
grepl('0p75', parameter) ~ 0.75,
grepl('1m', parameter) ~ 1.0,
TRUE ~ NA_real_))
View(buoydo_filter)
buoydo_filter <- buoydo_filter %>%
mutate(depth_m = case_when(grepl('1p5', parameter) ~ 1.5,
grepl('0p25', parameter) ~ 0.25,
grepl('0p75', parameter) ~ 0.75,
grepl('1m', parameter) ~ 1.0,
TRUE ~ NA_real_)) %>%
select(-parameter)
#join buoy data together
buoy_filter <- full_join(buoytemp_filter, buoydo_filter) %>%
mutate(source = 'edi.499.3')
#add location information
buoy_filter <- buoy_filter %>%
left_join(., buoy_loc)
#add location information
buoy_filter <- buoy_filter %>%
left_join(., buoylocation)
#filter for topmost temp reading per timestamp
buoy_filter <- buoy_filter %>%
mutate(datetime = as.POSIXct(datetime, tz='UTC')) %>%
arrange(datetime, depth_m) %>%
group_by(datetime, location, source, lat_dd, long_dd) %>%
summarize(temp_degC = first(temp_degC),
depth_m = first(depth_m)) %>%
ungroup()
#look for datetimes outside of dst
gloeo_temp %>%
group_by(year) %>%
arrange(datetime) %>%
summarise(firstdatetime = first(datetime),
lastdatetime = last(datetime))
gloeo_depths <-read.csv("https://pasta.lternet.edu/package/data/eml/edi/498/1/f707d161d96899983f0f82845849427e",header=F
,skip=1
,sep=","
, col.names=c(
"year",
"site",
"approx_depth_m"    ), check.names=TRUE)
gloeo_locs <-read.csv("https://pasta.lternet.edu/package/data/eml/edi/498/1/074c7dcfa74cdafbc71ccee9c4b97293" ,header=F
,skip=1
,sep=","
, col.names=c(
"site",
"lat_dd",
"long_dd"    ), check.names=TRUE)
gloeo_temp <-read.csv("https://pasta.lternet.edu/package/data/eml/edi/498/1/b4f60789ceb87db613924ca43a2f71ed",header=F
,skip=1
,sep=","
, col.names=c(
"year",
"dayofyr",
"time",
"datetime",
"site",
"temp_degC"    ), check.names=TRUE)
#look for datetimes outside of dst
gloeo_temp %>%
group_by(year) %>%
arrange(datetime) %>%
summarise(firstdatetime = first(datetime),
lastdatetime = last(datetime))
gloeo_temp_dstadj <- gloeo_temp %>%
mutate(datetime = as.POSIXct(datetime, tz = 'UTC')) %>%
mutate(datetime_adj = datetime - lubridate::hours(1))
#remove unnecessary columns, rename adjusted time
gloeo_temp_dstadj <- gloeo_temp_dstadj %>%
select(-dayofyr, -time, -datetime) %>%
rename(datetime = datetime_adj)
#join with depth data
gloeo_temp_dstadj <- full_join(gloeo_temp_dstadj, gloeo_depths)
View(gloeo_temp)
View(gloeo_depths)
#join with depth data
gloeo_temp_dstadj <- full_join(gloeo_temp_dstadj, gloeo_depths)
#where depth is na, fill in with 1.5 so data is included prior to 2011
gloeo_temp_dstadj <- gloeo_temp_dstadj %>%
mutate(depth_m = case_when(is.na(approx_depth_m) ~ 1.5,
TRUE ~ approx_depth_m)) %>%
select(-year, -approx_depth_m)
#join with loc data
gloeo_temp_dstadj <- full_join(gloeo_temp_dstadj, gloeo_locs) %>%
filter(depth_m <= 1.5)
#add source info, rename site to location
gloeo_temp_dstadj <- gloeo_temp_dstadj %>%
mutate(source = 'edi.498.1') %>%
rename(location = site)
gloeo_temp_dstadj
#add location info
GM_temp <- GM_temp %>%
mutate(location = 'GeorgesMills',
lat_dd = 43.4288,
long_dd = -72.0675)
GM_temp <-read.csv("https://pasta.lternet.edu/package/data/eml/edi/395/2/551bad10969f758453be2d3e1f540fac",header=F
,skip=1
,sep=","
, col.names=c(
"dateTime",
"temp",
"Depth",
"SerialNum"    ), check.names=TRUE)
HC_temp <-read.csv("https://pasta.lternet.edu/package/data/eml/edi/395/2/fa1a9ddd31509aa2c5a559e20b75e015",header=F
,skip=1
,sep=","
, col.names=c(
"dateTime",
"temp",
"Depth",
"SerialNum"    ), check.names=TRUE)
SB_temp <-read.csv("https://pasta.lternet.edu/package/data/eml/edi/395/2/f07dc3a8ecb04f61747a82e7a1da5846" ,header=F
,skip=1
,sep=","
, col.names=c(
"dateTime",
"temp",
"Depth",
"SerialNum"    ), check.names=TRUE)
#add location info
GM_temp <- GM_temp %>%
mutate(location = 'GeorgesMills',
lat_dd = 43.4288,
long_dd = -72.0675)
HC_temp <- HC_temp %>%
mutate(location = 'HerrickCove',
lat_dd = 43.4096,
long_dd = -72.033)
SB_temp <- SB_temp %>%
mutate(location = 'StateBeach',
lat_dd = 43.3436,
long_dd = -72.0595)
#join and filter for topmost sensor
minibuoy_temp_filter <- full_join(GM_temp, HC_temp) %>%
full_join(SB_temp) %>%
rename(datetime = dateTime,
depth_m = Depth) %>%
filter(!is.na(temp)) %>%
arrange(datetime, depth_m) %>%
group_by(datetime, location, lat_dd, long_dd) %>%
summarize(temp_degC = first(temp),
depth_m = first(depth_m)) %>%
ungroup()
#add source info
minibuoy_temp_filter <- minibuoy_temp_filter %>%
mutate(source = 'edi.395.2')
# round to 2 digits after decimal
minibuoy_temp_filter <- minibuoy_temp_filter %>%
mutate(temp_degC = round(temp_degC, digits = 2))
minibuoy_temp_filter
#join all and mark frequency
all_temp <- full_join(winterhobo_filter, buoy_filter) %>%
full_join(gloeo_temp_dstadj) %>%
full_join(minibuoy_temp_filter)
#add source info
minibuoy_temp_filter <- minibuoy_temp_filter %>%
mutate(source = 'edi.395.2',
datetime = as.POSIXct(datetime, 'UTC'))
# round to 2 digits after decimal
minibuoy_temp_filter <- minibuoy_temp_filter %>%
mutate(temp_degC = round(temp_degC, digits = 2))
minibuoy_temp_filter
#join all and mark frequency
all_temp <- full_join(winterhobo_filter, buoy_filter) %>%
full_join(gloeo_temp_dstadj) %>%
full_join(minibuoy_temp_filter)
#filter for may through nov (ice out season)
all_temp_filtered <- all_temp %>%
mutate(month = as.numeric(format(datetime, '%m'))) %>%
filter(month >= 5 & month <= 11)
#reorg columns
all_temp_filtered <- all_temp_filtered %>%
select(datetime, lat_dd, long_dd, location, depth_m, temp_degC, source, month)
all_temp_filtered
# export data ----
all_temp_filtered %>%
mutate(datetime = as.character(datetime)) %>%
write_csv(., paste0(figdir, 'insitu_temp_data_v', Sys.Date(), '.csv'))
knitr::opts_chunk$set(echo = FALSE)
# read in libraries and functions
source('R_library.R')
#print r version
R.version$version.string
# point to directories
datadir = '~/GitHub/ids-ne-lakes/data/'
C2_datadir <- '~/GitHub/ids-ne-lakes/data/colab-output/C2/'
#read in previously collated and filtered in-situ data
insitu <- read.csv(paste0(datadir, 'insitu_temp_data_v2021-10-20.csv')) %>%
filter(!is.na(lat_dd)) %>%
mutate(datetime = as.POSIXct(datetime, tz = 'Etc/GMT+5'))
# point to directories
datadir = '~/GitHub/ids-ne-lakes/data/'
knitr::opts_chunk$set(echo = FALSE)
# read in libraries and functions
source('R_library.R')
#print r version
R.version$version.string
# point to directories
datadir = '~/GitHub/ids-ne-lakes/data/'
C2_datadir <- '~/GitHub/ids-ne-lakes/data/colab-output/C2/'
#read in previously collated and filtered in-situ data
insitu <- read.csv(paste0(datadir, 'insitu_temp_data_v2021-10-20.csv')) %>%
filter(!is.na(lat_dd)) %>%
mutate(datetime = as.POSIXct(datetime, tz = 'Etc/GMT+5'))
# point to directories
datadir = '~/GitHub/ids-ne-lakes/data/in-situ locs/'
#read in previously collated and filtered in-situ data
insitu <- read.csv(paste0(datadir, 'insitu_temp_data_v2021-10-20.csv')) %>%
filter(!is.na(lat_dd)) %>%
mutate(datetime = as.POSIXct(datetime, tz = 'Etc/GMT+5'))
#read in previously collated and filtered in-situ data
insitu <- read.csv(paste0(datadir, 'insitu_temp_data_v2021-10-20.csv')) %>%
filter(!is.na(lat_dd)) %>%
mutate(datetime = as.POSIXct(datetime, tz = 'Etc/GMT+5'))
#read in Collection 2 paired data, an output from the Colab Notebook
C2ST <- read.csv(file.path(C2_datadir,paste0('C2_v2_temp_landsat_paired.csv')))
# Summarize in-situ to define spread and IQR limits ####
# get range per day during hours of flyover
range_per_date <- insitu %>%
mutate(hour = as.numeric(format(datetime, '%H')),
date = as.Date(datetime)) %>%
filter(hour >= 9 & hour < 11) %>%
group_by(date) %>%
summarize(temp_range = max(temp_degC) - min(temp_degC),
IQR = IQR(temp_degC, na.rm = T),
n_locs = length(unique(location)))
#save max observed spread and IQR for further filtering
max_spread <- max(range_per_date$temp_range, na.rm = T)
print('Maximium spread observed is:')
max_spread
max_IQR <- max(range_per_date$IQR, na.rm = T)
print('Maximium interquartile range observed is:')
max_IQR
# Flag C2 data for freezing temps, spread P/F, IQR P/F ####
C2ST <- C2ST %>%
mutate(freeze_QAQC = case_when(surface_temp_min < 0 ~ 'F', #pass/fail for freezing temps
TRUE ~ 'P')) %>%
mutate(temp_spread = round(surface_temp_max, digits = 1) - round(surface_temp_min, digits = 1)) %>% #calc temp spread; pass/fail for temp spread
mutate(spread_QAQC = case_when(temp_spread < max_spread*1.1 ~ 'P',
TRUE ~ 'F')) %>%
mutate(IQR = round(surface_temp_p75, digits = 1) - round(surface_temp_p25, digits = 1))  %>%  #calc IQR; pass/fail for temp IQR
mutate(IQR_QAQC = case_when(IQR < max_IQR*1.1 ~ 'P',
TRUE ~ 'F'))
# filtered datasets
C2ST_freeze <- C2ST %>%
filter(freeze_QAQC == 'P')
C2ST_maxrange <- C2ST %>%
filter(spread_QAQC == 'P')
C2ST_maxIQR <- C2ST %>%
filter(IQR_QAQC == 'P')
C2ST_cloud <- C2ST %>%
filter(cloud_cover <40)
C2ST_kurtosis <- C2ST %>%
filter(surface_temp_kurtosis > 2)
# Deming Regressions ####
# deming regression for C2
C2_deming = deming::deming(C2ST$surface_temp_median ~ C2ST$is_temp_med)
C2_deming_forresid = mcreg(x = C2ST$is_temp_med, y = C2ST$surface_temp_median, method.reg = 'Deming')
C2ST$opt_resid = MCResult.getResiduals(C2_deming_forresid)$optimized
C2ST$filter = 'none'
# deming regression for C2 without freezing temps
C2_freeze_deming = deming::deming(C2ST_freeze$surface_temp_median ~ C2ST_freeze$is_temp_med)
C2_freeze_deming_forresid = mcreg(x = C2ST_freeze$is_temp_med,
y = C2ST_freeze$surface_temp_median,
method.reg = 'Deming')
C2ST_freeze$opt_resid = MCResult.getResiduals(C2_freeze_deming_forresid)$optimized
C2ST_freeze$filter = 'freeze'
# deming regression for C2 without freezing temps and within range
C2_maxrange_deming = deming::deming(C2ST_maxrange$surface_temp_median ~ C2ST_maxrange$is_temp_med)
C2_maxrange_deming_forresid = mcreg(x = C2ST_maxrange$is_temp_med,
y = C2ST_maxrange$surface_temp_median,
method.reg = 'Deming')
C2ST_maxrange$opt_resid = MCResult.getResiduals(C2_maxrange_deming_forresid)$optimized
C2ST_maxrange$filter = 'range'
# deming regression for C2 without freezing temps and within IQR
C2_maxIQR_deming = deming::deming(C2ST_maxIQR$surface_temp_median ~ C2ST_maxIQR$is_temp_med)
C2_maxIQR_deming_forresid = mcreg(x = C2ST_maxIQR$is_temp_med,
y = C2ST_maxIQR$surface_temp_median,
method.reg = 'Deming')
C2ST_maxIQR$opt_resid = MCResult.getResiduals(C2_maxIQR_deming_forresid)$optimized
C2ST_maxIQR$filter = 'IQR'
# deming regression for C2 without freezing temps and within IQR and data from the buoy only
C2_cloud_deming = deming::deming(C2ST_cloud$surface_temp_median ~
C2ST_cloud$is_temp_med)
C2_cloud_deming_forresid = mcreg(x = C2ST_cloud$is_temp_med,
y = C2ST_cloud$surface_temp_median,
method.reg = 'Deming')
C2ST_cloud$opt_resid = MCResult.getResiduals(C2_cloud_deming_forresid)$optimized
C2ST_cloud$filter = 'cloud'
#deming regress for C2 with kurtosis >= 2
C2_kurtosis_deming = deming::deming(C2ST_kurtosis$surface_temp_median ~
C2ST_kurtosis$is_temp_med)
C2_kurtosis_deming_forresid = mcreg(x = C2ST_kurtosis$is_temp_med,
y = C2ST_kurtosis$surface_temp_median,
method.reg = 'Deming')
C2ST_kurtosis$opt_resid = MCResult.getResiduals(C2_kurtosis_deming_forresid)$optimized
C2ST_kurtosis$filter = 'kurtosis'
