write.csv(., file.path(figdir, 'STC_deming_performance_bymission.csv'), row.names = F)
month_mission_error <- all_surface_temp %>%
group_by(collection, month, LSmission, filter) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid))/n(), digits = 2),
n_obs = n())  %>%
select(month, collection, LSmission, filter,n_obs, mae, rmse, bias) %>%
pivot_longer(!c(month, LSmission, collection, filter), names_to = 'variable', values_to = 'values') %>%
mutate(variable = factor(variable, levels = c('n_obs', 'mae', 'rmse', 'mse', 'bias'))) %>%
arrange(month, variable) %>%
pivot_wider(names_from = c(LSmission),
values_from = values)
month_error <- all_surface_temp %>%
group_by(collection, month, filter) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid))/n(), digits = 2),
n_obs = n())  %>%
mutate(LSmission = 'All missions') %>%
select(month, collection, LSmission, filter, n_obs, mae, rmse, bias) %>%
pivot_longer(!c(month, LSmission, filter, collection), names_to = 'variable', values_to = 'values') %>%
mutate(variable = factor(variable, levels = c('n_obs', 'mae', 'rmse', 'mse', 'bias'))) %>%
arrange(month, variable) %>%
pivot_wider(names_from = c(LSmission),
values_from = values)
month_error <- full_join(month_mission_error, month_error)
month_error
month_error <- full_join(month_mission_error, month_error) %>%
mutate(filter = factor(filter, levels = c('none', 'kurtosis'))) %>%
arrange(month, collection, filter, variable)
month_error <- all_surface_temp %>%
group_by(collection, month, filter) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid))/n(), digits = 2),
n_obs = n())  %>%
mutate(LSmission = 'All missions') %>%
select(month, collection, LSmission, filter, n_obs, mae, rmse, bias) %>%
pivot_longer(!c(month, LSmission, filter, collection), names_to = 'variable', values_to = 'values') %>%
mutate(variable = factor(variable, levels = c('n_obs', 'mae', 'rmse', 'mse', 'bias'))) %>%
arrange(month, variable) %>%
pivot_wider(names_from = c(LSmission),
values_from = values)
month_error <- full_join(month_mission_error, month_error) %>%
mutate(filter = factor(filter, levels = c('none', 'kurtosis'))) %>%
arrange(month, collection, filter, variable)
month_error
month_error <- full_join(month_mission_error, month_error) %>%
mutate(filter = factor(filter, levels = c('none', 'kurtosis'))) %>%
arrange(month, collection, filter, variable) %>%
filter(filter == 'kurtosis')
month_error
month_error <- full_join(month_mission_error, month_error) %>%
mutate(filter = factor(filter, levels = c('none', 'kurtosis'))) %>%
arrange(month, collection, filter, variable) %>%
filter(filter == 'kurtosis') %>%
select(-collection, -filter)
month_error
month_error <- full_join(month_mission_error, month_error) %>%
mutate(filter = factor(filter, levels = c('none', 'kurtosis'))) %>%
arrange(month, collection, filter, variable) %>%
filter(filter == 'kurtosis') %>%
select(month, variable, `All missions`, `LS 5`, `LS 7`, `LS 8`)
month_error <- all_surface_temp %>%
group_by(collection, month, filter) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid))/n(), digits = 2),
n_obs = n())  %>%
mutate(LSmission = 'All missions') %>%
select(month, collection, LSmission, filter, n_obs, mae, rmse, bias) %>%
pivot_longer(!c(month, LSmission, filter, collection), names_to = 'variable', values_to = 'values') %>%
mutate(variable = factor(variable, levels = c('n_obs', 'mae', 'rmse', 'mse', 'bias'))) %>%
arrange(month, variable) %>%
pivot_wider(names_from = c(LSmission),
values_from = values)
month_error <- full_join(month_mission_error, month_error) %>%
mutate(filter = factor(filter, levels = c('none', 'kurtosis'))) %>%
arrange(month, collection, filter, variable) %>%
filter(filter == 'kurtosis') %>%
select(month, variable, `All missions`, `LS 5`, `LS 7`, `LS 8`)
month_error
month_error <- all_surface_temp %>%
group_by(collection, month, filter) %>%
summarise(mse = round(sum((opt_resid^2))/n(), digits = 2),
rmse = round(sqrt(mse), digits = 2),
bias = round(sum(opt_resid)/n(), digits = 2),
mae = round(sum(abs(opt_resid))/n(), digits = 2),
n_obs = n())  %>%
mutate(LSmission = 'All missions') %>%
select(month, collection, LSmission, filter, n_obs, mae, rmse, bias) %>%
pivot_longer(!c(month, LSmission, filter, collection), names_to = 'variable', values_to = 'values') %>%
mutate(variable = factor(variable, levels = c('n_obs', 'mae', 'rmse', 'mse', 'bias'))) %>%
arrange(month, variable) %>%
pivot_wider(names_from = c(LSmission),
values_from = values)
month_error <- full_join(month_mission_error, month_error) %>%
ungroup() %>%
mutate(filter = factor(filter, levels = c('none', 'kurtosis'))) %>%
arrange(month, collection, filter, variable) %>%
filter(filter == 'kurtosis') %>%
select(month, variable, `All missions`, `LS 5`, `LS 7`, `LS 8`)
month_error
write.csv(month_error, file.path(figdir, 'STD_deming_kurtosis_performancebymonth.csv'), row.names = F)
source('scripts/R_library.R')
figdir = 'figures/'
datadir = 'data/'
lmp <- read.csv('https://raw.githubusercontent.com/Lake-Sunapee-Protective-Association/LMP/main/master%20files/LSPALMP_1986-2020_v2021-03-29.csv')
# load all LS data, filter for freeze and cloud cover
ls <- read.csv(file.path(datadir, 'colab-output/C2/C2_v2_temp_stats.csv')) %>%
mutate(date = substrRight(`system.index`, 8),
date = as.Date(date, format = '%Y%m%d')) %>%
mutate(LSmission = case_when(grepl('LT05', `system.index`) ~ 'LS 5',
grepl('LT04', `system.index`) ~ 'LS 4',
grepl('LE07', `system.index`) ~ 'LS 7',
grepl('LC08', `system.index`) ~ 'LS 8',
TRUE ~ NA_character_))
#### whole lake median by month and year ####
lmp_temp_monthly_stats <- lmp_temp_deep %>%
mutate(month = as.numeric(format(as.Date(date), '%m')),
day = as.numeric(format(as.Date(date), '%d')),
year = as.numeric(format(as.Date(date), '%Y'))) %>%
group_by(year, month) %>%
summarise(is_summer_median_temp_degC = median(value),
is_summer_max_temp_degC = max(value),
is_summer_min_temp_degC = min(value),
is_n_obs = length(value),
day = min(day)) %>%
filter((month >=5 & month < 12))
lmp_temp_deep <- lmp %>%
filter(parameter == 'temp_C') %>%
filter(station == 200 | station ==210 | station == 220| station==230) %>%
filter(depth_m == 0.5)
ls_kurtosis <- ls %>%
filter(surface_temp_kurtosis >2 )
# load all LS data, filter for freeze and cloud cover
ls <- read.csv(file.path(datadir, 'colab-output/C2/C2_v2_temp_stats.csv')) %>%
mutate(date = substrRight(`system.index`, 8),
date = as.Date(date, format = '%Y%m%d')) %>%
mutate(LSmission = case_when(grepl('LT05', `system.index`) ~ 'LS 5',
grepl('LT04', `system.index`) ~ 'LS 4',
grepl('LE07', `system.index`) ~ 'LS 7',
grepl('LC08', `system.index`) ~ 'LS 8',
TRUE ~ NA_character_))
ls_kurtosis <- ls %>%
filter(surface_temp_kurtosis >2 )
View(ls_kurtosis)
ls_temp_summer_monthly_median_kurtosis <- ls_kurtosis %>%
mutate(month = as.numeric(format((date), '%m')),
year = as.numeric(format((date), '%Y'))) %>%
group_by(year, month) %>%
summarise(ls_summer_median_temp_degC = median(surface_temp_median),
ls_n_obs = length(surface_temp_median))  %>%
filter(!is.na(month))
View(ls_temp_summer_monthly_median_kurtosis)
november <- ls_temp_summer_monthly_median_kurtosis %>%
filter(month == 11)
View(november)
november <- ls_kurtosis %>%
filter(month == 11)
november <- ls_kurtosis %>%
mutate(month - as.numeric(format(date, '%m'))) %>%
filter(month == 11)
november <- ls_kurtosis %>%
mutate(month - as.numeric(format(date, '%m'))) %>%
filter(month == 11)
november <- ls_kurtosis %>%
mutate(month = as.numeric(format(date, '%m'))) %>%
filter(month == 11)
citation(deming)
library(deming)
citation(deming)
citation(package = deming)
citation(package = 'deming')
citation(package = 'mcr')
knitr::opts_chunk$set(echo = FALSE)
# read in libraries and functions
source('R_library.R')
#print r version
R.version$version.string
# point to directories
datadir = '~/GitHub/ids-ne-lakes/data/'
C2_datadir <- '~/GitHub/ids-ne-lakes/data/colab-output/C2/'
# Plot slope and intercept with 95%ci ####
slope_int_table <- NULL
slope_int_table$model = c( 'C2ST', 'C2ST_freeze', 'C2ST_maxrange', 'C2ST_kurtosis', 'C2ST_maxIQR', 'C2ST_cloud')
slope_int_table$slope = c(C2_deming$coefficients[2],
C2_freeze_deming$coefficients[2],
C2_maxrange_deming$coefficients[2],
C2_kurtosis_deming$coefficients[2],
C2_maxIQR_deming$coefficients[2],
C2_cloud_deming$coefficients[2])
knitr::opts_chunk$set(echo = FALSE)
# read in libraries and functions
source('R_library.R')
#print r version
R.version$version.string
# point to directories
datadir = '~/GitHub/ids-ne-lakes/data/'
C2_datadir <- '~/GitHub/ids-ne-lakes/data/colab-output/C2/'
#read in previously collated and filtered in-situ data
insitu <- read.csv(paste0(datadir, 'insitu_temp_data_v2021-10-20.csv')) %>%
filter(!is.na(lat_dd)) %>%
mutate(datetime = as.POSIXct(datetime, tz = 'Etc/GMT+5'))
#read in Collection 2 paired data, an output from the Colab Notebook
C2ST <- read.csv(file.path(C2_datadir,paste0('C2_v2_temp_landsat_paired.csv')))
# Summarize in-situ to define spread and IQR limits ####
# get range per day during hours of flyover
range_per_date <- insitu %>%
mutate(hour = as.numeric(format(datetime, '%H')),
date = as.Date(datetime)) %>%
filter(hour >= 9 & hour < 11) %>%
group_by(date) %>%
summarize(temp_range = max(temp_degC) - min(temp_degC),
IQR = IQR(temp_degC, na.rm = T),
n_locs = length(unique(location)))
#save max observed spread and IQR for further filtering
max_spread <- max(range_per_date$temp_range, na.rm = T)
print('Maximium spread observed is:')
max_spread
max_IQR <- max(range_per_date$IQR, na.rm = T)
print('Maximium interquartile range observed is:')
max_IQR
# Flag C2 data for freezing temps, spread P/F, IQR P/F ####
C2ST <- C2ST %>%
mutate(freeze_QAQC = case_when(surface_temp_min < 0 ~ 'F', #pass/fail for freezing temps
TRUE ~ 'P')) %>%
mutate(temp_spread = round(surface_temp_max, digits = 1) - round(surface_temp_min, digits = 1)) %>% #calc temp spread; pass/fail for temp spread
mutate(spread_QAQC = case_when(temp_spread < max_spread*1.1 ~ 'P',
TRUE ~ 'F')) %>%
mutate(IQR = round(surface_temp_p75, digits = 1) - round(surface_temp_p25, digits = 1))  %>%  #calc IQR; pass/fail for temp IQR
mutate(IQR_QAQC = case_when(IQR < max_IQR*1.1 ~ 'P',
TRUE ~ 'F'))
# filtered datasets
C2ST_freeze <- C2ST %>%
filter(freeze_QAQC == 'P')
C2ST_maxrange <- C2ST %>%
filter(spread_QAQC == 'P')
C2ST_maxIQR <- C2ST %>%
filter(IQR_QAQC == 'P')
C2ST_cloud <- C2ST %>%
filter(cloud_cover <40)
C2ST_kurtosis <- C2ST %>%
filter(surface_temp_kurtosis > 2)
# Deming Regressions ####
# deming regression for C2
C2_deming = deming::deming(C2ST$surface_temp_median ~ C2ST$is_temp_med)
C2_deming_forresid = mcreg(x = C2ST$is_temp_med, y = C2ST$surface_temp_median, method.reg = 'Deming')
C2ST$opt_resid = MCResult.getResiduals(C2_deming_forresid)$optimized
C2ST$filter = 'none'
# deming regression for C2 without freezing temps
C2_freeze_deming = deming::deming(C2ST_freeze$surface_temp_median ~ C2ST_freeze$is_temp_med)
C2_freeze_deming_forresid = mcreg(x = C2ST_freeze$is_temp_med,
y = C2ST_freeze$surface_temp_median,
method.reg = 'Deming')
C2ST_freeze$opt_resid = MCResult.getResiduals(C2_freeze_deming_forresid)$optimized
C2ST_freeze$filter = 'freeze'
# deming regression for C2 without freezing temps and within range
C2_maxrange_deming = deming::deming(C2ST_maxrange$surface_temp_median ~ C2ST_maxrange$is_temp_med)
C2_maxrange_deming_forresid = mcreg(x = C2ST_maxrange$is_temp_med,
y = C2ST_maxrange$surface_temp_median,
method.reg = 'Deming')
C2ST_maxrange$opt_resid = MCResult.getResiduals(C2_maxrange_deming_forresid)$optimized
C2ST_maxrange$filter = 'range'
# deming regression for C2 without freezing temps and within IQR
C2_maxIQR_deming = deming::deming(C2ST_maxIQR$surface_temp_median ~ C2ST_maxIQR$is_temp_med)
C2_maxIQR_deming_forresid = mcreg(x = C2ST_maxIQR$is_temp_med,
y = C2ST_maxIQR$surface_temp_median,
method.reg = 'Deming')
C2ST_maxIQR$opt_resid = MCResult.getResiduals(C2_maxIQR_deming_forresid)$optimized
C2ST_maxIQR$filter = 'IQR'
# deming regression for C2 without freezing temps and within IQR and data from the buoy only
C2_cloud_deming = deming::deming(C2ST_cloud$surface_temp_median ~
C2ST_cloud$is_temp_med)
C2_cloud_deming_forresid = mcreg(x = C2ST_cloud$is_temp_med,
y = C2ST_cloud$surface_temp_median,
method.reg = 'Deming')
C2ST_cloud$opt_resid = MCResult.getResiduals(C2_cloud_deming_forresid)$optimized
C2ST_cloud$filter = 'cloud'
#deming regress for C2 with kurtosis >= 2
C2_kurtosis_deming = deming::deming(C2ST_kurtosis$surface_temp_median ~
C2ST_kurtosis$is_temp_med)
C2_kurtosis_deming_forresid = mcreg(x = C2ST_kurtosis$is_temp_med,
y = C2ST_kurtosis$surface_temp_median,
method.reg = 'Deming')
C2ST_kurtosis$opt_resid = MCResult.getResiduals(C2_kurtosis_deming_forresid)$optimized
C2ST_kurtosis$filter = 'kurtosis'
# Plot Deming regression for all filters to examine performance ####
DemingFigure_a <- ggplot(C2ST, aes(x = is_temp_med, y = surface_temp_median)) +
geom_abline(slope = 1, intercept = 0, color = '#006cd1', size = 0.75) +
geom_point() +
#add deming regression and prediction intervals for C2
geom_abline(intercept = C2_deming$coefficients[1], slope = C2_deming$coefficients[2], size = 0.75) +
geom_abline(intercept = C2_deming$ci[1,1], slope = C2_deming$ci[2,1], linetype = 3, size = 0.75) +
geom_abline(intercept = C2_deming$ci[1,2], slope = C2_deming$ci[2,2], linetype = 3, size = 0.75) +
geom_text(label = paste0('r = ', round(cor(C2ST$surface_temp_median, C2ST$is_temp_med), digits = 3)),
x = 2,
y = 25,
size = 4,
hjust = 0)+
geom_text(label = paste0('n = ', nrow(C2ST)),
x = 2,
y = 23,
size = 4,
hjust = 0)+
labs(x = '',
y = 'median Landsat-derived\nsurface temperature (deg C)',
title = 'no filter') +
theme_bw()+
theme(plot.title = element_text(hjust = 0.5)) +
coord_cartesian(xlim = c(0, 27),
ylim = c(0, 27))
DemingFigure_b <- ggplot(C2ST_freeze, aes(x = is_temp_med, y = surface_temp_median)) +
geom_abline(slope = 1, intercept = 0, color = '#006cd1', size = 0.75) +
geom_point() +
#add deming regression and prediction intervals for C2 filtered for freezing mins
geom_abline(intercept = C2_freeze_deming$coefficients[1], slope = C2_freeze_deming$coefficients[2], size = 0.75) +
geom_abline(intercept = C2_freeze_deming$ci[1,1], slope = C2_freeze_deming$ci[2,1], linetype = 3, size = 0.75) +
geom_abline(intercept = C2_freeze_deming$ci[1,2], slope = C2_freeze_deming$ci[2,2], linetype = 3, size = 0.75) +
geom_text(label = paste0('r = ', round(cor(C2ST_freeze$surface_temp_median, C2ST_freeze$is_temp_med), digits = 3)),
x = 2,
y = 25,
size = 4,
hjust = 0)+
geom_text(label = paste0('n = ', nrow(C2ST_freeze)),
x = 2,
y = 23,
size = 4,
hjust = 0)+
labs(x = '',
y = '\n',
title = 'freeze filter') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)) +
coord_cartesian(xlim = c(0, 27),
ylim = c(0, 27))
DemingFigure_c <- ggplot(C2ST_maxIQR, aes(x = is_temp_med, y = surface_temp_median)) +
geom_abline(slope = 1, intercept = 0, color = '#006cd1', size = 0.75) +
geom_point() +
#add deming regression and prediction intervals for C2 filtered for sub zero and maxIQR
geom_abline(intercept = C2_maxIQR_deming$coefficients[1], slope = C2_maxIQR_deming$coefficients[2], size = 0.75) +
geom_abline(intercept = C2_maxIQR_deming$ci[1,1], slope = C2_maxIQR_deming$ci[2,1], linetype = 3, size = 0.75) +
geom_abline(intercept = C2_maxIQR_deming$ci[1,2], slope = C2_maxIQR_deming$ci[2,2], linetype = 3, size = 0.75) +
geom_text(label = paste0('r = ', round(cor(C2ST_maxIQR$surface_temp_median, C2ST_maxIQR$is_temp_med), digits = 3)),
x = 2,
y = 25,
size = 4,
hjust = 0)+
geom_text(label = paste0('n = ', nrow(C2ST_maxIQR)),
x = 2,
y = 23,
size = 4,
hjust = 0)+
labs(x = '',
y = '\n',
title = 'IQR filter') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)) +
coord_cartesian(xlim = c(0, 27),
ylim = c(0, 27))
DemingFigure_d <- ggplot(C2ST_kurtosis, aes(x = is_temp_med, y = surface_temp_median)) +
geom_abline(slope = 1, intercept = 0, color = '#006cd1', size = 0.75) +
geom_point() +
#add deming regression and prediction intervals for C2 filtered for sub zero and kurtosis
geom_abline(intercept = C2_kurtosis_deming$coefficients[1], slope = C2_kurtosis_deming$coefficients[2], size = 0.75) +
geom_abline(intercept = C2_kurtosis_deming$ci[1,1], slope = C2_kurtosis_deming$ci[2,1], linetype = 3, size = 0.75) +
geom_abline(intercept = C2_kurtosis_deming$ci[1,2], slope = C2_kurtosis_deming$ci[2,2], linetype = 3, size = 0.75) +
geom_text(label = paste0('r = ', round(cor(C2ST_kurtosis$surface_temp_median, C2ST_kurtosis$is_temp_med), digits = 3)),
x = 2,
y = 25,
size = 4,
hjust = 0)+
geom_text(label = paste0('n = ', nrow(C2ST_kurtosis)),
x = 2,
y = 23,
size = 4,
hjust = 0)+
labs(x = '',
y = 'median Landsat-derived\nsurface temperature (deg C)',
title = 'kurtosis filter') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)) +
coord_cartesian(xlim = c(0, 27),
ylim = c(0, 27))
DemingFigure_e <- ggplot(C2ST_cloud, aes(x = is_temp_med, y = surface_temp_median)) +
geom_abline(slope = 1, intercept = 0, color = '#006cd1', size = 0.75) +
geom_point() +
#add deming regression and prediction intervals for C2 filtered for sub zero and cloud
geom_abline(intercept = C2_cloud_deming$coefficients[1], slope = C2_cloud_deming$coefficients[2], size = 0.75) +
geom_abline(intercept = C2_cloud_deming$ci[1,1], slope = C2_cloud_deming$ci[2,1], linetype = 3, size = 0.75) +
geom_abline(intercept = C2_cloud_deming$ci[1,2], slope = C2_cloud_deming$ci[2,2], linetype = 3, size = 0.75) +
geom_text(label = paste0('r = ', round(cor(C2ST_cloud$surface_temp_median, C2ST_cloud$is_temp_med), digits = 3)),
x = 2,
y = 25,
size = 4,
hjust = 0)+
geom_text(label = paste0('n = ', nrow(C2ST_cloud)),
x = 2,
y = 23,
size = 4,
hjust = 0)+
labs(x = expression(bold(paste(italic('in-situ'), ' median water temp (deg C)'))),
y = '\n',
title = 'cloud filter') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)) +
coord_cartesian(xlim = c(0, 27),
ylim = c(0, 27))
DemingFigure_f <- ggplot(C2ST_maxrange, aes(x = is_temp_med, y = surface_temp_median)) +
geom_abline(slope = 1, intercept = 0, color = '#006cd1', size = 0.75) +
geom_point() +
#add deming regression and prediction intervals for C2 filtered for sub zero and maxrange
geom_abline(intercept = C2_maxrange_deming$coefficients[1], slope = C2_maxrange_deming$coefficients[2], size = 0.75) +
geom_abline(intercept = C2_maxrange_deming$ci[1,1], slope = C2_maxrange_deming$ci[2,1], linetype = 3, size = 0.75) +
geom_abline(intercept = C2_maxrange_deming$ci[1,2], slope = C2_maxrange_deming$ci[2,2], linetype = 3, size = 0.75) +
geom_text(label = paste0('r = ', round(cor(C2ST_maxrange$surface_temp_median, C2ST_maxrange$is_temp_med), digits = 3)),
x = 2,
y = 25,
size = 4,
hjust = 0)+
geom_text(label = paste0('n = ', nrow(C2ST_maxrange)),
x = 2,
y = 23,
size = 4,
hjust = 0)+
labs(x = '',
y = '\n',
title = 'range filter') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)) +
coord_cartesian(xlim = c(0, 27),
ylim = c(0, 27))
DemingFigure <- plot_grid(DemingFigure_a, DemingFigure_b, DemingFigure_c, DemingFigure_d, DemingFigure_e, DemingFigure_f,
ncol = 3,
labels = c('a', 'b', 'c', 'd', 'e', 'f', '', 'g', ''),
label_x = 0.15)
DemingFigure
# Plot slope and intercept with 95%ci ####
slope_int_table <- NULL
slope_int_table$model = c( 'C2ST', 'C2ST_freeze', 'C2ST_maxrange', 'C2ST_kurtosis', 'C2ST_maxIQR', 'C2ST_cloud')
slope_int_table$slope = c(C2_deming$coefficients[2],
C2_freeze_deming$coefficients[2],
C2_maxrange_deming$coefficients[2],
C2_kurtosis_deming$coefficients[2],
C2_maxIQR_deming$coefficients[2],
C2_cloud_deming$coefficients[2])
slope_int_table$intercept = c(C2_deming$coefficients[1],
C2_freeze_deming$coefficients[1],
C2_maxrange_deming$coefficients[1],
C2_kurtosis_deming$coefficients[1],
C2_maxIQR_deming$coefficients[1],
C2_cloud_deming$coefficients[1])
slope_int_table$slope_se = c(C2_deming$se[2],
C2_freeze_deming$se[2],
C2_maxrange_deming$se[2],
C2_kurtosis_deming$se[2],
C2_maxIQR_deming$se[2],
C2_cloud_deming$se[2])
slope_int_table$int_se = c(  C2_deming$se[1],
C2_freeze_deming$se[1],
C2_maxrange_deming$se[1],
C2_kurtosis_deming$se[1],
C2_maxIQR_deming$se[1],
C2_cloud_deming$se[1])
slope_int_table <- as.data.frame(slope_int_table)
slope_int_table <- slope_int_table %>%
pivot_longer(cols = c(slope, intercept), names_to = 'var', values_to = 'value') %>%
mutate(se = case_when(var == 'slope' ~ slope_se,
var == 'intercept' ~ int_se,
TRUE ~ NA_real_),
u95 = value + se,
l95 = value - se) %>%
select(-slope_se, -int_se) %>%
mutate(model = factor(model,
levels = c('C2ST', 'C2ST_freeze','C2ST_maxIQR', 'C2ST_kurtosis', 'C2ST_cloud', 'C2ST_maxrange'),
labels = c('no filter', 'freeze filter', 'IQR filter', 'kurtosis filter', 'cloud filter','range filter'))) %>%
mutate(regression = 'Deming')
slope_fig <- slope_int_table %>%
filter(var == 'slope') %>%
ggplot(., aes(x = model, y = value)) +
geom_point() +
geom_pointrange(aes(ymin = l95, ymax = u95))+
geom_abline(intercept = 1, slope = 0, color = '#454545', lty=2) +
labs(x = NULL,
y = 'estimated slope') +
coord_cartesian(ylim = c(0.85, 1.15)) +
theme_bw()
int_fig <- slope_int_table %>%
filter(var == 'intercept') %>%
ggplot(., aes(x = model, y = value)) +
geom_point() +
geom_pointrange(aes(ymin = l95, ymax = u95))+
geom_abline(intercept = 0, slope = 0, color = '#454545', lty=2) +
labs(x = NULL,
y = 'estmiated intercept') +
coord_cartesian(ylim = c(-3.2, 0)) +
theme_bw()
slope_int_fig <- plot_grid(slope_fig, int_fig,
ncol = 1,
labels = c('a', 'b'),
label_size = 12)
slope_int_fig
